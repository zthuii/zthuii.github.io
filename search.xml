<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022年中职组全国职业院校技能大赛网络搭建与应用赛项（交换解法）</title>
      <link href="/2024/05/14/2022%E5%B9%B4%E4%B8%AD%E8%81%8C%E7%BB%84%E5%85%A8%E5%9B%BD%E8%81%8C%E4%B8%9A%E9%99%A2%E6%A0%A1%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%BA%94%E7%94%A8%E8%B5%9B%E9%A1%B9%EF%BC%88%E4%BA%A4%E6%8D%A2%E8%A7%A3%E6%B3%95%EF%BC%89/"/>
      <url>/2024/05/14/2022%E5%B9%B4%E4%B8%AD%E8%81%8C%E7%BB%84%E5%85%A8%E5%9B%BD%E8%81%8C%E4%B8%9A%E9%99%A2%E6%A0%A1%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%BA%94%E7%94%A8%E8%B5%9B%E9%A1%B9%EF%BC%88%E4%BA%A4%E6%8D%A2%E8%A7%A3%E6%B3%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="2022年中职组全国职业院校技能大赛网络搭建与应用赛项（交换解法）"><a href="#2022年中职组全国职业院校技能大赛网络搭建与应用赛项（交换解法）" class="headerlink" title="2022年中职组全国职业院校技能大赛网络搭建与应用赛项（交换解法）"></a>2022年中职组全国职业院校技能大赛网络搭建与应用赛项（交换解法）</h1><h2 id><a href="#" class="headerlink" title=" "></a> </h2><h2 id="三、交换配置"><a href="#三、交换配置" class="headerlink" title="三、交换配置"></a>三、交换配置</h2><p>1.配置vlan，SW1、SW2、SW3、AC1的二层链路只允许相应vlan通过。</p><p><img alt height="655" src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/663e6c2a02704b00b329ffbf7effc09b.png" width="426"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首先按照题目中端口与vlan对应表进行划分</span><br><span class="line">SW1,SW2,SW3:</span><br><span class="line">Interface Ethernet1/0/1</span><br><span class="line"> switchport access vlan 10</span><br><span class="line">!</span><br><span class="line">Interface Ethernet1/0/2</span><br><span class="line"> switchport access vlan 20</span><br><span class="line">!</span><br><span class="line">Interface Ethernet1/0/3</span><br><span class="line"> switchport access vlan 30</span><br><span class="line">!</span><br><span class="line">Interface Ethernet1/0/4</span><br><span class="line"> switchport access vlan 40</span><br><span class="line">!</span><br><span class="line">Interface Ethernet1/0/5</span><br><span class="line"> switchport access vlan 50</span><br><span class="line">!</span><br><span class="line">Interface Ethernet1/0/6</span><br><span class="line"> switchport access vlan 60</span><br><span class="line">!</span><br><span class="line">Interface Ethernet1/0/7</span><br><span class="line"> switchport access vlan 70</span><br><span class="line">!</span><br><span class="line">Interface Ethernet1/0/8</span><br><span class="line"> switchport access vlan 80</span><br><span class="line">!</span><br><span class="line">Interface Ethernet1/0/9</span><br><span class="line"> switchport access vlan 90</span><br><span class="line">!</span><br><span class="line">二层链路只允许相应vlan通过，哪些链路是二层链路在“网络设备连接表”中标注了</span><br><span class="line">SW1：</span><br><span class="line">Interface Ethernet1/0/23</span><br><span class="line"> switchport mode trunk</span><br><span class="line"> switchport trunk allowed vlan 10;20;30;40;50;60;70;80;90 --只允许表中的vlan通过</span><br><span class="line">！</span><br><span class="line">Interface Ethernet1/0/28</span><br><span class="line"> switchport mode trunk</span><br><span class="line"> switchport trunk allowed vlan 10;20;30;40;50;60;70;80;90 </span><br><span class="line">SW2：</span><br><span class="line">Interface Ethernet1/0/23</span><br><span class="line"> switchport mode trunk</span><br><span class="line"> switchport trunk allowed vlan 10;20;30;40;50;60;70;80;90 </span><br><span class="line">！</span><br><span class="line">Interface Ethernet1/0/28</span><br><span class="line"> switchport mode trunk</span><br><span class="line"> switchport trunk allowed vlan 10;20;30;40;50;60;70;80;90 </span><br><span class="line">SW3：</span><br><span class="line">Interface Ethernet1/0/23</span><br><span class="line"> switchport mode trunk</span><br><span class="line"> switchport trunk allowed vlan 10;20;30;50;60;70;80;90 </span><br><span class="line">!</span><br><span class="line">Interface Ethernet1/0/24</span><br><span class="line"> switchport mode trunk</span><br><span class="line"> switchport trunk allowed vlan 10;20;30;50;60;70;80;90 </span><br></pre></td></tr></table></figure><p>2.SW1、SW2、SW3启用MSTP，实现网络二层负载均衡和冗余备份，创建实例 Instance10和Instance20，名称为SKILLS，修订版本为1，其中Instance10关 联vlan60和vlan70，Instance20关联vlan80和vlan90。SW1为Instance0和 Instance10的根交换机，为Instance20备份根交换机；SW2为Instance20根交 换机，为Instance0和Instance10的备份根交换机；根交换机STP优先级为0， 备份根交换机STP优先级为4096。关闭交换机之间三层互联接口的STP。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1：</span><br><span class="line">spanning-tree mst configuration</span><br><span class="line"> name SKILLS --名称为SKILLS</span><br><span class="line"> revision-level 1  --修订版本为1</span><br><span class="line"> instance 0 vlan 1-59;61-69;71-79;81-89;91-4094 --这个是自带的实例0，默认包含了所有vlan</span><br><span class="line"> instance 10 vlan 60;70  --题目要求实例10关联vlan60，70</span><br><span class="line"> instance 20 vlan 80;90  --实例20关联vlan80，90</span><br><span class="line"> exit</span><br><span class="line">spanning-tree --开启交换机的生成树功能（开完交换机会弹非常多的信息，这是正常现象）</span><br><span class="line"> spanning-tree mst 0 priority 0 --SW1为实例0的根交换机，题目说了根交换机的优先级是0</span><br><span class="line"> spanning-tree mst 10 priority 0 --SW1为实例10的根交换机</span><br><span class="line"> spanning-tree mst 20 priority 4096 --SW1为实例20的备份根交换机优先级为4096 </span><br><span class="line">SW2：</span><br><span class="line">spanning-tree mst configuration</span><br><span class="line"> name SKILLS</span><br><span class="line"> revision-level 1</span><br><span class="line"> instance 0 vlan 1-59;61-69;71-79;81-89;91-4094</span><br><span class="line"> instance 10 vlan 60;70</span><br><span class="line"> instance 20 vlan 80;90</span><br><span class="line"> exit</span><br><span class="line">spanning-tree</span><br><span class="line"> spanning-tree mst 0 priority 4096</span><br><span class="line"> spanning-tree mst 10 priority 4096</span><br><span class="line"> spanning-tree mst 20 priority 0</span><br><span class="line">SW3：</span><br><span class="line">spanning-tree mst configuration </span><br><span class="line"> name SKILLS</span><br><span class="line"> revision-level 1</span><br><span class="line"> instance 0 vlan 1-59;61-69;71-79;81-89;91-4094</span><br><span class="line"> instance 10 vlan 60;70</span><br><span class="line"> instance 20 vlan 80;90</span><br><span class="line"> exit</span><br><span class="line">spanning-tree</span><br><span class="line"></span><br><span class="line">注：SW3虽然不需要调整实例的优先级，但是还是需要在configuration里面配置和SW1、SW2中一模一样的，这样他们才会在同一个STP域当中，并且需要开启生成树功能</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">关闭交换机之间三层互联接口的STP（这个是题目要求的，但是就算题目不要求我们也需要做，因为做完STP之后会发现交换机之间的3层互联口被STP给down了）</span><br><span class="line">SW1：</span><br><span class="line">Interface Ethernet1/0/22</span><br><span class="line"> no spanning-tree</span><br><span class="line">！</span><br><span class="line">Interface Ethernet1/0/26</span><br><span class="line"> no spanning-tree</span><br><span class="line">！</span><br><span class="line">Interface Ethernet1/0/27 --承载vpn的也算3层互联</span><br><span class="line"> no spanning-tree</span><br><span class="line">SW2：</span><br><span class="line">Interface Ethernet1/0/22</span><br><span class="line"> no spanning-tree</span><br><span class="line">！</span><br><span class="line">Interface Ethernet1/0/26</span><br><span class="line"> no spanning-tree</span><br><span class="line">！</span><br><span class="line">Interface Ethernet1/0/27 </span><br><span class="line"> no spanning-tree</span><br><span class="line">SW3：</span><br><span class="line">Interface Ethernet1/0/21</span><br><span class="line"> no spanning-tree</span><br><span class="line">!</span><br><span class="line">Interface Ethernet1/0/22</span><br><span class="line"> no spanning-tree</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.SW1和SW2之间利用三条裸光缆实现互通，其中一条裸光缆承载三层IP 业务、一条裸光缆承载VPN业务、一条裸光缆承载二层业务。用相关技术分别实 现财务1段、财务2段业务路由表与其它业务路由表隔离，财务业务VPN实例名 称为CW。承载二层业务的只有一条裸光缆通道，配置相关技术，方便后续链路扩 容与冗余备份，编号为1，用LACP协议，SW1为active，SW2为active；采用 源、目的IP进行实现流量负载分担。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1：</span><br><span class="line">ip vrf CW --创建VPN实例CW</span><br><span class="line">!</span><br><span class="line">interface Vlan40 --财务1段 </span><br><span class="line"> ip vrf forwarding CW --将此接口绑定到vpn实例CW中（绑定完IP地址会被清空，需要重新配置）</span><br><span class="line"> ipv6 address 2001:10:10:14::1/64</span><br><span class="line"> ip address 10.10.14.1 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface Vlan1027 --承载VPN业务的VLAN也需要加入到VPN实例当中</span><br><span class="line"> ip vrf forwarding CW</span><br><span class="line"> ip address 10.10.255.1 255.255.255.252</span><br><span class="line">!</span><br><span class="line">SW2：</span><br><span class="line">ip vrf CW</span><br><span class="line">！</span><br><span class="line">interface Vlan40</span><br><span class="line"> ip vrf forwarding CW</span><br><span class="line"> ipv6 address 2001:10:10:24::1/64</span><br><span class="line"> ip address 10.10.24.1 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface Vlan1027</span><br><span class="line"> ip vrf forwarding CW</span><br><span class="line"> ip address 10.10.255.2 255.255.255.252</span><br><span class="line">!</span><br><span class="line">承载二层业务的只有一条裸光缆通道，配置相关技术，方便后续链路扩</span><br><span class="line">容与冗余备份，编号为1，用LACP协议，SW1为active，SW2为active；</span><br><span class="line">采用源、目的IP进行实现流量负载分担</span><br><span class="line">SW1、SW2：</span><br><span class="line">port-group 1 --创建编号为1的端口聚合组</span><br><span class="line">load-balance dst-src-ip --设置流量负载分担模式为源、目的IP</span><br><span class="line">Interface Ethernet1/0/28 --进入承载二层业务的端口</span><br><span class="line"> port-group 1 mode active --绑定端口聚合组1并将模式设置成active</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.将 SW3 模拟为 Internet 交换机，实现与集团其它业务路由表隔离， Internet 路由表 VPN 实例名称为Internet。将SW3模拟办事处交换机，实现与 集团其它业务路由表隔离，办事处路由表VPN实例名称为Guangdong。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW3：</span><br><span class="line">创建相应的vpn实例</span><br><span class="line"></span><br><span class="line">ip vrf Guangdong </span><br><span class="line">!</span><br><span class="line">ip vrf Internet</span><br><span class="line">!</span><br><span class="line">然后根据“网络设备IP地址分配表”的“SW3模拟办事处”和“SW3模拟Internet”来配置IP地址</span><br><span class="line"></span><br><span class="line">interface Loopback2</span><br><span class="line"> ip vrf forwarding Guangdong</span><br><span class="line"> ipv6 address 2001:10:10:3::2/128</span><br><span class="line"> ip address 10.10.3.2 255.255.255.255</span><br><span class="line">!</span><br><span class="line">interface Vlan110</span><br><span class="line"> ip vrf forwarding Guangdong</span><br><span class="line"> ipv6 address 2001:10:16:110::1/64</span><br><span class="line"> ip address 10.16.110.1 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface Vlan120</span><br><span class="line"> ip vrf forwarding Guangdong</span><br><span class="line"> ipv6 address 2001:10:16:120::1/64</span><br><span class="line"> ip address 10.16.120.1 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface Vlan1015</span><br><span class="line"> ip vrf forwarding Guangdong</span><br><span class="line"> ip address 10.10.255.46 255.255.255.252</span><br><span class="line">!</span><br><span class="line">interface Loopback3</span><br><span class="line"> ip vrf forwarding Internet</span><br><span class="line"> ipv6 address 2001:200:200:3::3/128</span><br><span class="line"> ip address 200.200.3.3 255.255.255.255</span><br><span class="line">!</span><br><span class="line">interface Vlan1017</span><br><span class="line"> ip vrf forwarding Internet</span><br><span class="line"> ip address 200.200.200.1 255.255.255.252</span><br><span class="line">!</span><br><span class="line">interface Vlan1018</span><br><span class="line"> ip vrf forwarding Internet</span><br><span class="line"> ip address 200.200.200.5 255.255.255.252</span><br><span class="line">!</span><br><span class="line">配置完记得将互联vlan绑定到对应的端口上</span><br></pre></td></tr></table></figure><p>5.SW1 法务物理接口限制收发数据占用的带宽均为1000Mbps，限制所有报文 最大收包速率为1000packets/s，如果超过了配置交换机端口的报文最大收包速 率则关闭此端口，1分钟后恢复此端口；启用端口安全功能，最大安全MAC地址 数为20，当超过设定MAC地址数量的最大值，不学习新的MAC、丢弃数据包、发 snmp trap、同时在syslog日志中记录，端口的老化定时器到期后，在老化周期 中没有流量的部分表项老化，有流量的部分依旧保留，恢复时间为10分钟；禁 止采用访问控制列表，只允许IP主机位为20-50的数据包进行转发；禁止配置 访问控制列表，实现端口间二层流量无法互通，组名称FW。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1 法务物理接口限制收发数据占用的带宽均为1000Mbps，限制所有报文</span><br><span class="line">最大收包速率为1000packets/s，如果超过了配置交换机端口的报文最大收包速</span><br><span class="line">率则关闭此端口，1分钟后恢复此端口</span><br><span class="line"></span><br><span class="line">SW1：</span><br><span class="line">Interface Ethernet1/0/3 --法务对应的端口</span><br><span class="line"> bandwidth control 1000000 both --设置带宽为1000mbps，both就是收和发</span><br><span class="line"> rate-violation all 1000 --限制所有报文的收包率为1000</span><br><span class="line"> rate-violation control shutdown recovery 60 --超过设定的1000就关闭当前端口，恢复时间1分钟-60s</span><br><span class="line"></span><br><span class="line">启用端口安全功能，最大安全MAC地址</span><br><span class="line">数为20，当超过设定MAC地址数量的最大值，不学习新的MAC、丢弃数据包、发</span><br><span class="line">snmp trap、同时在syslog日志中记录，端口的老化定时器到期后，在老化周期</span><br><span class="line">中没有流量的部分表项老化，有流量的部分依旧保留，恢复时间为10分钟；</span><br><span class="line">SW1：</span><br><span class="line">mac-address-learning cpu-control --全局模式开启</span><br><span class="line">Interface Ethernet1/0/3 --进入法务对应端口</span><br><span class="line"> switchport port-security --开启端口安全</span><br><span class="line"> switchport port-security maximum 20 --最大安全mac地址为20</span><br><span class="line"> switchport port-security violation restrict recovery 600 --配置MAC地址违规后的操作模式为restrict 恢复时间为10分钟（600s）</span><br><span class="line"> switchport port-security aging type inactivity --配置老化类型为inactivity</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">#shutdown：端口成为err-disable状态，相当于关闭端口，默认处理方式</span><br><span class="line"></span><br><span class="line">#protect：将违规的MAC地址的分组丢弃，但端口处于UP状态。交换机不记录违规分组</span><br><span class="line"></span><br><span class="line">#restrict：将违规的MAC地址的分组丢弃，但端口处于UP状态。交换机记录违规分组</span><br><span class="line"></span><br><span class="line">/*  absolute 表示接口老化到期后，删除所有MAC并重新学习 */</span><br><span class="line"></span><br><span class="line">/*  inactivity 表示与接口连接一段时间（老化时间）没有流量，将其从MAC表删除 */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">禁止采用访问控制列表，只允许IP主机位为20-50的数据包进行转发</span><br><span class="line">SW1：</span><br><span class="line">am enable --全局启用AM功能</span><br><span class="line">Interface Ethernet1/0/3 </span><br><span class="line"> am port --端口启用AM功能</span><br><span class="line"> am ip-pool 10.10.13.20 30 --设置允许的IP地址，不在这个范围的不转发。10.10.13.20后面跟的30的意思是20往后延30个IP，也就是主机位20-50</span><br><span class="line"></span><br><span class="line">禁止配置访问控制列表，实现端口间二层流量无法互通，组名称FW。</span><br><span class="line">SW1：</span><br><span class="line">isolate-port apply l2 --设置端口隔离为2层隔离模式</span><br><span class="line">isolate-port group FW switchport interface Ethernet1/0/3 --设置端口隔离组FW并绑定法务对应的端口</span><br><span class="line"></span><br><span class="line">注：这一整题都是围绕着法务对应的端口进行的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6.开启 SW1日志记录功能和保护功能，采样周期5s一次，恢复周期为100s， 从而保障CPU稳定运行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1：</span><br><span class="line">cpu-protect enable --开启cpu保护功能</span><br><span class="line">cpu-protect log enable --开启cpu日志记录功能</span><br><span class="line">cpu-protect interval 5 --采样周期5s</span><br><span class="line">cpu-protect recovery-time 100 --恢复周期100s</span><br><span class="line">cpu-protect per-ip limit-speed 200  --这个是设备默认敲上去的，不需要敲</span><br><span class="line">cpu-protect per-mac limit-speed 200 --这个也是设备默认敲上去的</span><br><span class="line">!</span><br></pre></td></tr></table></figure><p>7.SW1 配置 SNMP，引擎 id 分别为 1；创建组 GROUP2022，采用最高安全级 别，配置组的读、写视图分别为：SKILLS_R、SKILLS_W；创建认证用户为USER2022， 采用aes算法进行加密，密钥为Pass-1234，哈希算法为sha，密钥为Pass-1234； 当设备有异常时，需要用本地的环回地址loopback1发送v3 Trap消息至集团网 管服务器10.10.11.99、2001:10:10:11::99，采用最高安全级别；当法务部门对 应的用户接口发生UP DOWN事件时，禁止发送trap消息至上述集团网管服务器。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1：</span><br><span class="line">snmp-server enable --开启snmp功能</span><br><span class="line">snmp-server securityip 10.10.11.99 --将网管服务器的IP地址设置为安全地址</span><br><span class="line">snmp-server securityip 2001:10:10:11::99</span><br><span class="line">snmp-server trap-source 10.10.1.1 --设置发送trap消息的源地址为loopback1地址</span><br><span class="line">snmp-server trap-source 2001:10:10:1::1</span><br><span class="line">snmp-server engineid 1 --设置引擎ID</span><br><span class="line">snmp-server user USER2022 GROUP2022 authPriv aes Pass-1234 auth sha Pass-1234 --创建认证用户，这里设置完，查看运行配置密码是乱的，这是正常的，密码被设备给加密了</span><br><span class="line">snmp-server group GROUP2022 authpriv read SKILLS_R write SKILLS_W --创建组，并设置读写视图</span><br><span class="line">snmp-server host 2001:10:10:11::99 v3 authpriv USER2022 --设置发送trap的目的地址，也就是网管服务器的地址，版本v3，最高安全级别，认证用户为USER2022</span><br><span class="line">snmp-server host 10.10.11.99 v3 authpriv USER2022</span><br><span class="line">snmp-server enable traps --开启traps功能</span><br><span class="line">!</span><br><span class="line">Interface Ethernet1/0/3 --进入法务对应的端口</span><br><span class="line"> no switchport updown notification enable --禁止该端口发生updown事件发送trap消息</span><br></pre></td></tr></table></figure><p>8.将SW1与FW1互连流量镜像到SW1 E1/0/1，会话列表为1。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1：</span><br><span class="line">monitor session 1 source interface Ethernet1/0/21 tx --创建一个端口镜像，会话列表为1，源接口为SW1和FW1的互联接口</span><br><span class="line">monitor session 1 source interface Ethernet1/0/21 rx</span><br><span class="line">monitor session 1 destination interface Ethernet1/0/1 --设置目的端口</span><br><span class="line">!</span><br></pre></td></tr></table></figure><p>9.SW1 和 SW2 E1/0/21-28 启用单向链路故障检测，当发生该故障时，端口 标记为errdisable 状态，自动关闭端口，经过1分钟后，端口自动重启；发送 Hello 报文时间间隔为15s；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1，SW2：</span><br><span class="line">uldp enable --开启单向链路故障检测功能，开启后默认为光口的端口都会自动开启该功能，e1/0/21-28默认都是光口</span><br><span class="line">uldp recovery-time 60 --设置恢复时间1分钟（60s）</span><br><span class="line">uldp hello-interval 15 --设置发送hello报文间隔时间为15s</span><br><span class="line">uldp aggressive-mode --开启积极模式，当接口发生故障自动关闭端口（全局开启了该功能，开启uldp的端口也会开启）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>10.SW1和SW2所有端口启用链路层发现协议，更新报文发送时间间隔为20s， 老化时间乘法器值为 5，Trap 报文发送间隔为 10s，配置三条裸光缆端口使能 Trap 功能。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1，SW2：</span><br><span class="line">lldp enable --全局开启链路层发现协议</span><br><span class="line">lldp msgTxHold 5 --老化时间乘法器</span><br><span class="line">lldp tx-interval 20 --更新报文发送间隔时间</span><br><span class="line">lldp notification interval 10 --trap报文发送间隔时间</span><br><span class="line">进入三条裸光缆的端口</span><br><span class="line">Interface Ethernet1/0/26</span><br><span class="line"> lldp trap enable --开启端口的lldp trap 功能</span><br><span class="line">!</span><br><span class="line">Interface Ethernet1/0/27</span><br><span class="line"> lldp trap enable</span><br><span class="line">!</span><br><span class="line">Interface Ethernet1/0/28</span><br><span class="line"> lldp trap enable</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>交换部分至此结束，后面有时间会更新路由部分</p><p>网络建设与运维大赛交流群 （有意向培训加群主）</p><p><img alt height="427" src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/1944d6a96815413fbffe6f474ab97282.png" width="306"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络建设与运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker教程</title>
      <link href="/2024/04/30/Docker%E6%95%99%E7%A8%8B/"/>
      <url>/2024/04/30/Docker%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="*Docker"></a>*Docker</h1><h2 id="Docker为什么会出现？"><a href="#Docker为什么会出现？" class="headerlink" title="Docker为什么会出现？"></a>Docker为什么会出现？</h2><blockquote><p>一款产品：开发—上线 两套环境！应用环境，应用配置！</p></blockquote><p>开发  —-  运维   问题：我在我的电脑上可以运行！版本更新，导致服务不可用！对于运维来说，考验就十分大？</p><p>开发即运维</p><p>环境配置十分麻烦，每一个机器都要部署环境（集群Redis，ES，Hadoop……），费时费力。</p><blockquote><p>那么项目能不能带上环境一起安装呢</p></blockquote><p>Docker通过隔离机制，可以将服务器利用到极致</p><p>本质：所有的技术因为出现了一些问题，我们需要去解决，才去学习。</p><h2 id="Docker的历史"><a href="#Docker的历史" class="headerlink" title="Docker的历史"></a>Docker的历史</h2><p>2010年，几个搞IT的年轻人，就在美国成立了一家公司 <code>dotCloud</code>做一些pass的云计算服务！</p><p>我们将自己的技术（容器化技术）命名 就是docker！</p><p>Docker刚刚诞生的时候，没有引起行业的注意！</p><blockquote><p>开源</p></blockquote><p>开发源代码</p><p>2013年，Docker开源</p><p>Docker越来越多的人发现了Docker的优点，Docker每个月都会更新一个版本</p><p>2014年四月，Docker1.0发布</p><p>Docker为什么这么火呢，因为它相对于一个虚拟机来说，它非常轻。</p><ul><li>在容器技术出来之前，我们都是使用的虚拟机技术。<ul><li>虚拟机：创建一个操作系统非常的笨重  内存占用大</li><li>Docker： 内存占用下 启动快 只需要运行一个软件即可</li></ul></li></ul><p>到现在，所有开发人员都必须会docker！</p><blockquote><p>聊聊Docker</p></blockquote><p>Docker是基于Go语言开发的·！开源项目！</p><p>官网： <a href="https://www.docker.com/">https://www.docker.com/</a></p><p>文档： <a href="https://docs.docker.com/">https://docs.docker.com/</a></p><h2 id="Docker能干嘛"><a href="#Docker能干嘛" class="headerlink" title="Docker能干嘛"></a>Docker能干嘛</h2><ul><li>之前的虚拟机技术<ul><li>1、 资源占用十分多</li><li>冗余步骤多</li><li>启动很慢</li></ul></li></ul><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20231206090521553.png" alt="image-20231206090521553"></p><ul><li>容器化技术</li></ul><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231206090703349.png" alt="image-20231206090703349"></p><blockquote><p>比较Docker和虚拟机技术的不同：</p></blockquote><ul><li>传统虚拟机。虚拟出一条硬件，运行一个完整的操作系统，憨厚在这个系统上安装和运行软件</li><li>容器内的应用直接运行在宿主机的内容，容器是没有自己的内核的，也没有虚拟我们的硬件，所以就轻便了。</li><li>每个容器间时互相隔离，每个容器内都有一个属于自己的文件系统，互不影响。</li></ul><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h3><p><img src="images/15.png" alt="15"></p><p><strong>镜像 （Image）:</strong></p><p>docker镜像就好比是一个模板，开源通过这个模板来创建容器服务，romcat镜像—run—tomcat01容器（提供服务器），通过这个镜像可以创建多个容器。</p><p><strong>容器（container）：</strong></p><p>Docker利用容器技术：独立运行一个或者一个组应用，通过镜像来创建的。</p><p>启动、停止、删除、基本命令！</p><p>目前可以把容器给i理解为就是一个简易的Linux系统</p><p><strong>仓库 （repository）：</strong></p><p>仓库就是存放镜像的地方！</p><p>仓库分为共有仓库和私有仓库！</p><p>Docker Hub （默认是国外的）</p><p>阿里云..都有容器服务 </p><h3 id="安装Docker-（网络源）"><a href="#安装Docker-（网络源）" class="headerlink" title="安装Docker （网络源）"></a>安装Docker （网络源）</h3><blockquote><p>环境查看</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统内核要是3.0以上的</span></span><br><span class="line">[root@k8s ~]# uname -r</span><br><span class="line">5.14.0-162.6.1.el9_1.0.1.x86_64</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统版本</span></span><br><span class="line">[root@k8s ~]# cat /etc/os-release </span><br><span class="line">NAME=&quot;Rocky Linux&quot;</span><br><span class="line">VERSION=&quot;9.1 (Blue Onyx)&quot;</span><br><span class="line">ID=&quot;rocky&quot;</span><br><span class="line">ID_LIKE=&quot;rhel centos fedora&quot;</span><br><span class="line">VERSION_ID=&quot;9.1&quot;</span><br><span class="line">PLATFORM_ID=&quot;platform:el9&quot;</span><br><span class="line">PRETTY_NAME=&quot;Rocky Linux 9.1 (Blue Onyx)&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;32&quot;</span><br><span class="line">LOGO=&quot;fedora-logo-icon&quot;</span><br><span class="line">777CPE_NAME=&quot;cpe:/o:rocky:rocky:9::baseos&quot;</span><br><span class="line">HOME_URL=&quot;https://rockylinux.org/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.rockylinux.org/&quot;</span><br><span class="line">ROCKY_SUPPORT_PRODUCT=&quot;Rocky-Linux-9&quot;</span><br><span class="line">ROCKY_SUPPORT_PRODUCT_VERSION=&quot;9.1&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT=&quot;Rocky Linux&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=&quot;9.1&quot;</span><br></pre></td></tr></table></figure><blockquote><p>安装</p></blockquote><h4 id="1、-卸载Docker的旧版本"><a href="#1、-卸载Docker的旧版本" class="headerlink" title="1、 卸载Docker的旧版本"></a>1、 卸载Docker的旧版本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h4 id="2、-安装基本环境"><a href="#2、-安装基本环境" class="headerlink" title="2、 安装基本环境"></a>2、 安装基本环境</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><h4 id="3、设置镜像的仓库"><a href="#3、设置镜像的仓库" class="headerlink" title="3、设置镜像的仓库"></a>3、设置镜像的仓库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="4、更新yum源并安装docker-ce"><a href="#4、更新yum源并安装docker-ce" class="headerlink" title="4、更新yum源并安装docker-ce"></a>4、更新yum源并安装docker-ce</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum update --allowerasing --nobest</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y</span><br></pre></td></tr></table></figure><h4 id="5、启动docker"><a href="#5、启动docker" class="headerlink" title="5、启动docker"></a>5、启动docker</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]# systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="6、-查看docker-version-查看是否安装成功"><a href="#6、-查看docker-version-查看是否安装成功" class="headerlink" title="6、 查看docker version 查看是否安装成功"></a>6、 查看docker version 查看是否安装成功</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           24.0.7</span><br><span class="line"> API version:       1.43</span><br><span class="line"> Go version:        go1.20.10</span><br><span class="line"> Git co-            Thu Oct 26 09:09:13 2023</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          24.0.7</span><br><span class="line">  API version:      1.43 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.20.10</span><br><span class="line">  Git commit:       311b9ff</span><br><span class="line">  Built:            Thu Oct 26 09:07:45 2023</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.25</span><br><span class="line">  GitCommit:        d8f198a4ed8892c764191ef7b3b06d8a2eeb5c7f</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.10</span><br><span class="line">  GitCommit:        v1.1.10-0-g18a0cb0</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure><h4 id="7、-运行hello-world"><a href="#7、-运行hello-world" class="headerlink" title="7、 运行hello world"></a>7、 运行hello world</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]<span class="comment"># docker run hello-world</span></span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">719385e32844: Pull complete </span><br><span class="line">Digest: sha256:c79d06dfdfd3d3eb04cafd0dc2bacab0992ebc243e083cabe208bac4dd7759e0</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!   //看到这句话表明安装成功</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><h4 id="8、-查看hello-world镜像"><a href="#8、-查看hello-world镜像" class="headerlink" title="8、 查看hello-world镜像"></a>8、 查看hello-world镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    9c7a54a9a43c   7 months ago   13.3kB</span><br></pre></td></tr></table></figure><h4 id="了解：卸载docker"><a href="#了解：卸载docker" class="headerlink" title="了解：卸载docker"></a>了解：卸载docker</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1、卸载依赖</span><br><span class="line">yum remove install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y</span><br><span class="line"></span><br><span class="line"># 2、 删除资源</span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line"></span><br><span class="line"># /var/lib/docker docker的默认工作路径</span><br></pre></td></tr></table></figure><h3 id="配置阿里云加速"><a href="#配置阿里云加速" class="headerlink" title="配置阿里云加速"></a>配置阿里云加速</h3><p>1、 执行命令、查看是否在dockrr.service文件中配置过镜像地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl cat docker | grep &#x27;\-\-registry\-mirror&#x27;</span><br></pre></td></tr></table></figure><p>2、 在/etc/docker/daemon.json中写入如下内容 （如果文件不存在请新建该文件）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class="line">    &quot;https://mirror.baidubce.com&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一定要确保文件符合jssn规范，否则Docker将不能启动</p><p>3、重启docker服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="回顾HelloWorld流程"><a href="#回顾HelloWorld流程" class="headerlink" title="回顾HelloWorld流程"></a>回顾HelloWorld流程</h3><blockquote><p>run的运行流程图</p></blockquote><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231206100712580.png" alt="image-20231206100712580"></p><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><p>Docker是什么工作的？</p><p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问！</p><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231206101604313.png" alt="image-20231206101604313"></p><p>Docker为什么比VM快？</p><ul><li>Docker有着比虚拟机更少的抽象层</li><li>Docker利用的是宿主机的内核，VM需要是Guest OS。</li></ul><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231206101735199.png" alt="image-20231206101735199"></p><p>所以说，新建一个容器的时候，docker不需要像虚拟机一样重新加载一个操作系统内核，避免引导。虚拟机时加载Guest OS，分钟级别的，而Docker时利用宿主机的操作系统。</p><h2 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker version   # 显示docker的版本信息</span><br><span class="line">docker info      # 显示docker的系统信息 包括镜像和容器数量</span><br><span class="line">docker --help    # 显示docker的所有命令</span><br></pre></td></tr></table></figure><p>帮助文档地址：<a href="https://docker-practice.github.io/zh-cn/">https://docker-practice.github.io/zh-cn/</a></p><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><ul><li>docker images  查看镜像</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    9c7a54a9a43c   7 months ago   13.3kB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解释</span></span><br><span class="line">REPOSITORY  镜像的仓库源</span><br><span class="line">TAG      镜像的标签</span><br><span class="line">Image ID  镜像的<span class="built_in">id</span></span><br><span class="line">Create    镜像的创建时间</span><br><span class="line">SIZE    镜像的大小</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">Options:</span><br><span class="line">  -a, --all         <span class="comment"># 显示镜像的详细信息    </span></span><br><span class="line">  -q, --quiet      <span class="comment"># 只显示镜像id  </span></span><br></pre></td></tr></table></figure><ul><li>docker search 搜索镜像</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]<span class="comment"># docker search nginx</span></span><br><span class="line">NAME                               DESCRIPTION                                      STARS     OFFICIAL   AUTOMATED</span><br><span class="line">nginx                              Official build of Nginx.                         19320     [OK]       </span><br><span class="line">unit                               Official build of NGINX Unit: Universal Web …    19        [OK]       </span><br><span class="line">nginxinc/nginx-unprivileged        Unprivileged NGINX Dockerfiles                   136     </span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选项，通过搜藏来过来吧</span></span><br><span class="line">--filter=STARS=3000   <span class="comment">## 搜索出的镜像收藏大于3000的</span></span><br></pre></td></tr></table></figure><ul><li>docker pull 下载镜像</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">[root@k8s ~]# docker pull nginx</span><br><span class="line">Using default tag: latest   # 如果不写tag，默认就是latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">1f7ce2fa46ab: Pull complete # 分层下载 docker images的核心 联合文件系统 </span><br><span class="line">9b16c94bb686: Pull complete </span><br><span class="line">9a59d19f9c5b: Pull complete </span><br><span class="line">9ea27b074f71: Pull complete </span><br><span class="line">c6edf33e2524: Pull complete </span><br><span class="line">84b1ff10387b: Pull complete </span><br><span class="line">517357831967: Pull complete </span><br><span class="line">Digest: sha256:10d1f5b58f74683ad34eb29287e07dab1e90f10af243f151bb50aa5dbb4d62ee  # 签名</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">docker.io/library/nginx:latest   # 真实地址</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等价于它</span></span><br><span class="line">docker pull nginx</span><br><span class="line">docker pull docker.io/library/nginx:latest  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定版本下载</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>docker rm 删除镜像</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]# docker rmi -f nginx:latest </span><br><span class="line">Untagged: nginx:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有镜像</span></span><br><span class="line">[root@k8s ~]# docker rmi -f $(docker images -qa)</span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:c79d06dfdfd3d3eb04cafd0dc2bacab0992ebc243e083cabe208bac4dd7759e0</span><br><span class="line">Deleted: sha256:9c7a54a9a43cca047013b82af109fe963fde787f63f9e016fdc3384500c2823d</span><br><span class="line"></span><br><span class="line">[root@k8s ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p>说明： 我们有了镜像才可以创建容器、linux、下载一个centos来测试学习</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><strong>新建容器并启动</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line">--name=&quot;Name&quot;   容器名字 tomcat1 tomxat2 tomcat3 用来区分容器</span><br><span class="line">-d         后台方式运行</span><br><span class="line">-it        使用交互方式运行，进入容器 查看内容</span><br><span class="line">-p         指定容器端口   -p 8080:80</span><br><span class="line">-P        随机指定端口</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动并进入容器</span></span><br><span class="line">[root@k8s ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@83711eb4d20a /]# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器内的centos</span></span><br><span class="line">[root@83711eb4d20a /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退回主机</span></span><br><span class="line">[root@83711eb4d20a /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@k8s ~]# </span><br></pre></td></tr></table></figure><p><strong>列出运行中的容器</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker ps 命令</span></span><br><span class="line">-a    # 列出当前正在运行的容器+带出历史运行过的容器</span><br><span class="line">-n=?  #显示最近创建的容器</span><br><span class="line">-q    # 只显示容器的编号</span><br><span class="line">[root@k8s ~]# docker ps -a -n=1</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                     PORTS     NAMES</span><br><span class="line">83711eb4d20a   centos    &quot;/bin/bash&quot;   4 minutes ago   Exited (0) 2 minutes ago             awesome_lederberg</span><br><span class="line"></span><br><span class="line">[root@k8s ~]# docker ps -aq</span><br><span class="line">83711eb4d20a</span><br><span class="line">e36750cdcde1</span><br></pre></td></tr></table></figure><ul><li>退出容器</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit  # 停止容器并退出</span><br><span class="line">ctrl Q P  # 退出并不停止</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行容器并执行退出并不停止指令</span></span><br><span class="line">[root@k8s ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@69296df22e03 /]# [root@k8s ~]# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前运行的容器</span></span><br><span class="line">[root@k8s ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES</span><br><span class="line">69296df22e03   centos    &quot;/bin/bash&quot;   12 seconds ago   Up 11 seconds             cool_bouman</span><br></pre></td></tr></table></figure><ul><li>删除容器</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id   # 删除指定容器，不能删除正在运行的容器 如果要强制删除 rm -f</span><br><span class="line">docker rm -f $(docker ps -aq)    # 删除所有容器</span><br></pre></td></tr></table></figure><ul><li>启动和停止容器的操作</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id    # 启动容器</span><br><span class="line">docker restart 容器id  # 重启容器</span><br><span class="line">docker stop 容器id     # 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id     # 强制停止当前容器</span><br></pre></td></tr></table></figure><h3 id="常用其它命令"><a href="#常用其它命令" class="headerlink" title="常用其它命令"></a>常用其它命令</h3><p><strong>后台启动容器</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]# docker run -d centos    //后台启动容器</span><br><span class="line">c75899a445cd92b117337f1bb80c4606dcef87f0dbdda1c76149301b5dcb4725</span><br><span class="line"></span><br><span class="line">[root@k8s ~]# docker ps -a   //查看容器</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                     PORTS     NAMES</span><br><span class="line">c75899a445cd   centos    &quot;/bin/bash&quot;   2 minutes ago   Exited (0) 2 minutes ago             elegant_edison           cool_bouman</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">问题 docker ps，发现centos 停止了</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常见的坑 docker容器使用后台运行  就必须有一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx，容器启动后，发现自己没有提供服务 就会立刻停止</span></span><br></pre></td></tr></table></figure><p><strong>利用死循环让容器有事可做</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建容器 并在其中编写一个shell脚本</span></span><br><span class="line">[root@k8s ~]# docker run -d centos /bin/sh -c &quot;while true;do echo kuangshen;sleep 1;done&quot;</span><br><span class="line">bf139241a91b97b33d8fbefdec9b7c337500dafc5d270e40407b516f7b66ab0c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器状态</span></span><br><span class="line">[root@k8s ~]# docker ps </span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED          STATUS          PORTS     NAMES</span><br><span class="line">bf139241a91b   centos    &quot;/bin/sh -c &#x27;while t…&quot;   17 seconds ago   Up 16 seconds             modest_kilby</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器日志</span></span><br><span class="line">[root@k8s ~]# docker logs -t -f --tail 10 bf139241a91b</span><br><span class="line">2023-12-06T03:40:39.057567655Z kuangshen</span><br><span class="line">2023-12-06T03:40:40.059862129Z kuangshen</span><br><span class="line">2023-12-06T03:40:41.062034487Z kuangshen</span><br><span class="line">2023-12-06T03:40:42.064470085Z kuangshen</span><br><span class="line">2023-12-06T03:40:43.066782894Z kuangshen</span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f -t --tail 容器，没有日志</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自己编写一段shell脚本</span></span><br><span class="line">&quot;whlie ture;do echo toto;sleep 2;done&quot;                  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示日志</span></span><br><span class="line">-tf  # 显示日志</span><br><span class="line">--tail  number  # 要显示的日志条数</span><br><span class="line">[root@k8s ~]# docker logs -f -t --tail 10 7a173bcad9ba  查看容器日志</span><br><span class="line">2023-12-06T03:31:50.560503837Z /bin/sh: whlie ture;do echo toto;sleep 2;done: No such file or directory</span><br></pre></td></tr></table></figure><p><strong>查看容器中的进程信息 ps</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]# docker top bf139241a91b</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                10569               10532               0                   22:38               ?                   00:00:00            /bin/sh -c while true;do echo kuangshen;sleep 1;done</span><br><span class="line">root                11713               10569               0                   22:48               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br></pre></td></tr></table></figure><p><strong>查看镜像源数据</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]# docker inspect bf139241a91b</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;bf139241a91b97b33d8fbefdec9b7c337500dafc5d270e40407b516f7b66ab0c&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2023-12-06T03:38:56.618698931Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo kuangshen;sleep 1;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 10569,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2023-12-06T03:38:56.841697401Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/bf139241a91b97b33d8fbefdec9b7c337500dafc5d270e40407b516f7b66ab0c/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/bf139241a91b97b33d8fbefdec9b7c337500dafc5d270e40407b516f7b66ab0c/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/bf139241a91b97b33d8fbefdec9b7c337500dafc5d270e40407b516f7b66ab0c/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/bf139241a91b97b33d8fbefdec9b7c337500dafc5d270e40407b516f7b66ab0c/bf139241a91b97b33d8fbefdec9b7c337500dafc5d270e40407b516f7b66ab0c-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/modest_kilby&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                46,</span><br><span class="line">                153</span><br><span class="line">            ],</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;CgroupnsMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: [],</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: null,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;,</span><br><span class="line">                &quot;/sys/devices/virtual/powercap&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/1f2d513a668a223e0ca04353b567a1fd88c1ff384472805d82e7aca0ab1aa7e0-init/diff:/var/lib/docker/overlay2/3d9e04ce7377c934935b44d560ac38c7fabad822afe5277a0aebcc4dc18a7f1f/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/1f2d513a668a223e0ca04353b567a1fd88c1ff384472805d82e7aca0ab1aa7e0/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/1f2d513a668a223e0ca04353b567a1fd88c1ff384472805d82e7aca0ab1aa7e0/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/1f2d513a668a223e0ca04353b567a1fd88c1ff384472805d82e7aca0ab1aa7e0/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;bf139241a91b&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;while true;do echo kuangshen;sleep 1;done&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20210915&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;aed70a42c2b8aeace833daa6eb8eb1957d96b3f6d9e8ae08be93ca8ce982429c&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/aed70a42c2b8&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;01577e66ee97687e028f2e0760a5c62369a33ad1cfce03cac440f8464df67387&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.4&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:04&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;26c6fbe3fe76e6e36a1833f32b0d5216a17c1fd70f9a6efd037114bba1cd56c8&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;01577e66ee97687e028f2e0760a5c62369a33ad1cfce03cac440f8464df67387&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.4&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:04&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker exec -it 容器id bashshell</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用<span class="built_in">exec</span>进入容器</span></span><br><span class="line">[root@k8s ~]# docker exec -it bf139241a91b bash</span><br><span class="line">[root@bf139241a91b /]# ps -ef</span><br><span class="line">UID          PID    PPID  C STIME TTY          TIME CMD</span><br><span class="line">root           1       0  0 03:38 ?        00:00:00 /bin/sh -c while true;do echo kuangshen;sleep 1;done</span><br><span class="line">root        1275       0  0 04:00 pts/0    00:00:00 bash</span><br><span class="line">root        1309       1  0 04:00 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line">root        1310    1275  0 04:00 pts/0    00:00:00 ps -ef</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式二</span></span><br><span class="line"></span><br><span class="line">docker attach 容器id</span><br><span class="line"></span><br><span class="line">[root@k8s ~]# docker attach   bf139241a91b</span><br><span class="line">kuangshen</span><br><span class="line">kuangshen</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker <span class="built_in">exec</span>   <span class="comment"># 进入容器后开启一个新的终端</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker attch  <span class="comment"># 进入容器正在执行的终端，不会启动新的进程</span></span></span><br></pre></td></tr></table></figure><p><strong>从容器内拷贝文件到容器外</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp 容器id：容器内路径   目的的主机路径</span><br><span class="line"></span><br><span class="line">[root@k8s home]# docker cp b25a87d930f8:/home/test.java /home</span><br><span class="line">Successfully copied 1.54kB to /home</span><br><span class="line">[root@k8s home]# ls</span><br><span class="line">ayaka  kuangshen.java  test.java  toto</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exec会进入容器并开启一个新bash终端,exit时不会导致容器stop，attach退出时会导致容器stop</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">attach    Attach to a running container  <span class="comment">#当前shell下attach连接指定运行镜像</span></span><br><span class="line">build     Build an image from a Dockerfile  <span class="comment">#通过Dockerfile定制镜像</span></span><br><span class="line">commit    Create a new image from a container<span class="string">&#x27;s changes  #提交当前容器为新的镜像</span></span><br><span class="line"><span class="string">cp    Copy files/folders from a container to a HOSTDIR or to STDOUT  #从容器中拷贝指定文件或者目录到宿主机中</span></span><br><span class="line"><span class="string">create    Create a new container  #创建一个新的容器，同run 但不启动容器</span></span><br><span class="line"><span class="string">diff    Inspect changes on a container&#x27;</span>s filesystem  <span class="comment">#查看docker容器变化</span></span><br><span class="line">events    Get real time events from the server<span class="comment">#从docker服务获取容器实时事件</span></span><br><span class="line"><span class="built_in">exec</span>    Run a <span class="built_in">command</span> <span class="keyword">in</span> a running container<span class="comment">#在已存在的容器上运行命令</span></span><br><span class="line"><span class="built_in">export</span>    Export a container<span class="string">&#x27;s filesystem as a tar archive  #导出容器的内容流作为一个tar归档文件(对应import)</span></span><br><span class="line"><span class="string">history    Show the history of an image  #展示一个镜像形成历史</span></span><br><span class="line"><span class="string">rename    Rename a container  #重命名容器</span></span><br><span class="line"><span class="string">restart    Restart a running container  #重启运行的容器</span></span><br><span class="line"><span class="string">rm    Remove one or more containers  #移除一个或者多个容器</span></span><br><span class="line"><span class="string">rmi    Remove one or more images  #移除一个或多个镜像(无容器使用该镜像才可以删除，否则需要删除相关容器才可以继续或者-f强制删除)</span></span><br><span class="line"><span class="string">run    Run a command in a new container  #创建一个新的容器并运行一个命令</span></span><br><span class="line"><span class="string">save    Save an image(s) to a tar archive#保存一个镜像为一个tar包(对应load)</span></span><br><span class="line"><span class="string">search    Search the Docker Hub for images  #在dockerhub中搜索镜像</span></span><br><span class="line"><span class="string">start    Start one or more stopped containers#启动容器</span></span><br><span class="line"><span class="string">stats    Display a live stream of container(s) resource usage statistics  #统计容器使用资源</span></span><br><span class="line"><span class="string">stop    Stop a running container  #停止容器</span></span><br><span class="line"><span class="string">tag         Tag an image into a repository  #给源中镜像打标签</span></span><br><span class="line"><span class="string">top       Display the running processes of a container #查看容器中运行的进程信息</span></span><br><span class="line"><span class="string">unpause    Unpause all processes within a container  #取消暂停容器</span></span><br><span class="line"><span class="string">version    Show the Docker version information#查看容器版本号</span></span><br><span class="line"><span class="string">wait         Block until a container stops, then print its exit code  #截取容器停止时的退出状态值</span></span><br><span class="line"><span class="string">images    List images  #列出系统当前镜像</span></span><br><span class="line"><span class="string">import    Import the contents from a tarball to create a filesystem image  #从tar包中的内容创建一个新的文件系统映像(对应export)</span></span><br><span class="line"><span class="string">info    Display system-wide information  #显示系统相关信息</span></span><br><span class="line"><span class="string">inspect    Return low-level information on a container or image  #查看容器详细信息</span></span><br><span class="line"><span class="string">kill    Kill a running container  #kill指定docker容器</span></span><br><span class="line"><span class="string">load    Load an image from a tar archive or STDIN  #从一个tar包中加载一个镜像(对应save)</span></span><br><span class="line"><span class="string">login    Register or log in to a Docker registry#注册或者登陆一个docker源服务器</span></span><br><span class="line"><span class="string">logout    Log out from a Docker registry  #从当前Docker registry退出</span></span><br><span class="line"><span class="string">logs    Fetch the logs of a container  #输出当前容器日志信息</span></span><br><span class="line"><span class="string">pause    Pause all processes within a container#暂停容器</span></span><br><span class="line"><span class="string">port    List port mappings or a specific mapping for the CONTAINER  #查看映射端口对应的容器内部源端口</span></span><br><span class="line"><span class="string">ps    List containers  #列出容器列表</span></span><br><span class="line"><span class="string">pull    Pull an image or a repository from a registry  #从docker镜像源服务器拉取指定镜像或者库镜像</span></span><br><span class="line"><span class="string">push    Push an image or a repository to a registry  #推送指定镜像或者库镜像至docker源服务器</span></span><br></pre></td></tr></table></figure><h2 id="Docker安装Nginx"><a href="#Docker安装Nginx" class="headerlink" title="Docker安装Nginx"></a>Docker安装Nginx</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索镜像 下载镜像</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载镜像 pull</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行模式</span></span><br><span class="line"></span><br><span class="line">1、下载nginx镜像 </span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line">2、查看镜像</span><br><span class="line">[root@k8s ~]# docker images </span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx         latest    a6bd71f48f68   2 weeks ago    187MB</span><br><span class="line">hello-world   latest    9c7a54a9a43c   7 months ago   13.3kB</span><br><span class="line">centos        latest    5d0da3dc9764   2 years ago    231MB</span><br><span class="line"></span><br><span class="line">3、创建容器</span><br><span class="line">docker run -d --name web1 -p 8001:80 nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-d  后台运行容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--name  给容器命名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p   宿主机端口：容器内部端口</span></span><br><span class="line">4、查看容器列表</span><br><span class="line">[root@k8s ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED         STATUS         PORTS                                   NAMES</span><br><span class="line">354382b1bdb4   nginx     &quot;/docker-entrypoint.…&quot;   2 minutes ago   Up 2 minutes   0.0.0.0:8001-&gt;80/tcp, :::8001-&gt;80/tcp   web1</span><br><span class="line">5、访问本机的8001端口</span><br><span class="line">[root@k8s ~]# curl 192.168.123.101:8001</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color-scheme: light dark; &#125;</span><br><span class="line">body &#123; width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>思考问题：我们每次改动nginx配置文件，都需要进入容器内部？十分的麻烦，我要是可以再容器外部提供一个映射的路径，在容器修改文件，容器内部就可以自动修改？</p><p>-v 数据卷</p><h2 id="docker安装tomcat"><a href="#docker安装tomcat" class="headerlink" title="docker安装tomcat"></a>docker安装tomcat</h2><h3 id="一、下载tomcat"><a href="#一、下载tomcat" class="headerlink" title="一、下载tomcat"></a>一、下载tomcat</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure><h3 id="二、检查镜像"><a href="#二、检查镜像" class="headerlink" title="二、检查镜像"></a>二、检查镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">tomcat        latest    e76527586e57   3 days ago     454MB</span><br></pre></td></tr></table></figure><h3 id="三、启动运行tomcat"><a href="#三、启动运行tomcat" class="headerlink" title="三、启动运行tomcat"></a>三、启动运行tomcat</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]# docker run -d -p 8002:8080 --name tomcat01 tomcat</span><br><span class="line">ce4f651b97a28c829ca4a055fdc44fb389d21ffa8520bb2060c05031771a0403</span><br></pre></td></tr></table></figure><h3 id="四、测试访问tomcat"><a href="#四、测试访问tomcat" class="headerlink" title="四、测试访问tomcat"></a>四、测试访问tomcat</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]# curl localhost:8002</span><br><span class="line">&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 – Not Found&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt;body &#123;font-family:Tahoma,Arial,sans-serif;&#125; h1, h2, h3, b &#123;color:white;background-color:#525D76;&#125; h1 &#123;font-size:22px;&#125; h2 &#123;font-size:16px;&#125; h3 &#123;font-size:14px;&#125; p &#123;font-size:12px;&#125; a &#123;color:black;&#125; .line &#123;height:1px;background-color:#525D76;border:none;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 404 – Not Found&lt;/h1&gt;&lt;hr class=&quot;line&quot; /&gt;&lt;p&gt;&lt;b&gt;Type&lt;/b&gt; Status Report&lt;/p&gt;&lt;p&gt;&lt;b&gt;Description&lt;/b&gt; The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;/p&gt;&lt;hr class=&quot;line&quot; /&gt;&lt;h3&gt;Apache Tomcat/10.1.16&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;[</span><br></pre></td></tr></table></figure><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231206145030002.png" alt="image-20231206145030002"></p><p><strong>发生404报错  说明缺少配置</strong></p><h3 id="五、进入tomcat容器"><a href="#五、进入tomcat容器" class="headerlink" title="五、进入tomcat容器"></a>五、进入tomcat容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]# docker exec -it tomcat01 bash</span><br><span class="line"></span><br><span class="line">root@ce4f651b97a2:/usr/local/tomcat# cd webapps</span><br><span class="line">root@ce4f651b97a2:/usr/local/tomcat/webapps# ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现问题 Linux命令少了 没有webapps。</span></span><br><span class="line">原因：</span><br><span class="line">tomcat默认是最小的镜像 把所有没必要的配置文件都删除</span><br><span class="line">保证最小可运行的环境</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入webapps.dist</span></span><br><span class="line">root@ce4f651b97a2:/usr/local/tomcat/webapps/webapps.dist# ls</span><br><span class="line">docs  examples  host-manager  manager  ROOT</span><br><span class="line"></span><br><span class="line">发现：</span><br><span class="line">webapps.dist目录下存在的所有目录都是webapps的 我们将该目录的所有配置文件复制到webapps里卖弄</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制文件</span></span><br><span class="line">root@ce4f651b97a2:/usr/local/tomcat# cp -a webapps.dist/* webapps/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存并退出容器 再次进行访问</span></span><br></pre></td></tr></table></figure><p><strong>保存并退出容器 再次进行访问</strong></p><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231206145754654.png" alt="image-20231206145754654"></p><p><strong>网页就已经有内容了</strong></p><p>思考问题：当每次部署服务时，每次都要进入容器是否十分麻烦？我要是可以在容器外部提供一个映射路径，webapps。我们在外部放置项目，就自动同步到内部就好了！</p><h2 id="部署es-kibana"><a href="#部署es-kibana" class="headerlink" title="部署es+kibana"></a>部署es+kibana</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># es 暴露的端口很多</span><br><span class="line"># es 十分的耗内存</span><br><span class="line"># es 的数据一般需要放置到安全目录！挂载</span><br></pre></td></tr></table></figure><h3 id="启动elasticsearch"><a href="#启动elasticsearch" class="headerlink" title="启动elasticsearch"></a>启动elasticsearch</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name elasticsearch2 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; --memory=&quot;4g&quot; -e &quot;ES_JAVA_OPTS=-Xms1024m -Xmx2048m&quot; --ulimit nofile=1024   elasticsearch</span><br></pre></td></tr></table></figure><h3 id="docker-stats查看cpu状态"><a href="#docker-stats查看cpu状态" class="headerlink" title="docker stats查看cpu状态"></a>docker stats查看cpu状态</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stats</span><br><span class="line"></span><br><span class="line">CONTAINER ID   NAME             CPU %     MEM USAGE / LIMIT   MEM %     NET I/O         BLOCK I/O         PIDS</span><br><span class="line">f8fac70c779b   elasticsearch2   0.17%     1.226GiB / 4GiB     30.64%    3.18kB / 771B   63.2MB / 2.14MB   66</span><br></pre></td></tr></table></figure><p><strong>访问测试9200端口</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]# curl localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;yJ3yRFr&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;kdlRE7FlQHGQji1MK8CNcQ&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;5.6.12&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;cfe3d9f&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2018-09-10T20:12:43.732Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;6.6.1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line">[root@k8s ~]# </span><br></pre></td></tr></table></figure><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><ul><li>portainer</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8088:9000 \ --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br></pre></td></tr></table></figure><ul><li>Rancher （CI/CD再用）</li></ul><p><strong>什么是portainer</strong></p><p>一、 docker的图形化界面管理工具，提供一个后台面板供我们操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8088:9000 \ --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br></pre></td></tr></table></figure><p>二、访问本地主机的8088端口</p><ul><li>进入后的面板</li></ul><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20231206163019399.png" alt="image-20231206163019399"></p><p>可视化面板我们平时不会使用，大家测试玩玩即可</p><h2 id="Docker镜像讲解"><a href="#Docker镜像讲解" class="headerlink" title="Docker镜像讲解"></a>Docker镜像讲解</h2><h3 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h3><p>镜像是一种轻量级、可执行的独立软件包、用来打包软件运行环境和基于运行环境开发的软件、包含运行某个软件所需的所有内容、包括代码、运行库、环境变量和配置文件</p><p>所用应用打包到docker镜像</p><p>如何得到镜像：</p><ul><li>远程仓库下载</li><li>朋友拷给你</li><li>自己制作一个镜像dockerfile</li></ul><h3 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><blockquote><p> UnionFS （联合文件系统）</p></blockquote><p>UnionFS（联合文件系统）：Union文件系统是一种分层、轻量级并且高性能的文件系统、它支持对文件系统的修改作为一次提交来一层层的叠加、同时可以将不同目录挂载同一个虚拟文件系统下。Union文件系统时Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：一次他哦那个是加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终文件系统会包含所有底层的文件和目录。</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>docker镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS</p><p>bootfs主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统。</p><p>在Docker镜像的最底层时bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了。此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs（root file system），在bootfs之上。包含的就是典型Linux系统中的/dev,/proc,/bin,/etc等标准目录和文件。rootfs就是各种不同操作系统的发行版，比如Ubuntu，Centos等。</p><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231206194149946.png" alt="image-20231206194149946"></p><p>   平时我们安装进虚拟机的Centos都是好几个G，为什么Docker这里才200M？</p><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231206195003842.png" alt="image-20231206195003842"></p><p>对于一个精简的OS，rootfs可以很小，只需要包含最基本的命令，工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供rootfs就可以了。由此可见对于不同的linux发行版，bootfs最基本时一直的，rootfs会有差别，因此不同的发行版可以公用bootfs。</p><h3 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h3><blockquote><p>分层的镜像</p></blockquote><p>我们可以去下载一个镜像，注意观察下载的日志输出，可以看到时一层一层的在下载！</p><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231206200629998.png" alt="image-20231206200629998"></p><p>理解：</p><p>所有的Docker镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像层上面，创建新的镜像层。</p><p>举一个简单的例子，假如基于Ubuntu Linux创建一个新的镜像，这就是新镜像的第一层，如果在该镜像中添加Python包，就会在基础镜像层之上创建第二个镜像层，如果继续添加一个安全补丁，就会创建第三个镜像层。</p><p>该镜像当前已经包含3个镜像层，如下图所示：</p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20231207082519068.png" alt="image-20231207082519068"></p><p>在添加额外的镜像层的同时，镜像始终保持时当前所有镜像的组合，下图中，每个镜像层包含3个文件，而镜像包含了来自两个镜像层的6个文件。</p><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231207082641558.png" alt="image-20231207082641558"></p><p>上图中的镜像跟之前略有区别，便于展示文件。</p><p>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7时文件5的一个更新的版本。<img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20231207082752378.png" alt="image-20231207082752378"></p><p>这种情况下，上层镜像层中的文件覆盖了顶层镜像层中的文件，这样使得文件的更新版本作为一个新镜像层添加到镜像当中。</p><p>Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层的堆栈，并保证多镜像层对外展示统一的文件系统。</p><p>Linux上可用的村塾引擎由AUFS，Overlay2.故名思意，每种存储引擎都基于Linux中对应的文件一同或者块这杯技术。</p><p>Docker在Windows上仅支持windowsfilter一种存储引擎，该殷勤基于NTFS文件系统之上实现了分层</p><blockquote><p>特点</p></blockquote><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部。</p><p>这一层就是我们常说的容器层，容器之下的都叫镜像层。</p><p>特点</p><p>Docker镜像都是只读的，当容器启动时 （run），一个新的可写层被加载到镜像的顶部！</p><p>这一层就是我们所说的容器层，容器之下的都叫镜像层（pull）</p><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231206201714143.png" alt="image-20231206201714143"></p><p>如何提交一个自己的镜像</p><h3 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit 提交容器成为一个新的副本</span><br><span class="line"></span><br><span class="line"># 命令和git原理类似</span><br><span class="line">docker  commit -m=“提交的描述信息” -a=“作者” 容器id  目标镜像名，[Tag]</span><br></pre></td></tr></table></figure><p>实战测试</p><p>一、启动一个默认的tomcat</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现这个默认的tomcat 是没有webapps应用的 镜像的原因 官方的镜像默认webapps下面是没有文件的！</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我自己拷贝进去了的基本的文件</span></span><br><span class="line">root@814727eb2952:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br><span class="line">root@814727eb2952:/usr/local/tomcat# ls webapps</span><br><span class="line">docs  examples  host-manager  manager  ROOT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器列表</span></span><br><span class="line">[root@k8s ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND             CREATED         STATUS          PORTS                                                           NAMES</span><br><span class="line">814727eb2952   tomcat                &quot;catalina.sh run&quot;   4 minutes ago   Up 4 minutes    0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp                       lucid_meninsky</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">commit修改好的tomcat容器为tomcat02:1.0镜像</span></span><br><span class="line">[root@k8s ~]# docker commit -a=&quot;ayaka&quot; -m=&quot;add webapps app&quot; 814727eb2952 tomcat02:1.0</span><br><span class="line">sha256:60e11d6e91c0a5a5bd66de73240e84f644b453be6e97b378f0aba5f63d0aaa9e</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像库</span></span><br><span class="line">[root@k8s ~]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">tomcat02              1.0       60e11d6e91c0   4 seconds ago   458MB</span><br><span class="line">tomcat                latest    e76527586e57   4 days ago      454MB</span><br><span class="line">httpd                 latest    a6ca7b52a415   2 weeks ago     168MB</span><br><span class="line">nginx                 latest    a6bd71f48f68   2 weeks ago     187MB</span><br></pre></td></tr></table></figure><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231206202718157.png" alt="image-20231206202718157"></p><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><h3 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h3><p>docker的理念回顾</p><p>将应用和环境打包成一个镜像</p><p>如果数据都在容器中，那么我们容器一删除，数据就会丢失。==需求：数据可以持久化==</p><h3 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h3><ul><li>方式一：使用命令进行挂载</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -v 主机目录，容器目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用docker inspcet查看容器的具体信息</span></span><br><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231207084700871.png" alt="image-20231207084700871"></p><blockquote><p>宿主机内创建的文件 容器内部也能看到</p></blockquote><p>效果：</p><p><strong>容器内部：</strong></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20231207084937247.png" alt="image-20231207084937247"></p><p><strong>宿主机：</strong></p><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231207085027544.png" alt="image-20231207085027544"></p><h2 id="部署MySQL"><a href="#部署MySQL" class="headerlink" title="部署MySQL"></a>部署MySQL</h2><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s home]# docker pull mysql:5.7</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s home]# docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7 </span><br><span class="line"></span><br><span class="line">-d   后台运行</span><br><span class="line">-v   卷挂载</span><br><span class="line">-p   端口映射</span><br><span class="line">-e   环境配置</span><br><span class="line">--name  容器名字</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动成功之后，在本地使用sqlyog来测试一下</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sqlyog-连接到服务器的3310---3310和容器内的3306端口的映射，整个时候我们就可以脸上了</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在本地测试创建一个数据库 查看一下映射的路径</span></span><br><span class="line">[root@k8s home]# ls /home/mysql/data/</span><br><span class="line">auto.cnf    client-cert.pem  ibdata1      ibtmp1      performance_schema  server-cert.pem  toto</span><br><span class="line">ca-key.pem  client-key.pem   ib_logfile0  mysql       private_key.pem     server-key.pem</span><br><span class="line">ca.pem      ib_buffer_pool   ib_logfile1  mysql.sock  public_key.pem      sys</span><br></pre></td></tr></table></figure><h3 id="具名挂载和匿名挂载"><a href="#具名挂载和匿名挂载" class="headerlink" title="具名挂载和匿名挂载"></a>具名挂载和匿名挂载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匿名挂载</span></span><br><span class="line">-v 容器内的路径</span><br><span class="line">docker run -d -P --name nginx1 -v /etc/nginx nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有volume的情况</span></span><br><span class="line">[root@k8s home]# docker volume ls  </span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     0f7af9b1708ed85f3c19f990ccf2ac4fb11e609ca79ae6cd03fd8b2940725a2d</span><br><span class="line">local     1e3f80d7bef22963854d2fcb6b47cd1810a40b60beefb468a2183264ee20f5a0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上面这种就是匿名挂载</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用具名挂载</span></span><br><span class="line">[root@k8s home]# docker run -d -P --name NginxB -v juming-nginx:/etc/nginx nginx</span><br><span class="line">da62fa064716e96fe552c91bc8a3eb5e30f686b43c02b3edbf76b5f640758c3f</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次查看卷列表</span></span><br><span class="line">[root@k8s home]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     f531c23ff1b3320bc3467a899119ef3c868d4830a1ac345b27f9f0ddda7f3ffe</span><br><span class="line">local     juming-nginx</span><br></pre></td></tr></table></figure><h3 id="对应的路径"><a href="#对应的路径" class="headerlink" title="对应的路径"></a>对应的路径</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s home]# docker volume inspect juming-nginx</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2023-12-06T20:30:22-05:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;juming-nginx&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>所有的docker容器内的卷，没有指定目录的情况下，都在<code>/var/lib/docker/volumes/xxxx/_data</code></strong></p><p>通过具名股灾可用方便的找到我们的一个卷  大多数情况在使用的是<code>具名挂载</code></p><h3 id="区分具名、匿名挂载"><a href="#区分具名、匿名挂载" class="headerlink" title="区分具名、匿名挂载"></a>区分具名、匿名挂载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-v 容器内路径   # 匿名挂载</span><br><span class="line">-v 卷名：容器内的路径   # 具名挂载</span><br><span class="line">-v /宿主机路径：容器内的路径  # 指定路径挂载</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20231207093818468.png" alt="image-20231207093818468"></p><h3 id="初识dockerfile"><a href="#初识dockerfile" class="headerlink" title="初识dockerfile"></a>初识dockerfile</h3><p>Dockerfile就是用来构建docker镜像的构建文件！</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  创建一个dockerfile文件，名字可用随机，建议使用Dockerfile</span><br><span class="line"># 文件中的内容</span><br><span class="line">[root@k8s docker-test]# cat dockerfile1 </span><br><span class="line">FROM  centos</span><br><span class="line"></span><br><span class="line">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line"></span><br><span class="line">CMD echo &quot;----end----&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"># 这里的每个命令就是镜像的一层</span><br></pre></td></tr></table></figure><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231207094909141.png" alt="image-20231207094909141"></p><h4 id="使用构建的镜像创建容器"><a href="#使用构建的镜像创建容器" class="headerlink" title="使用构建的镜像创建容器"></a>使用构建的镜像创建容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s docker-test]# docker run -it bcb7b9d02259  bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bcb7b9d02259为我们镜像的<span class="built_in">id</span></span></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">mycentos              1.0       bcb7b9d02259   2 years ago     231MB</span><br></pre></td></tr></table></figure><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231207095153112.png" alt="image-20231207095153112"></p><h4 id="测试目录同步"><a href="#测试目录同步" class="headerlink" title="测试目录同步"></a>测试目录同步</h4><p><strong>进入到volume2中 创建文件并保存</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s docker-test]# docker exec -it 65b097a207f6 bash</span><br><span class="line">[root@65b097a207f6 /]# cd volume02</span><br><span class="line">[root@65b097a207f6 volume02]# mkdir toto</span><br><span class="line">[root@65b097a207f6 volume02]# touch index.txt</span><br><span class="line">[root@65b097a207f6 volume02]# read escape sequence</span><br><span class="line"># 按住ctrl+p+q退出并继续运行容器</span><br></pre></td></tr></table></figure><p><strong>查看容器信息 （查看宿主机默认的挂载目录）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s _data]# docker inspect 65b097a207f6</span><br><span class="line"></span><br><span class="line">        &quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;2ad3dd80f2261dee63ddd333ccfe0057a890ded085d58e2c050fd141d40dafe2&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/2ad3dd80f2261dee63ddd333ccfe0057a890ded085d58e2c050fd141d40dafe2/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;volume02&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line"># </span><br><span class="line">查询到默认挂载的目录：/var/lib/docker/volumes/2ad3dd80f2261dee63ddd333ccfe0057a890ded085d58e2c050fd141d40dafe2/_data</span><br></pre></td></tr></table></figure><p><strong>进入默认挂载目录并查看目录内容</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s docker-test]# cd /var/lib/docker/volumes/2ad3dd80f2261dee63ddd333ccfe0057a890ded085d58e2c050fd141d40dafe2/_data</span><br><span class="line"></span><br><span class="line">[root@k8s _data]# ls</span><br><span class="line">index.txt  toto</span><br><span class="line"># 同步成功</span><br></pre></td></tr></table></figure><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>多个mysql同步数据  <strong>容器间的数据共享</strong></p><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231207100626194.png" alt="image-20231207100626194"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动三个容器 通过我们自己写的镜像启动</span><br></pre></td></tr></table></figure><ul><li>docker01</li></ul><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20231207101041024.png" alt="image-20231207101041024"></p><ul><li>docker02</li></ul><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231207101342245.png" alt="image-20231207101342245"></p><ul><li>docker03 同步</li></ul><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231207102147050.png" alt="image-20231207102147050"></p><ul><li>docker01 同步</li></ul><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231207102227008.png" alt="image-20231207102227008"></p><ul><li>docker02 同步</li></ul><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231207102257809.png" alt="image-20231207102257809"></p><p><strong>同步成功</strong>   这样我们就实现了容器间的数据共享</p><p>当我们在docker1上创建了文件时 宿主机、docker02、3都能接收到这个文件  说明了<code>我们实现了容器间的数据共享</code>~</p><p><strong>docker02、03时绑定的docker01</strong> 但是docker01容器被kill掉时 <strong>docker02、03的数据依旧不会消失 ~</strong></p><p>因为<code>他们三个都绑定到了宿主机上</code> <code>只要宿主机上的文件还存在</code> 那么volumes01、02目录的内容就不会消失~</p><p><strong>实现多个mysql数据共享</strong></p><p>一、创建两个mysql容器 mysqlB绑定到mysqlA上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]# docker run -d -p 3311:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysqlA mysql:5.7</span><br><span class="line"></span><br><span class="line">[root@k8s ~]# docker run -d -p 3312:3306 --volumes-from mysqlA -e MYSQL_ROOT_PASSWORD=123456 --name mysqlB mysql:5.7c2c2bf254ad7c1e5b6ea56886cbe959fbe5ae07d5262d651d3509129cedad31a</span><br></pre></td></tr></table></figure><p>二、在MysqlA上创建数据库mariadb 并查看宿主机上的挂载目录</p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20231207104032725.png" alt="image-20231207104032725"></p><p>三、在MysqlB上创建数据库postgresql并在宿主机上查看目录</p><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231207104302194.png" alt="image-20231207104302194"></p><p>这样就实现了多个mysql的数据共享</p><hr><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>dockerfile是用来构建docker镜像的文件！命令参数脚本！</p><p>构建步骤：</p><p>1、编写一个dockerfile文件</p><p>2、docker build构建成一个镜像</p><p>3、docker run 运行镜像</p><p>4、 docker push 发布镜像</p><h3 id="Docker构建过程"><a href="#Docker构建过程" class="headerlink" title="Docker构建过程"></a>Docker构建过程</h3><p>基础知识：</p><p>1、每个保留关键词（指令）都是必须大写字母</p><p>2、执行从上到下的顺序</p><p>3、 # 表示注释</p><p>4、 每一个指令都会创建提交一个新的镜像层并提交！</p><p>dockerfile是面向开发的，我们以后发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单</p><p>Docker镜像逐渐成为了企业交付的标准，必须要掌握。</p><p>Dockerfile：构建文件，定义了一切的步骤</p><p>DockerImages：通过dockerfile构建生成的一个镜像</p><p>Dockercontainer：容器就是镜像运行起来提供服务器</p><h3 id="Dockerfile的指令"><a href="#Dockerfile的指令" class="headerlink" title="Dockerfile的指令"></a>Dockerfile的指令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM          # 基础镜像，一切从这里开始构建</span><br><span class="line">MAINTAINER    # 维护者信息</span><br><span class="line">RUN      # 镜像构建运行的命令</span><br><span class="line">ADD      # 增加文件</span><br><span class="line">workdir       # 镜像的工作目录 </span><br><span class="line">VOLUME        # 镜像挂载目录</span><br><span class="line">EXPOSE    # 申明端口</span><br><span class="line">CMD      # 指定启动容器时运行的命令</span><br><span class="line">ENTRYPOINT    # 指定这个容器启动的时候要运行的命令，可用追加命令</span><br><span class="line">COPY      # 类似ADD命令，将我们文件拷贝到镜像中</span><br></pre></td></tr></table></figure><p><img src="Users/21879/Documents/Downloads/nMzQji.png" alt="nMzQji"></p><blockquote><p> 创建一个自己的centos</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s centos]# cat Dockerfile </span><br><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER ayaka&lt;2187988995@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum install -y vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;----end----&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p>通过文件构建镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s centos]# docker build -f Dockerfile -t centos-yum:1.0 .</span><br><span class="line"></span><br><span class="line">[root@k8s centos]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">centos-yum            1.0       b7e760e76050   2 hours ago     687MB</span><br></pre></td></tr></table></figure><p>测试运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s centos]# docker run -it --name centos01 centos-yum:1.0</span><br><span class="line">/usr/local</span><br><span class="line">----end----</span><br><span class="line">[root@075633642f19 local]# </span><br><span class="line">[root@075633642f19 local]# ls</span><br><span class="line">bin  etc  games  include  lib  lib64  libexec  sbin  share  src</span><br></pre></td></tr></table></figure><p>测试vim和ifconfig命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@075633642f19 local]# ifconfig </span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.3  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:03  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 17  bytes 2144 (2.0 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@075633642f19 local]# </span><br></pre></td></tr></table></figure><p>查看镜像构建过程</p><p>Docker history</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s centos]# docker history centos-yum:1.0 </span><br><span class="line">IMAGE          CREATED       CREATED BY                                       SIZE      COMMENT</span><br><span class="line">b7e760e76050   2 hours ago   CMD [&quot;/bin/bash&quot; &quot;-c&quot; &quot;echo $MYPATH &amp;&amp; echo …   0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      2 hours ago   EXPOSE map[80/tcp:&#123;&#125;]                            0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      2 hours ago   RUN /bin/sh -c yum -y install net-tools # bu…   198MB     buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      2 hours ago   RUN /bin/sh -c yum install -y vim # buildkit     285MB     buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      3 hours ago   WORKDIR /usr/local                               0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      3 hours ago   ENV MYPATH=/usr/local                            0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      3 hours ago   MAINTAINER ayaka&lt;2187988995@qq.com&gt;              0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      2 years ago   /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]             0B        </span><br><span class="line">&lt;missing&gt;      2 years ago   /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B        </span><br><span class="line">&lt;missing&gt;      2 years ago   /bin/sh -c #(nop) ADD file:b3ebbe8bd304723d4…   204MB  </span><br></pre></td></tr></table></figure><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>Dockerfile中的CMD的运用技巧</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个Dockerfile 并在其中添加CMD参数命令 指定进入容器时 运行<span class="built_in">ls</span> -a命令</span></span><br><span class="line">[root@k8s centos]# vim dockerfile-cmd-test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建镜像</span></span><br><span class="line">[root@k8s centos]# docker build -f dockerfile-cmd-test -t cmdtest:1.0 .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动容器</span></span><br><span class="line">[root@k8s centos]# docker run -it cmdtest:1.0 </span><br><span class="line">.  ..  .dockerenv  bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr var</span><br><span class="line"></span><br><span class="line">Dockerfile内容</span><br><span class="line">[root@k8s centos]# cat dockerfile-cmd-test </span><br><span class="line">FROM centos</span><br><span class="line">CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br></pre></td></tr></table></figure><p><strong>ENTRYPORT</strong></p><p>Dockerfile中ENTRYPOINT的运用技巧</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">创建容器</span><br><span class="line">[root@k8s centos]# docker run -it entrypoint:1 </span><br><span class="line">.  ..  .dockerenv  bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"></span><br><span class="line">构建镜像</span><br><span class="line">[root@k8s centos]# docker build -f dockerfile-cmd-entrypoint -t entrypoint:1 .</span><br><span class="line"></span><br><span class="line">Dockerfile中的内容</span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我们的追加命令，时可以直接评价在ENTRYPOINT追加</span></span><br><span class="line">[root@k8s centos]# docker run entrypoint:1 -l</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x    1 root root    6 Dec  7 06:41 .</span><br><span class="line">drwxr-xr-x    1 root root    6 Dec  7 06:41 ..</span><br><span class="line">-rwxr-xr-x    1 root root    0 Dec  7 06:41 .dockerenv</span><br><span class="line">lrwxrwxrwx.   1 root root    7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x    5 root root  340 Dec  7 06:41 dev</span><br><span class="line">drwxr-xr-x    1 root root   66 Dec  7 06:41 etc</span><br><span class="line">drwxr-xr-x.   2 root root    6 Nov  3  2020 home</span><br><span class="line">lrwxrwxrwx.   1 root root    7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx.   1 root root    9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------.   2 root root    6 Sep 15  2021 lost+found</span><br><span class="line">drwxr-xr-x.   2 root root    6 Nov  3  2020 media</span><br><span class="line">drwxr-xr-x.   2 root root    6 Nov  3  2020 mnt</span><br><span class="line">drwxr-xr-x.   2 root root    6 Nov  3  2020 opt</span><br><span class="line">dr-xr-xr-x  429 root root    0 Dec  7 06:41 proc</span><br><span class="line">dr-xr-x---.   2 root root  162 Sep 15  2021 root</span><br><span class="line">drwxr-xr-x.  11 root root  163 Sep 15  2021 run</span><br><span class="line">lrwxrwxrwx.   1 root root    8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x.   2 root root    6 Nov  3  2020 srv</span><br><span class="line">dr-xr-xr-x   13 root root    0 Dec  7 06:41 sys</span><br><span class="line">drwxrwxrwt.   7 root root  171 Sep 15  2021 tmp</span><br><span class="line">drwxr-xr-x.  12 root root  144 Sep 15  2021 usr</span><br><span class="line">drwxr-xr-x.  20 root root 4096 Sep 15  2021 var</span><br></pre></td></tr></table></figure><h2 id="构建httpd镜像"><a href="#构建httpd镜像" class="headerlink" title="构建httpd镜像"></a>构建httpd镜像</h2><p>一、创建文件夹并编辑Dockerfile文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM rockylinux:9.1</span><br><span class="line">MAINTAINER ayaka</span><br><span class="line"></span><br><span class="line">COPY yum.repo /usr/local</span><br><span class="line">COPY httpd.conf /usr/local</span><br><span class="line"></span><br><span class="line">RUN rm -rf /etc/yum.repos.d/* &amp;&amp; \</span><br><span class="line">    cp /usr/local/yum.repo /etc/yum.repos.d/ &amp;&amp; \</span><br><span class="line">    yum makecache &amp;&amp; \</span><br><span class="line">    yum install -y httpd* &amp;&amp; \</span><br><span class="line">    echo &quot;hello world&quot; &gt; /var/www/html/index.html &amp;&amp; \</span><br><span class="line">    mv -f /usr/local/httpd.conf /etc/httpd/conf/</span><br><span class="line"></span><br><span class="line">CMD [&quot;/usr/sbin/httpd&quot;, &quot;-D&quot;, &quot;FOREGROUND&quot;]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建镜像</span></span><br><span class="line">[root@k8s tomcat]# docker build -t centos-web:1.0 .</span><br></pre></td></tr></table></figure><p><strong>查看镜像列表</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@k8s tomcat]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED             SIZE</span><br><span class="line">centos-web            1.0       6e46f461db6c   14 minutes ago      278MB</span><br></pre></td></tr></table></figure><p><strong>创建容器</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s tomcat]# docker run -itd --name webA -p 8001:80 centos-web:1.0 </span><br><span class="line">55b24aaec93d01e68cbfb286d854d9758348c9fcf4aeb4496c195f714bd793ca</span><br></pre></td></tr></table></figure><p><strong>访问8001端口</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s tomcat]# curl localhost:8001</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h3 id="Rocky容器内启动Apche-Httpd服务"><a href="#Rocky容器内启动Apche-Httpd服务" class="headerlink" title="Rocky容器内启动Apche Httpd服务"></a>Rocky容器内启动Apche Httpd服务</h3><p><strong>利用镜像创建容器</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]# docker run -it --name web1 -p 1234:80 --privileged=true --restart=always rockylinux:9.1 bash</span><br><span class="line">828e1c7387b2c692e82f9d96402779325e824bf34505b94869ae742a9681a576</span><br></pre></td></tr></table></figure><p><strong>配置好yum源</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@daa98bede414 /]# cat /etc/yum.repos.d/yum.repo </span><br><span class="line">[Install-Media]</span><br><span class="line">name=RockyLinux9.1</span><br><span class="line">baseurl=http://192.168.123.101/cdrom/AppStream</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[Install-BaseOS]</span><br><span class="line">name=RockyLinux9.1</span><br><span class="line">baseurl=http://192.168.123.101/cdrom/BaseOS</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line"># 更新本地源缓存</span><br><span class="line">[root@daa98bede414 /]# yum makecache</span><br><span class="line">RockyLinux9.1                                                                                               4.0 MB/s | 4.1 kB     00:00    </span><br><span class="line">RockyLinux9.1                                                                                               3.6 MB/s | 3.6 kB     00:00    </span><br><span class="line">Metadata cache created.</span><br></pre></td></tr></table></figure><p><strong>下载软件包并进行配置</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载软件包和vim工具</span></span><br><span class="line">[root@daa98bede414 /]# yum install -y httpd* vim</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑主页内容</span></span><br><span class="line">[root@daa98bede414 /]# echo &quot;Hello World&quot; &gt; /var/www/html/index.html</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入配置文件配置虚拟主机</span></span><br><span class="line">[root@k8s ~]#  tail -10 /etc/httpd/conf/httpd.conf </span><br><span class="line">IncludeOptional conf.d/*.conf</span><br><span class="line">&lt;Virtualhost *:80&gt;</span><br><span class="line">        ServerName localhost</span><br><span class="line">        DocumentRoot &quot;/var/www/html&quot;</span><br><span class="line">        &lt;Directory &quot;/var/www/html&quot;&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">        &lt;/Directory&gt;</span><br><span class="line">        &lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p><strong>重启httpd</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@daa98bede414 /]# /usr/sbin/httpd </span><br></pre></td></tr></table></figure><p><strong>退出到宿主机并访问1234端口</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]# curl localhost:1234</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postfix&amp;Dovecot邮件服务器样题</title>
      <link href="/2024/04/30/Postfix-Dovecot%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A0%B7%E9%A2%98/"/>
      <url>/2024/04/30/Postfix-Dovecot%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A0%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><code>1.配置 linux5 为 mail 服务器，安装 postfix 和 dovecot。 2.仅支持 smtps 和 pop3s 连接。 3.创建用户 mail1 和 mail2，向 all@skills.com 发送的邮件，每个用户都会收到。 4.使用 s-nail 在本机进行测试。</code></p><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20240407095401794.png" alt="image-20240407095401794"></p><ol><li>安装相关软件包</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y postfix* dovecot* s-nail</span><br></pre></td></tr></table></figure><ol><li><code>/etc/postfix/master.cf</code></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/postfix/master.cf</span><br><span class="line"></span><br><span class="line"> 16 #tlsproxy  unix  -       -       n       -       0       tlsproxy</span><br><span class="line"> 17 submission inet n       -       n       -       -       smtpd</span><br><span class="line"> 18   -o syslog_name=postfix/submission</span><br><span class="line"> 19   -o smtpd_tls_security_level=encrypt</span><br><span class="line"> 20   -o smtpd_sasl_auth_enable=yes</span><br><span class="line"> 21   -o smtpd_tls_auth_only=yes</span><br><span class="line"> 22 #  -o smtpd_reject_unlisted_recipient=no</span><br><span class="line"> 23 #  -o smtpd_client_restrictions=$mua_client_restrictions</span><br><span class="line"> 24 #  -o smtpd_helo_restrictions=$mua_helo_restrictions</span><br><span class="line"> 25 #  -o smtpd_sender_restrictions=$mua_sender_restrictions</span><br><span class="line"> 26 #  -o smtpd_recipient_restrictions=</span><br><span class="line"> 27   -o smtpd_relay_restrictions=permit_sasl_authenticated,reject</span><br><span class="line"> 28 #  -o milter_macro_daemon_name=ORIGINATING</span><br><span class="line"> 29 smtps     inet  n       -       n       -       -       smtpd</span><br><span class="line"> </span><br></pre></td></tr></table></figure><ol><li><code>/etc/postfix/mian.cf</code></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">95 myhostname = linux5.skills.com</span><br><span class="line">102 mydomain = skills.com</span><br><span class="line">118 myorigin = $mydomain</span><br><span class="line">132 inet_interfaces = all</span><br><span class="line">138 inet_protocols = all</span><br><span class="line"></span><br><span class="line">183 #mydestination = $myhostname, localhost.$mydomain, localhost</span><br><span class="line">184 #mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain</span><br><span class="line">185 mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain,</span><br><span class="line">186         mail.$mydomain, www.$mydomain, ftp.$mydomain</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">270 mynetworks_style = host</span><br><span class="line">282 mynetworks = 10.10.120.0/24</span><br><span class="line"></span><br><span class="line">708 smtpd_tls_cert_file = /etc/ssl/skills.crt</span><br><span class="line">714 smtpd_tls_key_file = /etc/ssl/skills.key</span><br><span class="line">730 smtp_tls_CAfile = /etc/ssl/cacert.pem</span><br></pre></td></tr></table></figure><ol><li><code>/etc/dovecot/conf.d/</code></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@linux5 conf.d]# vim 10-auth.conf</span><br><span class="line"> 10 disable_plaintext_auth = yes</span><br><span class="line"> </span><br><span class="line">[root@linux5 conf.d]# vim 10-mail.conf</span><br><span class="line"> 24    mail_location = maildir:~/Maildir</span><br><span class="line"> 25 #   mail_location = mbox:~/mail:INBOX=/var/mail/%u</span><br><span class="line"> 26 #   mail_location = mbox:/var/mail/%d/%1n/%n:INDEX=/var/indexes/%d/%1n/%n</span><br><span class="line"> </span><br><span class="line">[root@linux5 conf.d]# vim 10-ssl.conf</span><br><span class="line"> 14 ssl_cert = &lt;/etc/ssl/skills.crt</span><br><span class="line"> 15 ssl_key = &lt;/etc/ssl/skills.key</span><br></pre></td></tr></table></figure><ol><li>将Linux1的证书导入到/etc/ssl中</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@linux1 ~]# scp /etc/pki/CA/skills.* linux5.skills.com:/etc/ssl</span><br><span class="line">skills.crt                                                                                          100% 4401     3.1MB/s   00:00    </span><br><span class="line">skills.csr                                                                                          100% 1005   829.2KB/s   00:00    </span><br><span class="line">skills.key                                                                                          100% 1704     1.3MB/s   00:00    </span><br><span class="line">skills.pfx                                                                                          100% 2691     3.0MB/s   00:00    </span><br><span class="line">[root@linux1 ~]# scp /etc/pki/CA/cacert.* linux5.skills.com:/etc/ssl</span><br><span class="line">cacert.pem </span><br></pre></td></tr></table></figure><ol><li>添加别名</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@linux5 conf.d]# vim /etc/aliases</span><br><span class="line"> 91 all:            mail1,mail2</span><br><span class="line">[root@linux5 conf.d]# newaliases</span><br></pre></td></tr></table></figure><ol><li>添加用户</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd mail1</span><br><span class="line">useradd mail2</span><br></pre></td></tr></table></figure><ol><li>重启服务</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@linux5 conf.d]# systemctl restart dovecot postfix</span><br></pre></td></tr></table></figure><ol><li>发送邮件给all 查看mail1 mail2邮箱</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@linux5 conf.d]# echo &quot;Hello&quot;|mail -s &quot;Welcome&quot; all@skills.com</span><br><span class="line">[root@linux5 conf.d]# mail -u mail1</span><br><span class="line">s-nail version v14.9.22.  Type `?&#x27; for help</span><br><span class="line">/var/spool/mail/mail1: 1 message 1 new</span><br><span class="line">▸N  1 root                  2024-06-07 09:54   15/444   &quot;Welcome                                                                     &quot;</span><br><span class="line">&amp; 1</span><br><span class="line">[-- Message  1 -- 15 lines, 444 bytes --]:</span><br><span class="line">Date: Fri, 07 Jun 2024 09:54:28 +0800</span><br><span class="line">To: all@skills.com</span><br><span class="line">Subject: Welcome</span><br><span class="line">Message-Id: &lt;20240607015428.6ED2DBE67A@linux5.skills.com&gt;</span><br><span class="line">From: root &lt;root@skills.com&gt;</span><br><span class="line"></span><br><span class="line">Hello</span><br><span class="line"></span><br><span class="line">&amp; quit</span><br><span class="line">Held 1 message in /var/spool/mail/mail1</span><br><span class="line">[root@linux5 conf.d]# mail -u mail2</span><br><span class="line">s-nail version v14.9.22.  Type `?&#x27; for help</span><br><span class="line">/var/spool/mail/mail2: 1 message 1 new</span><br><span class="line">▸N  1 root                  2024-06-07 09:54   15/444   &quot;Welcome                                                                     &quot;</span><br><span class="line">&amp; 1</span><br><span class="line">[-- Message  1 -- 15 lines, 444 bytes --]:</span><br><span class="line">Date: Fri, 07 Jun 2024 09:54:28 +0800</span><br><span class="line">To: all@skills.com</span><br><span class="line">Subject: Welcome</span><br><span class="line">Message-Id: &lt;20240607015428.6ED2DBE67A@linux5.skills.com&gt;</span><br><span class="line">From: root &lt;root@skills.com&gt;</span><br><span class="line"></span><br><span class="line">Hello</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络建设与运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络建设与运维 </tag>
            
            <tag> postfix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客 Github</title>
      <link href="/2024/04/30/Github/"/>
      <url>/2024/04/30/Github/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建Hexo静态博客"><a href="#搭建Hexo静态博客" class="headerlink" title="搭建Hexo静态博客"></a>搭建Hexo静态博客</h1><h2 id="一、注册Github账号"><a href="#一、注册Github账号" class="headerlink" title="一、注册Github账号"></a>一、注册Github账号</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://www.bilibili.com/video/BV1784y1d7df/?spm_id_from=333.337.search-card.all.click&amp;vd_source=533916b955e102311f934c822ec0d801</span><br></pre></td></tr></table></figure><h2 id="二、-安装前置软件包"><a href="#二、-安装前置软件包" class="headerlink" title="二、 安装前置软件包"></a>二、 安装前置软件包</h2><ul><li>Git <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></li><li>VSCode  <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li><li>Typora</li><li>Node.JS <a href="https://nodejs.org/en">https://nodejs.org/en</a></li></ul><h2 id="三、-绑定github仓库"><a href="#三、-绑定github仓库" class="headerlink" title="三、 绑定github仓库"></a>三、 绑定github仓库</h2><h3 id="创建SSH私钥"><a href="#创建SSH私钥" class="headerlink" title="创建SSH私钥"></a>创建SSH私钥</h3><ul><li>打开Git Bash输入</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的Github用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><ul><li>创建SSH私钥</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen -t rsa -C <span class="string">&quot;2187988995@qq.com&quot;</span>  <span class="comment">## 输入自己的邮箱</span></span></span><br><span class="line">Generating public/private rsa key pair. //以下选项都回车 什么都不用输入</span><br><span class="line">Enter file in which to save the key (/c/Users/21879/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/21879/.ssh/id_rsa</span><br><span class="line">Your public key has been saved in /c/Users/21879/.ssh/id_rsa.pub</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:i++Oohyq3eWhzqArA4Z0WuEVD2qUwBz8+gB40JG6zPA 2187988995@qq.com</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 3072]----+</span><br><span class="line">|++++.o.          |</span><br><span class="line">|.++o..o          |</span><br><span class="line">|.oooo  .         |</span><br><span class="line">|=.o=             |</span><br><span class="line">|B+=     S        |</span><br><span class="line">|+BE    . .       |</span><br><span class="line">|o =   + .        |</span><br><span class="line">|o= *.+ +         |</span><br><span class="line">|Bo+o=.oo+        |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>查看保存ssh密钥的文件夹 <code>一般都在C:\Users\你的用户\.ssh</code></li></ul><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413205804175.png" alt="image-20240413205804175"></p><h3 id="添加私钥"><a href="#添加私钥" class="headerlink" title="添加私钥"></a>添加私钥</h3><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413210113979.png" alt="image-20240413210113979"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413210146799.png" alt="image-20240413210146799"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413210214754.png" alt="image-20240413210214754"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413210328380.png" alt="image-20240413210328380"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413210355789.png" alt="image-20240413210355789"></p><h3 id="连接Github仓库"><a href="#连接Github仓库" class="headerlink" title="连接Github仓库"></a>连接Github仓库</h3><ol><li>在.ssh文件夹下创建config文件</li></ol><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413210918370.png" alt="image-20240413210918370"></p><ol><li>在config文件中添加以下内容</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">HostName ssh.github.com  # 这是最重要的部分</span><br><span class="line">User git</span><br><span class="line">Port 443</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><ol><li>测试连接ssh库</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh git@github.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The authenticity of host &#x27;[ssh.github.com]:443 ([20.205.243.160]:443)&#x27; can&#x27;t be established.</span><br><span class="line">ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.</span><br><span class="line">This key is not known by any other names.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#x27;[ssh.github.com]:443&#x27; (ED25519) to the list of known hosts.</span><br><span class="line">PTY allocation request failed on channel 0</span><br><span class="line">Hi WaitAyaka! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">Connection to ssh.github.com closed.  //显示 HI `你的用户名`！即为连接成功</span><br></pre></td></tr></table></figure><h2 id="四、安装hexo"><a href="#四、安装hexo" class="headerlink" title="四、安装hexo"></a>四、安装hexo</h2><h3 id="1-更改npm镜像源"><a href="#1-更改npm镜像源" class="headerlink" title="1. 更改npm镜像源"></a>1. 更改npm镜像源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">`进入cmd`</span><br><span class="line"> npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><h3 id="2-创建一个文件夹-在里面打开终端"><a href="#2-创建一个文件夹-在里面打开终端" class="headerlink" title="2. 创建一个文件夹 在里面打开终端"></a>2. 创建一个文件夹 在里面打开终端</h3><ul><li><code>使用npm安装hexo</code></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="3-初始化hexo"><a href="#3-初始化hexo" class="headerlink" title="3. 初始化hexo"></a>3. 初始化hexo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">`初始化完成 后显示`</span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure><ol><li>运行博客</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g //生成更改内容</span><br><span class="line">hexo s //运行本地网页服务</span><br></pre></td></tr></table></figure><ul><li><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\My Blogs&gt;hexo s</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413211954126.png" alt="image-20240413211954126"></p><p><code>可以使用自己喜欢的主题 可以在网上自行搜索</code></p><p><code>这里使用particleX 因为很好看</code></p><ul><li>主题官方文档</li></ul><p><a href="https://github.com/theme-particlex/hexo-theme-particlex">https://github.com/theme-particlex/hexo-theme-particlex</a></p><h2 id="五、切换主题"><a href="#五、切换主题" class="headerlink" title="五、切换主题"></a>五、切换主题</h2><h3 id="1-安装主题"><a href="#1-安装主题" class="headerlink" title="1.  安装主题"></a>1.  安装主题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd themes</span><br><span class="line">git clone git@github.com:theme-particlex/hexo-theme-particlex.git particlex --depth=1</span><br></pre></td></tr></table></figure><h3 id="2-修改默认主题"><a href="#2-修改默认主题" class="headerlink" title="2. 修改默认主题"></a>2. 修改默认主题</h3><ol><li>在根目录 <code>_config.yml</code> 设置主题为 ParticleX 即可</li></ol><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413213142806.png" alt="image-20240413213142806"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413213316569.png" alt="image-20240413213316569"></p><h3 id="查看修改主题后的网站"><a href="#查看修改主题后的网站" class="headerlink" title="查看修改主题后的网站"></a>查看修改主题后的网站</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413213454708.png" alt="image-20240413213454708"></p><h2 id="六、主题美化"><a href="#六、主题美化" class="headerlink" title="六、主题美化"></a>六、主题美化</h2><h3 id="1-修改主题标签"><a href="#1-修改主题标签" class="headerlink" title="1. 修改主题标签"></a>1. 修改主题标签</h3><p>还是<code>_config.yaml文件</code> 任意修改以下参数 <code>修改完后记得ctrl+s保存配置</code></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413213640466.png" alt="image-20240413213640466"></p><p>重新启动hexo服务 </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413213822491.png" alt="image-20240413213822491"></p><h3 id="2-menu-主页菜单导航"><a href="#2-menu-主页菜单导航" class="headerlink" title="2. menu 主页菜单导航"></a>2. menu 主页菜单导航</h3><p><code>需要我们进入到主题的_config.yaml进行配置</code></p><ul><li>进入之后找到menu选项</li><li><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413214121726.png" alt="image-20240413214121726"></li></ul><p><code>我们可以更改Home About这些的定义 比如将Home 换成主页 About 换成关于</code></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413214221853.png" alt="image-20240413214221853"></p><h4 id="查看修改后效果"><a href="#查看修改后效果" class="headerlink" title="查看修改后效果"></a>查看修改后效果</h4><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413214255331.png" alt="image-20240413214255331"></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">    <span class="string">主页:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">house</span></span><br><span class="line">        <span class="attr">theme:</span> <span class="string">solid</span></span><br><span class="line">        <span class="attr">link:</span> <span class="string">/</span></span><br><span class="line"><span class="comment"># 关于页面链接：</span></span><br><span class="line">    <span class="string">关于:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">id-card</span></span><br><span class="line">        <span class="attr">theme:</span> <span class="string">solid</span></span><br><span class="line">        <span class="attr">link:</span> <span class="string">/about</span></span><br><span class="line"><span class="comment"># 存档页面链接</span></span><br><span class="line">    <span class="string">存档:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">box-archive</span></span><br><span class="line">        <span class="attr">theme:</span> <span class="string">solid</span></span><br><span class="line">        <span class="attr">link:</span> <span class="string">/archives</span></span><br><span class="line"><span class="comment"># 分类页面链接</span></span><br><span class="line">    <span class="string">分类:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">bookmark</span></span><br><span class="line">        <span class="attr">theme:</span> <span class="string">solid</span></span><br><span class="line">        <span class="attr">link:</span> <span class="string">/categories</span></span><br><span class="line"><span class="comment"># 标签页面链接</span></span><br><span class="line">    <span class="string">标签:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">tags</span></span><br><span class="line">        <span class="attr">theme:</span> <span class="string">solid</span></span><br><span class="line">        <span class="attr">link:</span> <span class="string">/tags</span></span><br></pre></td></tr></table></figure><h2 id="七、Hexo常用命令"><a href="#七、Hexo常用命令" class="headerlink" title="七、Hexo常用命令"></a>七、Hexo常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean //清除hexo缓存</span><br><span class="line">hexo g     //重新生成hexo</span><br><span class="line">hexo s     //运行本地服务器</span><br><span class="line">hexo d     //将hexo推送到设置好的服务器上</span><br><span class="line">hexo new   xxx //新建博文</span><br><span class="line">hexo new page xxx //新建页面</span><br></pre></td></tr></table></figure><p>博文新建好会存到<code>/&lt;博客根目录&gt;/souce/_post中</code></p><p>采用<code>MarkDown</code>语法</p><h3 id="1-创建新页面"><a href="#1-创建新页面" class="headerlink" title="1. 创建新页面"></a>1. 创建新页面</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\My Blogs\themes&gt;hexo new page &quot;about&quot;</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: D:\My Blogs\source\about\index.md</span><br></pre></td></tr></table></figure><ul><li>进入<code>Created: D:\My Blogs\source\about\index.md</code></li></ul><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413220004608.png" alt="image-20240413220004608"></p><ul><li>访问关于页面</li></ul><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413220026152.png" alt="image-20240413220026152"></p><h3 id="2-创建博文"><a href="#2-创建博文" class="headerlink" title="2. 创建博文"></a>2. 创建博文</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\My Blogs\themes&gt;hexo new &quot;你好Hexo&quot;</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: D:\My Blogs\source\_posts\你好Hexo.md</span><br></pre></td></tr></table></figure><p>进入<code>D:\My Blogs\source\_posts\你好Hexo.md</code></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413220251011.png" alt="image-20240413220251011"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413220441365.png" alt="image-20240413220441365"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413220453302.png" alt="image-20240413220453302"></p><h2 id="八、推送hexo到github-io上"><a href="#八、推送hexo到github-io上" class="headerlink" title="八、推送hexo到github.io上"></a>八、推送hexo到github.io上</h2><h3 id="1-修改本地博客配置文件"><a href="#1-修改本地博客配置文件" class="headerlink" title="1. 修改本地博客配置文件"></a>1. 修改本地博客配置文件</h3><p>在本地博客中找到<code>_config.yaml</code>找到deploy部分</p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413221003222.png" alt="image-20240413221003222"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo: 后面接上你的github仓库地址</span><br></pre></td></tr></table></figure><h3 id="2-下载插件"><a href="#2-下载插件" class="headerlink" title="2. 下载插件"></a>2. 下载插件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>在命令行中输入</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean //清除缓存</span><br><span class="line">hexo g //生成更改</span><br><span class="line">hexo d //推送到服务器</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413221300325.png" alt="image-20240413221300325"></p><ul><li>上传的过程</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\My Blogs\themes&gt;hexo d</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Setting up Git deployment...</span><br><span class="line">Initialized empty Git repository in D:/My Blogs/.deploy_git/.git/</span><br><span class="line">[master (root-commit) 7798c74] First commit</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 placeholder</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">warning: in the working copy of &#x27;2024/04/13/hello-world/index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;2024/04/13/浣犲ソHexo/index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;about/index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;archives/2024/04/index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;archives/2024/index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;archives/index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;css/main.css&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;js/lib/crypto.js&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;js/lib/highlight.js&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;js/lib/home.js&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;js/lib/math.js&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;js/lib/preview.js&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;js/lib/search.js&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;js/main.js&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">[master fd9219c] Site updated: 2024-04-13 22:12:36</span><br><span class="line"> 19 files changed, 2778 insertions(+)</span><br><span class="line"> create mode 100644 2024/04/13/hello-world/index.html</span><br><span class="line"> create mode 100644 &quot;2024/04/13/\344\275\240\345\245\275Hexo/index.html&quot;</span><br><span class="line"> create mode 100644 about/index.html</span><br><span class="line"> create mode 100644 archives/2024/04/index.html</span><br><span class="line"> create mode 100644 archives/2024/index.html</span><br><span class="line"> create mode 100644 archives/index.html</span><br><span class="line"> create mode 100644 css/main.css</span><br><span class="line"> create mode 100644 images/avatar.jpg</span><br><span class="line"> create mode 100644 images/background.jpg</span><br><span class="line"> create mode 100644 images/loading.gif</span><br><span class="line"> create mode 100644 index.html</span><br><span class="line"> create mode 100644 js/lib/crypto.js</span><br><span class="line"> create mode 100644 js/lib/highlight.js</span><br><span class="line"> create mode 100644 js/lib/home.js</span><br><span class="line"> create mode 100644 js/lib/math.js</span><br><span class="line"> create mode 100644 js/lib/preview.js</span><br><span class="line"> create mode 100644 js/lib/search.js</span><br><span class="line"> create mode 100644 js/main.js</span><br><span class="line"> delete mode 100644 placeholder</span><br><span class="line">info: please complete authentication in your browser...</span><br><span class="line">Enumerating objects: 34, done.</span><br><span class="line">Counting objects: 100% (34/34), done.</span><br><span class="line">Delta compression using up to 16 threads</span><br><span class="line">Compressing objects: 100% (25/25), done.</span><br><span class="line">Writing objects: 100% (34/34), 1.81 MiB | 906.00 KiB/s, done.</span><br><span class="line">Total 34 (delta 4), reused 0 (delta 0), pack-reused 0 (from 0)</span><br><span class="line">remote: Resolving deltas: 100% (4/4), done.</span><br><span class="line">To https://github.com/WaitAyaka/Ayaka.github.io.git</span><br><span class="line"> * [new branch]      HEAD -&gt; main</span><br><span class="line">branch &#x27;master&#x27; set up to track &#x27;https://github.com/WaitAyaka/Ayaka.github.io.git/main&#x27;.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure><h3 id="推送到互联网"><a href="#推送到互联网" class="headerlink" title="推送到互联网"></a>推送到互联网</h3><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413221629306.png" alt="image-20240413221629306"></p><p><img src="image-20240413221647806.png" alt="image-20240413221647806"></p><ul><li>选择main 并保存</li></ul><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240413221731876.png" alt="image-20240413221731876"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;云崽QQ机器人的部署（Linux）&#39;</title>
      <link href="/2024/04/30/%E4%BA%91%E5%B4%BDQQ%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E9%83%A8%E7%BD%B2%EF%BC%88Linux%EF%BC%89/"/>
      <url>/2024/04/30/%E4%BA%91%E5%B4%BDQQ%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E9%83%A8%E7%BD%B2%EF%BC%88Linux%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="云崽机器人脚本部署"><a href="#云崽机器人脚本部署" class="headerlink" title="云崽机器人脚本部署"></a>云崽机器人脚本部署</h1><h2 id="调用脚本"><a href="#调用脚本" class="headerlink" title="调用脚本"></a>调用脚本</h2><p>在Linux终端命令行输入  <code>等待系统安装完成</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su</span><br><span class="line"></span><br><span class="line">bash &lt;(curl -sL https://gitee.com/baihu433/Yunzai-Bot-Shell/raw/master/install.sh)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240430084727241.png" alt="image-20240430084727241"></p><h2 id="定义Api签名"><a href="#定义Api签名" class="headerlink" title="定义Api签名"></a>定义Api签名</h2><h3 id="API接口地址"><a href="#API接口地址" class="headerlink" title="API接口地址"></a>API接口地址</h3><p>Api签名使用小兔提供的API  单击<a href="https://www.xn--h5q74xcj0bhth.icu/?p=419">API</a>进入网页</p><ul><li>随便选择一个API地址 <code>注意：</code>选择的APi接口一定要先访问测试 如果不能访问的话就换一个</li></ul><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240430085703661.png" alt="image-20240430085703661"></p><h3 id="定义API接口"><a href="#定义API接口" class="headerlink" title="定义API接口"></a>定义API接口</h3><p>打开终端 完成以下步骤</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su //进入管理员账号</span><br><span class="line"></span><br><span class="line">vim /root/Miao-Yunzai/config/config/bot.yaml  //添加api接口</span><br><span class="line"></span><br><span class="line"> 34 # 签名API地址(如:http://127.0.0.1:8080/sign?key=114514)</span><br><span class="line"> 35 sign_api_addr: http://qsign.angryrabbit.cn/8978/sign?key=114514  //找到第35行 将复制下来的api接口地址填入</span><br><span class="line"> </span><br><span class="line"> wq  //保存退出</span><br></pre></td></tr></table></figure><h2 id="启动云崽服务器"><a href="#启动云崽服务器" class="headerlink" title="启动云崽服务器"></a>启动云崽服务器</h2><ul><li>启动服务器 （如果没有下面这个界面 在命令行中输入bh进入）</li></ul><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240430085925188.png" alt="image-20240430085925188"></p><p><code>选择 Miao-Yunzai并回车</code>  第一次进入可能启动不了 再次选择Miao-Yunzai并回车</p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240430090045527.png" alt="image-20240430090045527"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240430090106628.png" alt="image-20240430090106628"></p><ul><li>配置Yunzai的基础设置</li></ul><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240430090410962.png" alt="image-20240430090410962"></p><h3 id="基本配置参数解释"><a href="#基本配置参数解释" class="headerlink" title="基本配置参数解释"></a>基本配置参数解释</h3><ul><li>机器人QQ号 最好使用自己的小号</li><li>输入登陆密码 <ul><li>密码登录： 输入密码登录</li><li>扫码登录： 不输入密码 直接按回车 即可扫码登录</li></ul></li><li>登录端口： 一点要选择apad</li><li>主人QQ号：相当于机器人的管理员  只有这个qq号可以对机器人进行操作</li><li>签名api地址： 选择小兔或者寒暄的api地址  推荐：<a href="http://1.qsign.icu/?key=XxxX">http://1.qsign.icu/?key=XxxX</a></li></ul><ul><li>QQ号验证 选择最后面的那个链接 并在浏览器中打开进行验证</li></ul><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240430090755741.png" alt="image-20240430090755741"></p><ul><li>快速完成验证</li></ul><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240430091536929.png" alt="image-20240430091536929"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240430091553315.png" alt="image-20240430091553315"></p><ul><li>配置成功截图</li></ul><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240430091655016.png" alt="image-20240430091655016"></p><h2 id="在QQ中进行验证"><a href="#在QQ中进行验证" class="headerlink" title="在QQ中进行验证"></a>在QQ中进行验证</h2><h4 id="使用帮助进行功能的查询"><a href="#使用帮助进行功能的查询" class="headerlink" title="使用帮助进行功能的查询"></a>使用帮助进行功能的查询</h4><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240430091726269.png" alt="image-20240430091726269"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240430091746854.png" alt="image-20240430091746854"></p><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><p><code>如果遇到更多的问题请私信联系我</code></p><h3 id="api签名遇到异常"><a href="#api签名遇到异常" class="headerlink" title="api签名遇到异常"></a>api签名遇到异常</h3><p><code>这个问题可能是因为你指定的api签名已经无效了</code></p><ol><li>按住ctrl+c回到开始菜单 选择第一个选项 回车</li></ol><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240430091122766.png" alt="image-20240430091122766"></p><ol><li>选择第8个选项<code>填入签名</code> 并填入签名</li></ol><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240430091338425.png" alt="image-20240430091338425"></p><ol><li>将复制下来的可用api地址 粘贴进去 完成后单击回车返回 这个时候再次启动YunZai就可以了</li></ol><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240430091405894.png" alt="image-20240430091405894"></p>]]></content>
      
      
      <categories>
          
          <category> QQ机器人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QQ机器人 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> YunZai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保姆级教学 Samba服务器的配置与管理</title>
      <link href="/2024/04/30/Samba%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/04/30/Samba%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>在Linux中，大家听的最多的可能就是Samba服务，什么是Samba呢，Samba是连接Linux与Windows的桥梁，真是由于Samba的出现，我们才可以在Linux和Windows间互相通信。</p><h3 id="Samba服务器配置的工作流程"><a href="#Samba服务器配置的工作流程" class="headerlink" title="Samba服务器配置的工作流程"></a>Samba服务器配置的工作流程</h3><p>在Samba服务安装完毕之后，并不是直接可以使用Windows或Linux的客户端访问Samba服务器，我们还必须对服务器进行设置：告诉Samba服务器将那些目录共享出来给客户端进行访问。</p><p><code>**基本的Samba服务器搭建流程主要分为四个步骤**</code>。</p><p>（1）编辑主配置文件smb.conf，指定需要共享的目录，并未共享目录设置共享权限。</p><p>（2）在smb.conf文件中指定日志文件名称和存放路径。</p><p>（3）设置共享目录的本地系统权限</p><p>（4）重新加载配置文件或重新启动SMB服务，使配置生效。</p><p>Samba工作流程：</p><p>1、客户端请求访问Samba服务器上的共项目录</p><p>2、Samba服务器接收到请求后，会查询主配置文件smb.conf，看是否共享了share目录，如果共享了则查询客户端是否有权限访问。</p><p>3、Samba服务器会把本次访问信息记录写在日志中，日志文件的名称和路径都需要我们设置。</p><p>4、如果客户端满足访问权限的设置，则允许客户端进行访问。</p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/user-note-img1h0fjk52bicjnkhvajm5x5st07e.png" alt="image.png"></p><p>解读主要配置文件smb.conf</p><p>Samba的<strong><code>配置文件一般就放在/etc/samba目录中。主配置文件名为smb.conf</code></strong>，如果把Samba服务器比喻成一个图书馆，那么smb.conf就相当于这个图书馆的图书总目录，记录着大量的共享信息和规则，是samba服务器的核心。</p><p>1.Global Settings</p><p>Global settings 设置为全局变量区域。<code>**全局变量区域就是我们只要在Global是进行设置**</code>，<code>**那么该设置项目就是针对所有共享资源生效的**</code>，这与我们以后需要学习的很多服务器配置很相像。</p><p>该部分以[Global]开头</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">        workgroup = SAMBA      //设置工作组或域名</span><br><span class="line">        security = user          //设置安全模式</span><br><span class="line"></span><br><span class="line">        passdb backend = tdbsam</span><br><span class="line"></span><br><span class="line">        printing = cups</span><br><span class="line">        printcap name = cups</span><br><span class="line">        load printers = yes</span><br><span class="line">        cups options = raw</span><br></pre></td></tr></table></figure><p>[Global]常用字段及设置方法如下</p><p>（1）<strong>设置工作组或域名称</strong></p><p>工作组是网络中地位平等的一组计算机，可以通过设置workgroup字段来对Samba服务器所在工作组或域名进行设置。</p><p>（2）<strong>设置Samba服务器安全模式</strong></p><p>Samba服务器一共share,user,server,domain和ads五种安全模式。</p><p>1、<code>**share安全级别模式**</code>。客户端登陆Samba服务器、不需要输入用户名和密码就可以浏览Samba服务器的资源，适用于公共的资源共享，安全性差，需要配合其他权限进行设置。保证Samba服务器的安全性。</p><p>2、<code>**user安全级别模式**</code>。客户端登陆Samba服务器、需要输入指定的用户名和密码才能进行浏览Samba服务器的资源，服务器默认为此级别模式。</p><p>3、server安全级别模式。客户端需要将用户名和密码提交到指定的一台Samba服务器上进行验证，如果验证出现错误，客户端会使用user级别访问。</p><p>4、domain安全级别模式。如果Samba服务器加入Windows域环境中，验证工作将由Windows域负责，domain级别的Samba服务器这是成为域的成员客户端，并不具备服务器的特性。</p><h3 id="客户端访问控制"><a href="#客户端访问控制" class="headerlink" title="客户端访问控制"></a><strong>客户端访问控制</strong></h3><p>对于Samba服务器的安全性，可以使用vliad users字段去实现用户控制访问，但是如果企业庞大且存在大量的用户的话，这种方法操作起来就比较的麻烦。所以我们可以使用hosts allow和hosts deny两个字段可以实现该功能。</p><p>hosts allow和hosts deny字段的使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hosts allow 字段定义允许访问的客户端</span><br><span class="line">hosts deny 字段定义禁止访问的客户端</span><br></pre></td></tr></table></figure><p>Samba服务器中有个目录为/share。需要发布该目录成为共享目录，定义共享目录名为public。</p><h3 id="下面是最常用的几个字段"><a href="#下面是最常用的几个字段" class="headerlink" title="下面是最常用的几个字段"></a>下面是最常用的几个字段</h3><p>（1）设置共享名。共享资源发布后，必须为每个共享目录设置不同的共享名，给网络用户访问时使用，并且共享名可以以原目录名不同。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">[共享名]</span><br></pre></td></tr></table></figure><p>（2）共享资源描述。网络中存在各种共享资源，为了方便用户识别，可以为其添加备注信息，以方便用户查看时知道共享资源的内容是什么。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">comment = 备注信息</span><br></pre></td></tr></table></figure><p>（3）共享资源路径。共享资源的原始完整路径，可以使用path字段进行发布，务必正确指定。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">path = 资源的绝对路径</span><br></pre></td></tr></table></figure><p>（4）设置匿名访问。这只是否允许对共享资源进行匿名访问。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public = yes    //允许匿名访问</span><br><span class="line">public = no   //不允许匿名访问</span><br></pre></td></tr></table></figure><p>（5）设置访问用户。</p><p>如果共享资源存在重要数据的话，需要对访问用户审核，我们可以使用valid users字段进行设置。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">valid users = 用户名</span><br><span class="line">valid users = @组名</span><br><span class="line">valid users = @组名，用户名</span><br></pre></td></tr></table></figure><p>例：samba服务器共享文件为/share/tech目录，只允许组tech，和用户manager访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">comment=users   //可不加</span><br><span class="line">path=/share/tech</span><br><span class="line">valid users = @tech，manager</span><br></pre></td></tr></table></figure><p>(6)设置目录只读。</p><p>共享目录如果限制用户的读写操作，我们可以通过read only 实现。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">read only = yes //只读</span><br><span class="line">read only = no  //读写</span><br></pre></td></tr></table></figure><p>例：samba服务器公共目录/public存放大量共享数据，为保证目录安全，我们只允许读取，禁止写入。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">comment = public</span><br><span class="line">path = /public</span><br><span class="line">public = yes</span><br><span class="line">read only = yes</span><br></pre></td></tr></table></figure><p>(7)设置目录可写</p><p>如果共享目录允许用户写操作，可以使用writable或write list 两个字段进行设置。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">writable = yes   //读写</span><br><span class="line">writable = no    //只读</span><br></pre></td></tr></table></figure><p>write list</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">write list = 用户名</span><br><span class="line">write list =@组名</span><br></pre></td></tr></table></figure><p>Samba服务密码文件</p><p>samba服务器发布共享资源后<strong><code>，客户端访问samba服务器，需要提交用户名和密码进行身份验证，验证合格才可以登录</code></strong>。Samba服务器为了实现客户身份验证功能，将<strong><code>用户名和密码存放在/etc/samba/smbpasswd</code></strong>中，在客户端访问时，将用户提交的资料与smbpasswd存放的信息进行比对，如果相同，客户端与samba服务器的连接才能建立成功。</p><p><code>**那如何建立Samba账号呢**</code>。首先我们要创建一个系统账号，例如toto。</p><p>创建完成之后我们使用下方命令在samba服务中创建账号</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd toto     //创建系统账号</span><br><span class="line">passwd toto    //设置密码</span><br><span class="line">smbpasswd -a  toto  //创建samba服务账号</span><br></pre></td></tr></table></figure><h3 id="Share服务器实例解析"><a href="#Share服务器实例解析" class="headerlink" title="Share服务器实例解析"></a>Share服务器实例解析</h3><p>下面我们介绍该如何配置samba的服务端，并顺带做一个项目实例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**某公司需要添加samba服务器作为文件服务器，共享目录为/share，共享名为public，这个共享目录允许所有员工访问。**</span><br></pre></td></tr></table></figure><p>解析：这个共享目录允许所有员工访问，因为我们不知道这个所有他到底是多少，所以为了方便管理，我们直接使用匿名访问，这样会简单很多。</p><ol><li><p>建立share目录，并在其下建立测试文件</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /share</span><br><span class="line">toch /share/toto</span><br></pre></td></tr></table></figure></li><li><p>修改samba主配置文件smb.conf</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">        workgroup = SAMBA</span><br><span class="line">        security = user</span><br><span class="line">        map to guest = bad user</span><br><span class="line">        guest ok = yes</span><br><span class="line">[public]</span><br><span class="line">        path = /shareewe</span><br><span class="line">        browseable = yes</span><br><span class="line">        public = yes</span><br></pre></td></tr></table></figure></li><li><p>修改文件/share的所有者和权限</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir /share</span><br><span class="line">[root@localhost ~]# chmod 777 /share/</span><br><span class="line">[root@localhost ~]# chown nobody.nobody /share</span><br></pre></td></tr></table></figure></li><li><p>重新加载配置文件</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl restart smb nmb</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙和禁用selinux</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl stop firewalld</span><br><span class="line">[root@localhost ~]# setenforce 0</span><br></pre></td></tr></table></figure></li><li><p>通过以上设置，用户就可以在不输入账户和密码的情况下直接登录samba服务器并访问目录public。</p></li></ol><h3 id="samba服务器客户端的配置"><a href="#samba服务器客户端的配置" class="headerlink" title="samba服务器客户端的配置"></a>samba服务器客户端的配置</h3><p>我们可以使用两种不同的方法，在windows客户端和linux客户端之间进行登录samba服务器</p><p>1.Linux客户端访问Samba服务器</p><p>使用smbclient命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**我们在使用smbclient时，先要确保安装了samba-client这个软件包。**</span><br><span class="line">yum install -y samba-client</span><br></pre></td></tr></table></figure><p>smbclient可以列出目标主机共享目录列表。格式如下：</p><p>smbclient -L 目标IP地址 -U 登录用户名</p><p>当我们查看IP地址为172.168.1.1的IP地址主机时，不输入用户的话，我们会看到以下内容，这就是表示匿名用户能看到的共享目录列表。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# smbclient -L 172.168.1.1</span><br><span class="line">Enter SAMBA\root&#x27;s password: </span><br><span class="line"></span><br><span class="line">        Sharename       Type      Comment</span><br><span class="line">        ---------       ----      -------</span><br><span class="line">        print$          Disk      Printer Drivers</span><br><span class="line">        public          Disk      </span><br><span class="line">        IPC$            IPC       IPC Service (Samba 4.10.16)</span><br><span class="line">Reconnecting with SMB1 for workgroup listing.</span><br><span class="line"></span><br><span class="line">        Server               Comment</span><br><span class="line">        ---------            -------</span><br><span class="line"></span><br><span class="line">        Workgroup            Master</span><br><span class="line">        ---------            -------</span><br><span class="line">        SAMBA                LOCALHOST</span><br></pre></td></tr></table></figure><p>我们还可以使用smbclient命令行共享访问模式浏览共享的资料。</p><p>smbclient命令行共享访问模式命令格式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**smbclient //目标IP地址或主机名/共享目录 -U 用户名%密码**</span><br></pre></td></tr></table></figure><p>例：当samba服务器的共享目录为public并且用户toto可以登录时</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient //172.168.1.1/public -U toto%123456</span><br></pre></td></tr></table></figure><p>例：当samba服务器的共享目录为public并且匿名用户可以登录时</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# smbclient //172.168.1.1/public </span><br><span class="line">Enter SAMBA\root&#x27;s password: </span><br><span class="line">Try &quot;help&quot; to get a list of possible commands.</span><br><span class="line">smb: \&gt; ls</span><br><span class="line">  .                                   D        0  Tue May 30 08:56:31 2023</span><br><span class="line">  ..                                  D        0  Tue May 30 08:50:38 2023</span><br><span class="line">  toto                                D        0  Tue May 30 08:56:31 2023</span><br><span class="line"></span><br><span class="line">                17811456 blocks of size 1024. 15658328 blocks available</span><br></pre></td></tr></table></figure><p>2.利用windows客户端访问Samba共享目录</p><p>windows客户端访问samba共享目录的方法有很多，这里展示其中两种：</p><p>1.首先我们按住win+R键，然后输入以下内容</p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/user-note-img1h1l39ut6o5y2jkbvoxx4g8wdom.png" alt="image.png"></p><p>点击确定，我们就可以直接登录samba服务器了</p><p><img src="https://static.wetab.link/user-note-img/zh/644c7fdea6dd8e823b5b8430/user-note-img1h1l3betmcfeh2yy9r7i4wmjfbo.png" alt="image.png"></p><p>方法二、我们点击此电脑，或者任意文件夹后，点击此电脑。</p><p><img src="https://static.wetab.link/user-note-img/zh/644c7fdea6dd8e823b5b8430/user-note-img1h1l3dbmtumohc9ool66qe7qji7.png" alt="image.png"></p><p>找到映射网络驱动器。</p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/user-note-img1h1l3eho2icinf4o6w2ktnkjxij.png" alt="image.png"></p><p>点击，并输入samba服务器的ip地址和共享目录</p><p><img src="https://static.wetab.link/user-note-img/zh/644c7fdea6dd8e823b5b8430/user-note-img1h1l3flhr4r87phjd5cj83y7sf1.png" alt="image.png"></p><p>最后我们就可以登录samba服务器了。</p>]]></content>
      
      
      <categories>
          
          <category> Samba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络建设与运维 </tag>
            
            <tag> Samba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/04/30/%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/04/30/%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023年网络建设与运维KVM创建虚拟机的全过程</title>
      <link href="/2024/04/24/KVM%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2024/04/24/KVM%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="KVMRocky创建KVM虚拟机的全过程"><a href="#KVMRocky创建KVM虚拟机的全过程" class="headerlink" title="KVMRocky创建KVM虚拟机的全过程"></a>KVMRocky创建KVM虚拟机的全过程</h1><h2 id="编辑网卡信息"><a href="#编辑网卡信息" class="headerlink" title="编辑网卡信息"></a>编辑网卡信息</h2><h3 id="配置本地IP"><a href="#配置本地IP" class="headerlink" title="配置本地IP"></a>配置本地IP</h3><ul><li>编辑网卡配置文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim &#x27;网卡配置文件&#x27;</span><br><span class="line">[ethernet]</span><br><span class="line">method=manual</span><br><span class="line">address1=10.4.220.100/24,10.4.220.1 </span><br></pre></td></tr></table></figure><ul><li>在Ubuntu上测试连通性</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@WaitAyaka:/home/waitayaka/桌面# ping 10.4.220.100</span><br><span class="line">PING 10.4.220.100 (10.4.220.100) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.4.220.100: icmp_seq=1 ttl=63 time=1.66 ms</span><br><span class="line">64 bytes from 10.4.220.100: icmp_seq=2 ttl=63 time=1.66 ms</span><br><span class="line">64 bytes from 10.4.220.100: icmp_seq=3 ttl=63 time=1.62 ms</span><br><span class="line">64 bytes from 10.4.220.100: icmp_seq=4 ttl=63 time=1.68 ms</span><br><span class="line">64 bytes from 10.4.220.100: icmp_seq=5 ttl=63 time=1.73 ms</span><br></pre></td></tr></table></figure><h2 id="Ubuntu远程连接"><a href="#Ubuntu远程连接" class="headerlink" title="Ubuntu远程连接"></a>Ubuntu远程连接</h2><p><code>比赛的时候PC是Ubuntu 所以我们还是要配置以下远程连接 使得可以在Ubuntu远程操控</code></p><ul><li>Rocky上的配置</li></ul><ol><li>编辑/etc/ssh/sshd_conf文件 <code>允许使用root用户进行SSH</code></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">40 PermitRootLogin yes</span><br></pre></td></tr></table></figure><ol><li>重启ssh服务</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><ul><li>Ubuntu上的配置</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@WaitAyaka:/home/waitayaka/桌面# ssh 10.4.220.100</span><br><span class="line">root@10.4.220.100&#x27;s password:   //输入root用户的密码</span><br><span class="line">Activate the web console with: systemctl enable --now cockpit.socket</span><br><span class="line">Last failed login: Tue Apr 23 09:24:05 EDT 2024 on pts/0</span><br><span class="line">There were 8 failed login attempts since the last successful login.</span><br><span class="line">Last login: Mon Mar 20 00:24:56 2023 from 10.4.11.100</span><br><span class="line"></span><br><span class="line">[root@10-4-220-100 ~]# </span><br></pre></td></tr></table></figure><h2 id="配置网络源仓库"><a href="#配置网络源仓库" class="headerlink" title="配置网络源仓库"></a>配置网络源仓库</h2><p><code>网络源仓库也是相当重要的</code>这是我们KVM创建虚拟机的软件仓库  可以远程之后<code>在Rocky上进行以下操作</code></p><ol><li>下载相关软件包</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y httpd*</span><br></pre></td></tr></table></figure><ol><li>将镜像挂载到/var/www/html/cdrom下面</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /var/www//html/cdrom -p</span><br><span class="line">mount /opt/rocky9.2.iso /var/www/html/cdrom</span><br></pre></td></tr></table></figure><ol><li>编辑cdrom目录权限</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/httpd/conf/httpd.conf359 &lt;Directory &quot;/var/www/html&quot;&gt;</span><br><span class="line">· 最后添加以下参数</span><br><span class="line">360         Require all granted</span><br><span class="line">361             Options Indexes FollowSymLinks</span><br><span class="line">362     AllowOverride ALL</span><br><span class="line">363 &lt;/Directory&gt;</span><br></pre></td></tr></table></figure><ol><li>重启服务 关闭防火墙</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable --now httpd;systemctl stop firewalld;setenforce 0</span><br></pre></td></tr></table></figure><ol><li>在浏览器上访问测试</li></ol><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240424104036246.png" alt="image-20240424104036246"></p><h2 id="配置管理桥接网卡"><a href="#配置管理桥接网卡" class="headerlink" title="配置管理桥接网卡"></a>配置管理桥接网卡</h2><p><code>现在我们需要做的是在Rocky上配置好KVM虚拟机需要桥接的网卡 使得Ubuntu可以连接到KVM虚拟机</code></p><h3 id="添加桥接网卡"><a href="#添加桥接网卡" class="headerlink" title="添加桥接网卡"></a>添加桥接网卡</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmcli c add type brigde ifname br0</span><br></pre></td></tr></table></figure><h3 id="将本地网卡连接至桥接网卡"><a href="#将本地网卡连接至桥接网卡" class="headerlink" title="将本地网卡连接至桥接网卡"></a>将本地网卡连接至桥接网卡</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmcli  c add type bridge-slave ifname `被桥接的网卡` master br0</span><br></pre></td></tr></table></figure><h3 id="编辑网卡IP地址"><a href="#编辑网卡IP地址" class="headerlink" title="编辑网卡IP地址"></a>编辑网卡IP地址</h3><ul><li>slave 本地网卡 <code>这里的bridge-slave-enp0s20f0u3u2.nmconnection</code>是我的本地网卡名称 每个人的可能不一样</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/NetworkManager/system-connections/bridge-slave-enp0s20f0u3u2.nmconnection</span><br><span class="line"> 9 [ethernet]</span><br><span class="line"> 10 method=auto  //将method模式改为auto   表示自动获取IP</span><br></pre></td></tr></table></figure><ul><li>bridge 桥接网卡</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/NetworkManager/system-connections/bridge-br0.nmconnection</span><br><span class="line"> 12 method=manual</span><br><span class="line"> 13 address1=10.4.220.100/24,10.4.220.1 //这里设置为题目要求的IP 23国赛为10.4.220.100</span><br></pre></td></tr></table></figure><h3 id="重启网卡"><a href="#重启网卡" class="headerlink" title="重启网卡"></a>重启网卡</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@10-4-220-100 ~]# nmcli c up ens160</span><br><span class="line">连接已成功激活（D-Bus 活动路径：/org/freedesktop/NetworkManager/ActiveConnection/10）</span><br><span class="line">[root@10-4-220-100 ~]# nmcli c up bridge-br0</span><br><span class="line">连接已成功激活（master waiting for slaves）（D-Bus 活动路径：/org/freedesktop/NetworkManager/ActiveConnection/11）</span><br></pre></td></tr></table></figure><h3 id="查看所有网卡信息"><a href="#查看所有网卡信息" class="headerlink" title="查看所有网卡信息"></a>查看所有网卡信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">br0：已连接 到 bridge-br0</span><br><span class="line">        &quot;br0&quot;</span><br><span class="line">        bridge, 00:E0:4C:36:23:31, 软件, mtu 1500</span><br><span class="line">        ip4 默认</span><br><span class="line">        inet4 10.4.220.100/24</span><br><span class="line">        route4 10.4.220.0/24 metric 425</span><br><span class="line">        route4 default via 10.4.220.1 metric 425</span><br><span class="line">        inet6 fe80::fe9b:d788:6ce:bd87/64</span><br><span class="line">        route6 fe80::/64 metric 1024</span><br><span class="line"></span><br><span class="line">lo：连接（外部） 到 lo</span><br><span class="line">        &quot;lo&quot;</span><br><span class="line">        loopback (unknown), 00:00:00:00:00:00, 软件, mtu 65536</span><br><span class="line">        inet4 127.0.0.1/8</span><br><span class="line">        inet6 ::1/128</span><br><span class="line">        route6 ::1/128 metric 256</span><br><span class="line"></span><br><span class="line">enp0s20f0u3u2：已连接 到 bridge-slave-enp0s20f0u3u2</span><br><span class="line">        &quot;Realtek RTL8152&quot;</span><br><span class="line">        ethernet (r8152), 00:E0:4C:36:23:31, 硬件, mtu 1500</span><br><span class="line">        主连接 br0   </span><br></pre></td></tr></table></figure><h2 id="创建KVM虚拟机"><a href="#创建KVM虚拟机" class="headerlink" title="创建KVM虚拟机"></a>创建KVM虚拟机</h2><p><code>现在就可以来创建虚拟机了</code> 最好还是在Ubuntu的默认终端下SSH Rocky</p><h3 id="下载相关服务软件"><a href="#下载相关服务软件" class="headerlink" title="下载相关服务软件"></a>下载相关服务软件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y libvirt* virt* bash-* qemu*</span><br></pre></td></tr></table></figure><h3 id="开放相关服务-关闭防火墙"><a href="#开放相关服务-关闭防火墙" class="headerlink" title="开放相关服务 关闭防火墙"></a>开放相关服务 关闭防火墙</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart libvirtd;systemctl stop firewalld;setenforce 0</span><br></pre></td></tr></table></figure><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">virt-install --name linux0 --ram 2048 --vcpus 2 --disk path=/var/lib/libvirt/images/linux0.qcow2,size=40 --os-variant auto --network bridge=br0 --cdrom /opt/rocky9.2.iso --graphics vnc,listen=0.0.0.0 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240424101820775.png" alt="image-20240424101820775"></p><p><code>等到这个界面的时候我们就可以打开Remmina了</code></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240424102031446.png" alt="image-20240424102031446"></p><ul><li>下面是连接成功的样子 <code>安装摘要的时候选择最小安装！！！</code></li></ul><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240424102123987.png" alt="image-20240424102123987"></p><h2 id="虚拟机的快照及批量创建"><a href="#虚拟机的快照及批量创建" class="headerlink" title="虚拟机的快照及批量创建"></a>虚拟机的快照及批量创建</h2><p><code>在KVM虚拟机上的第一步就是尝试与外界的互ping</code> 为了测试 我们在linux0上添加IP地址</p><ol><li>编辑好Linux0的网卡 尝试互ping</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@10-4-220-100 ~]# ping 10.4.220.101</span><br><span class="line">PING 10.4.220.101 (10.4.220.101) 56(84) 比特的数据。</span><br><span class="line">64 比特，来自 10.4.220.101: icmp_seq=1 ttl=64 时间=0.657 毫秒</span><br><span class="line">64 比特，来自 10.4.220.101: icmp_seq=2 ttl=64 时间=0.494 毫秒</span><br></pre></td></tr></table></figure><p><code>可以ping通 说明网桥的配置没有问题 接下来我们配置一下yum源</code></p><ul><li>指定软件仓库地址</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/yum.repos.d/*</span><br><span class="line">vi /etc/yum.repos.d/yum.repo</span><br><span class="line"></span><br><span class="line">[A]</span><br><span class="line">name=A</span><br><span class="line">baseurl=http://10.4.220.100/cdrom/AppStream</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[B]</span><br><span class="line">name=B</span><br><span class="line">baseurl=http://10.4.220.100/cdrom/BaseOS</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><ul><li>下载需要的服务</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y vim bind* net-tools* tar* unzip*</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240424104501638.png" alt="image-20240424104501638"></p><h3 id="创建快照"><a href="#创建快照" class="headerlink" title="创建快照"></a>创建快照</h3><p><code>现在下载好了需要的一些服务后 我们就可以创建快照来批量创建虚拟机了</code></p><ul><li>创建快照模板</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@10-4-220-100 ~]# virsh snapshot-create-as linux0 linux-snapshot</span><br><span class="line">已生成域快照 linux-snapshot</span><br></pre></td></tr></table></figure><ul><li>利用快照创建虚拟机</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">`利用快照创建虚拟机首先要关闭快照其虚拟机`</span><br><span class="line">virsh shutdown linux0  </span><br><span class="line">`现在就可以创建了`</span><br><span class="line">virt-clone --original linux0 --name linux1 --file /var/lib/libvirt/images/linux1.qcow2 --auto-clone </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240424105015273.png" alt="image-20240424105015273"></p><h3 id="查看虚拟机列表"><a href="#查看虚拟机列表" class="headerlink" title="查看虚拟机列表"></a>查看虚拟机列表</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@10-4-220-100 ~]# virsh list --all</span><br><span class="line"> Id   名称     状态</span><br><span class="line">---------------------</span><br><span class="line"> -    linux0   关闭</span><br><span class="line"> -    linux1   关闭</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重启虚拟机"><a href="#重启虚拟机" class="headerlink" title="重启虚拟机"></a>重启虚拟机</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@10-4-220-100 ~]# virsh start linux1</span><br><span class="line">域 &#x27;linux1&#x27; 已启动</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20240424105507057.png" alt="image-20240424105507057"></p><p><code>基本上这就是全部的工作了 只需要把剩余的虚拟机创建好就行了</code> 最后我们试着再次互ping测试连通信</p><ul><li>设置Linux1的IP地址为10.4.220.101</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">waitayaka@WaitAyaka:~/桌面$ ping 10.4.220.101</span><br><span class="line">PING 10.4.220.102 (10.4.220.102) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.4.220.101: icmp_seq=1 ttl=63 time=3.73 ms</span><br><span class="line">64 bytes from 10.4.220.101: icmp_seq=2 ttl=63 time=2.09 ms</span><br><span class="line">64 bytes from 10.4.220.101: icmp_seq=3 ttl=63 time=1.99 ms</span><br><span class="line">64 bytes from 10.4.220.101: icmp_seq=4 ttl=63 time=2.09 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> KVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络建设与运维 </tag>
            
            <tag> KVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FTP服务器的配置与管理</title>
      <link href="/2024/04/16/FTP%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2024/04/16/FTP%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>@<a href="文章内容仅仅只是我对FTP的理解！">TOC</a></p><h2 id="FTP简介"><a href="#FTP简介" class="headerlink" title="FTP简介"></a>FTP简介</h2><p>文件传输协议FTP（File Transfer FTP）作为网络共享文件的传输协议，在网络应用软件中具有广泛的应用。</p><p> <strong>FTP协议</strong></p><p>FTP是TCP/IP的协议簇协议之一，其主要功能是借助网络实现远距离主机间的文件传输。</p><h2 id="1-使用Vsftpd服务器"><a href="#1-使用Vsftpd服务器" class="headerlink" title="1.使用Vsftpd服务器"></a>1.使用Vsftpd服务器</h2><p>Vsftpd （Very Secure FTP）是linux系统的常用软件。</p><h3 id="1-1-Vsftpd的服务器的安装与启动"><a href="#1-1-Vsftpd的服务器的安装与启动" class="headerlink" title="1.1 Vsftpd的服务器的安装与启动"></a>1.1 Vsftpd的服务器的安装与启动</h3><p>Vsftpd在yum源中的名称就是叫做vsftpd</p><p>yum install -y vsftpd*  //*代表下载所有关于vsftpd的软件包</p><h3 id="1-2-Vsftpd服务器的用户类型"><a href="#1-2-Vsftpd服务器的用户类型" class="headerlink" title="1.2 Vsftpd服务器的用户类型"></a>1.2 Vsftpd服务器的用户类型</h3><p>Vsftpd的用户类型主要分为匿名用户、本地用户和虚拟用户。</p><p>（1）匿名用户：如果Vsftpd服务器提供匿名访问功能，默认的匿名访问用户为anonymous或ftp，密码为空，匿名用户登录后进入到工作目录是/var/ftp</p><p>（2）本地用户：本地用户信息存储在/etc/passwd文件中，本地用户输入用户名和密码后可登录vsftpd，并且直接进入该用户的宿主目录。</p><p>（3）虚拟用户：旨在vsftpd服务器中拥有账号，并且该账号只能用于文件传输服务的专有用户，也称guest用户。该类用户可以通过输入用户名和密码进行授权登录。</p><h2 id="2-Vsftpd服务器的测试"><a href="#2-Vsftpd服务器的测试" class="headerlink" title="2. Vsftpd服务器的测试"></a>2. Vsftpd服务器的测试</h2><p><strong>FTP服务器的运行模式基于服务器、客户端，服务器安装完Vsftpd软件包后，可以通过客户端进行测试。</strong></p><p>1.首先下载vsftpd与其相关的服务</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">yum install -y vsftpd* ftp*</span><br></pre></td></tr></table></figure><p>2.然后打开ftp服务的端口，使防火墙放行ftp服务</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=<span class="number">21</span>/tcp --per</span><br><span class="line">systemctl restart vsftpd firewalld</span><br></pre></td></tr></table></figure><p>3.在虚拟机上以匿名用户身份进行测试，使用ftp命令，后面输入本机的ip地址，用户名是ftp，密码是空，登录过程如下。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@linux2 ~]</span># ftp <span class="number">192.168</span>.<span class="number">123.102</span></span><br><span class="line">Connected <span class="selector-tag">to</span> <span class="number">192.168</span>.<span class="number">123.102</span> (<span class="number">192.168</span>.<span class="number">123.102</span>).</span><br><span class="line"><span class="number">220</span> (vsFTPd <span class="number">3.0</span>.<span class="number">2</span>)</span><br><span class="line">Name (<span class="number">192.168</span>.<span class="number">123.102</span><span class="selector-pseudo">:root</span>): ftp</span><br><span class="line"><span class="number">331</span> Please specify the password.</span><br><span class="line">Password:</span><br><span class="line"><span class="number">230</span> Login successful. </span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt;</span><br><span class="line">ftp&gt; ls</span><br></pre></td></tr></table></figure><p>以上命令中的192.168.123.102是vsftpd服务器的ip地址</p><p>终端打印信息“230 Login successful. ”说明登录成功</p><h2 id="3-FTP常用的命令"><a href="#3-FTP常用的命令" class="headerlink" title="3.FTP常用的命令"></a>3.FTP常用的命令</h2><div class="table-container"><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">ls</td><td style="text-align:left">查看服务器当前目录的文件</td></tr><tr><td style="text-align:left">mkdir 【目录名】</td><td style="text-align:left">在服务器新建目录</td></tr><tr><td style="text-align:left">put 文件名</td><td style="text-align:left">向服务器上传指定的一个文件</td></tr><tr><td style="text-align:left">mput  文件名列表</td><td style="text-align:left">向服务器上传多个文件</td></tr><tr><td style="text-align:left">chmod</td><td style="text-align:left">改变服务器中的文件权限</td></tr><tr><td style="text-align:left">？或help</td><td style="text-align:left">显示内部命令的帮助信息</td></tr><tr><td style="text-align:left">open 域名或IP地址</td><td style="text-align:left">建立于指定服务器的连接</td></tr><tr><td style="text-align:left">close</td><td style="text-align:left">终止远端的进程，返回命令状态</td></tr><tr><td style="text-align:left">bye或quit</td><td style="text-align:left">推出服务器</td></tr><tr><td style="text-align:left"></td></tr></tbody></table></div><h2 id="4-Vsftp服务器的配置文件"><a href="#4-Vsftp服务器的配置文件" class="headerlink" title="4.Vsftp服务器的配置文件"></a>4.Vsftp服务器的配置文件</h2><p>&#x9;配置基本的Vsftpd服务器比较简单，只需要正确安装了Vsftpd软件，直接启动Vsftpd并放行端口就行了，但是如果想要更进一步的搭建Vsftpd服务，那就要掌握Vsftpd服务器的配置文件。</p><div class="table-container"><table><thead><tr><th style="text-align:left">文件</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">/etc/vsftpd/vsftpd.conf</td><td style="text-align:left">Vsftpd服务器主配置文件</td></tr><tr><td style="text-align:left">/etc/vsftpd/ftpusers</td><td style="text-align:left">禁止访问Vsftp服务器的用户名单</td></tr><tr><td style="text-align:left">/etc/vsftpd/user_list</td><td style="text-align:left">指定用户能否访问FTP服务器取决于userlist_deny选项的设置</td></tr><tr><td style="text-align:left">/etc/vsftpd/chroot_list</td><td style="text-align:left">目录访问控制文件</td></tr></tbody></table></div><p>下面对这几个文件进行详细说明</p><h3 id="1-vsftpd-conf文件"><a href="#1-vsftpd-conf文件" class="headerlink" title="1.vsftpd.conf文件"></a>1.vsftpd.conf文件</h3><p>vsftpd.conf位于/etc/vsftpd目录下，与大多数配置文件一样，vsftpd.conf文件中以符号”#“开始注释信息，我们可以用Vim等工具对它进行修改。在Vsftpd中去掉注释，显示该文件的配置内容如下：</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@linux2</span> ~]# grep -v <span class="string">&quot;#&quot;</span> /etc/vsftpd/vsftpd.<span class="property">conf</span></span><br><span class="line">anonymous_enable=<span class="variable constant_">YES</span></span><br><span class="line">local_enable=<span class="variable constant_">YES</span></span><br><span class="line">write_enable=<span class="variable constant_">YES</span></span><br><span class="line">local_umask=<span class="number">022</span></span><br><span class="line">dirmessage_enable=<span class="variable constant_">YES</span></span><br><span class="line">xferlog_enable=<span class="variable constant_">YES</span></span><br><span class="line">connect_from_port_20=<span class="variable constant_">YES</span></span><br><span class="line">xferlog_std_format=<span class="variable constant_">YES</span></span><br><span class="line">listen=<span class="variable constant_">NO</span></span><br><span class="line">listen_ipv6=<span class="title class_">YESpam</span>_service_name=vsftpd</span><br><span class="line">userlist_enable=<span class="variable constant_">YES</span></span><br><span class="line">tcp_wrappers=<span class="variable constant_">YES</span></span><br></pre></td></tr></table></figure><p>下面对该文件中的常用选项进行介绍，合理使用这些选项是保障FTP安全稳定的前提</p><div class="table-container"><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">anonymous_enable</td><td style="text-align:left">设置是否允许匿名用户登录服务器</td></tr><tr><td style="text-align:left">local_enable</td><td style="text-align:left">设置是否允许本地用户登录服务器</td></tr><tr><td style="text-align:left">write_enable</td><td style="text-align:left">设置是否允许写操作</td></tr><tr><td style="text-align:left">local_umask</td><td style="text-align:left">设置本地用户创建文件的umask值</td></tr><tr><td style="text-align:left">anon*_upload_enable*</td><td style="text-align:left">设置是否允许匿名用户上传文件</td></tr><tr><td style="text-align:left">anon*_mkdir_write_enable*</td><td style="text-align:left">设置是否允许匿名用户建立目录</td></tr><tr><td style="text-align:left">xferlog_enable</td><td style="text-align:left">是否激活日志功能</td></tr><tr><td style="text-align:left">chown_uploads</td><td style="text-align:left">修改匿名用户上传文件的所有者</td></tr><tr><td style="text-align:left">chown_username=whoever</td><td style="text-align:left">启用chown_uploads=YES时，指定为主用户账户，whoever表示你的ftp用户</td></tr><tr><td style="text-align:left">chroot*_local_user*</td><td style="text-align:left">设置是否将所有用户限制在其主目录</td></tr><tr><td style="text-align:left">chroot*_list_enable*</td><td style="text-align:left">设置是否启用限制用户的名单</td></tr><tr><td style="text-align:left">chroot*_list_file*</td><td style="text-align:left">设置是否限制/排除主目录下的用户名单，限制/排除有chroot<em>local</em>user值决定</td></tr><tr><td style="text-align:left">allow*_writeable_choot*</td><td style="text-align:left">设置chroot目录的写权限</td></tr></tbody></table></div><h3 id="2-ftpusers文件"><a href="#2-ftpusers文件" class="headerlink" title="2.ftpusers文件"></a>2.ftpusers文件</h3><p>&#x9;/etc/vsftpd/ftpusers文件用于指定不能访问vsftp服务器的用户列表，此文件在格式中采用每个用户一行的形式，其中包含的用户通常是系统的超级用户和系统用户</p><h3 id="3-user-list文件"><a href="#3-user-list文件" class="headerlink" title="3.user_list文件"></a>3.user_list文件</h3><p>&#x9;/etc/vsftpd/user<em>list 文件也用于保留用户列表，指定的用户能否访问vsftp服务取决于userlistdeny选项的参数，当userlist_deny选项的参数=YES时，此文件中写入的所有用户都将无法登录vsftp服务，想都别想，但是当userlist_deny=No时，这些用户就起来了，那就表示只有这些用户能够访问vsftp服务，所以一定要注意这个选项的参数。非常重要。</em></p><p>如果要限制一些指定的本地用户不能访问FTP服务，则可以添加以下内容来做到：</p><blockquote><p>进入/etc/vaftpd/vsftpd.conf 末行添加</p><p>userlist_enable=YES</p><p>userlist_deny=YES</p><p>userlist<em>file=/etc/vsftpd/user</em>_list</p><p>进入/etc/vsftpd/user_list 添加你需要拒绝访问的本地用户&#x20;</p><p>toto (意为指定用户 每个指定用户单独占一行)</p></blockquote><p>如果需要指定几个本地用户才能访问FTP服务，则可以添加以下内容来做到：</p><blockquote><p>进入/etc/vaftpd/vsftpd.conf 末行添加</p><p>userlist_enable=YES</p><p>userlist_deny=NO</p><p>userlist<em>file=/etc/vsftpd/user</em>_list</p><p>进入/etc/vsftpd/user_list 添加你需要拒绝访问的本地用户</p><p>toto (意为指定用户 每个指定用户单独占一行)</p></blockquote><h3 id="4-chroot-list文件"><a href="#4-chroot-list文件" class="headerlink" title="4.chroot_list文件"></a>4.chroot_list文件</h3><p>&#x20; 默认情况下，匿名用户会被锁定在默认FTP目录中，而本地用户却可以访问自己主目录以外的内容，出于安全考虑，通过chroot_list文件可以限制用户只能访问其主目录，也可以实现使用不同哟ing胡不仅能访问自己的目录也可以访问主目录以外的内容。</p><p>&#x20; chroot<em>list文件设计chrootlocal</em>user和chroot*_list_enable两个选项*</p><p>&#x20; chroot*_list_file默认指向/etc/ sftpd/chroot_list*</p><p>&#x9;    chroot_list文件的功能有两个</p><ul><li>是限制用户名单中的用户只能在其主目录中</li></ul><!----><ul><li>名单中的用户不仅能访问自己的主目录，还能跳出主目录，访问其它的目录。</li></ul><blockquote><p>当chroot*_list_enable=YES时，chroot_list中的用户只能在本目录中*</p><p>当chroot*_list_enable=NO时，chroot_list中的目录可以访问除主目录以外的内容*</p></blockquote><h2 id="5-Vsftp服务器的使用"><a href="#5-Vsftp服务器的使用" class="headerlink" title="5.Vsftp服务器的使用"></a>5.Vsftp服务器的使用</h2><p>前面介绍了Vsftpd服务器的安装，启动及主要的配置文件，下面通过具体的实例来介绍该服务器的具体应用。</p><h3 id="1-匿名用户访问Vsfto服务器"><a href="#1-匿名用户访问Vsfto服务器" class="headerlink" title="1.匿名用户访问Vsfto服务器"></a>1.匿名用户访问Vsfto服务器</h3><p>本次实验环境为Centos7 服务器的IP地址为192.168.123.101 主机名为linux1</p><p>第一步：安装Vsftp服务及开启该服务</p><blockquote><p>yum install -y vsftpd<br>systemctl restart vsftpd</p></blockquote><p>使用ftp匿名用户登录，如下所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@linux2 ~]# ftp <span class="number">192.168</span><span class="number">.123</span><span class="number">.101</span></span><br><span class="line"><span class="title class_">Connected</span> to <span class="number">192.168</span><span class="number">.123</span><span class="number">.101</span> (<span class="number">192.168</span><span class="number">.123</span><span class="number">.101</span>).</span><br><span class="line"><span class="number">220</span> (vsFTPd <span class="number">3.0</span><span class="number">.2</span>)</span><br><span class="line"><span class="title class_">Name</span> (<span class="number">192.168</span><span class="number">.123</span><span class="number">.101</span>:root): ftp</span><br><span class="line"><span class="number">331</span> <span class="title class_">Please</span> specify the password.</span><br><span class="line"><span class="title class_">Password</span>:</span><br><span class="line"><span class="number">230</span> <span class="title class_">Login</span> successful.</span><br><span class="line"><span class="title class_">Remote</span> system type is <span class="variable constant_">UNIX</span>.</span><br><span class="line"><span class="title class_">Using</span> binary mode to transfer files.</span><br><span class="line">ftp&gt;</span><br><span class="line">ftp&gt; ls</span><br><span class="line"><span class="number">227</span> <span class="title class_">Entering</span> <span class="title class_">Passive</span> <span class="title class_">Mode</span> (<span class="number">192</span>,<span class="number">168</span>,<span class="number">123</span>,<span class="number">101</span>,<span class="number">101</span>,<span class="number">29</span>).</span><br><span class="line"><span class="number">150</span> <span class="title class_">Here</span> comes the directory listing.</span><br><span class="line">drwxr-xr-x    <span class="number">2</span> <span class="number">0</span>        <span class="number">0</span>               <span class="number">6</span> <span class="title class_">Oct</span> <span class="number">13</span>  <span class="number">2020</span> pub</span><br><span class="line"><span class="number">226</span> <span class="title class_">Directory</span> send <span class="variable constant_">OK</span>.</span><br></pre></td></tr></table></figure><p>登录成功，使用ls命令浏览默认的FTP目录 （/var/ftp）</p><blockquote><p>1、首先在FTP默认目录/var/pub中创建两个文本文件1.txt和2.txt</p><p>[root\@ayaka ~]# cd /var/ftp/pub/</p><p>[root\@ayaka pub]# touch 1.txt</p><p>[root\@ayaka pub]# touch 2.txt</p><p>[root\@ayaka pub]# ls<br>1.txt  2.txt</p><p>2、在客户端上进入/pub目录</p><p>ftp&gt; ls<br>227 Entering Passive Mode (192,168,123,101,75,103).<br>150 Here comes the directory listing.<br>-rw-r—r—    1 0        0               0 May 09 10:37 1.txt<br>-rw-r—r—    1 0        0               0 May 09 10:37 2.txt</p></blockquote><p>将Vsftpd服务器上文件下载到客户端</p><p>进入pub目录 使用get命令将文件1.txt与2.txt下载到当前目录下，下载成功的过程如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">220</span> (vsFTPd <span class="number">3.0</span><span class="number">.2</span>)</span><br><span class="line"><span class="title class_">Name</span> (<span class="number">192.168</span><span class="number">.123</span><span class="number">.101</span>:root): ftp</span><br><span class="line"><span class="number">331</span> <span class="title class_">Please</span> specify the password.</span><br><span class="line"><span class="title class_">Password</span>:</span><br><span class="line"><span class="number">230</span> <span class="title class_">Login</span> successful.</span><br><span class="line"><span class="title class_">Remote</span> system type is <span class="variable constant_">UNIX</span>.</span><br><span class="line"><span class="title class_">Using</span> binary mode to transfer files.</span><br><span class="line">ftp&gt; cd pub</span><br><span class="line"><span class="number">250</span> <span class="title class_">Directory</span> successfully changed.</span><br><span class="line">ftp&gt; ls</span><br><span class="line"><span class="number">227</span> <span class="title class_">Entering</span> <span class="title class_">Passive</span> <span class="title class_">Mode</span> (<span class="number">192</span>,<span class="number">168</span>,<span class="number">123</span>,<span class="number">101</span>,<span class="number">25</span>,<span class="number">132</span>).</span><br><span class="line"><span class="number">150</span> <span class="title class_">Here</span> comes the directory listing.</span><br><span class="line">-rw-r--r--    <span class="number">1</span> <span class="number">0</span>        <span class="number">0</span>              <span class="number">50</span> <span class="title class_">May</span> <span class="number">09</span> <span class="number">10</span>:<span class="number">54</span> <span class="number">1.</span>txt</span><br><span class="line">-rw-r--r--    <span class="number">1</span> <span class="number">0</span>        <span class="number">0</span>               <span class="number">0</span> <span class="title class_">May</span> <span class="number">09</span> <span class="number">10</span>:<span class="number">37</span> <span class="number">2.</span>txt</span><br><span class="line"><span class="number">226</span> <span class="title class_">Directory</span> send <span class="variable constant_">OK</span>.</span><br><span class="line">ftp&gt; !pwd</span><br><span class="line">/root</span><br><span class="line">ftp&gt; get <span class="number">1.</span>txt</span><br><span class="line"><span class="attr">local</span>: <span class="number">1.</span>txt <span class="attr">remote</span>: <span class="number">1.</span>txt</span><br><span class="line"><span class="number">227</span> <span class="title class_">Entering</span> <span class="title class_">Passive</span> <span class="title class_">Mode</span> (<span class="number">192</span>,<span class="number">168</span>,<span class="number">123</span>,<span class="number">101</span>,<span class="number">145</span>,<span class="number">74</span>).</span><br><span class="line"><span class="number">150</span> <span class="title class_">Opening</span> <span class="variable constant_">BINARY</span> mode data connection <span class="keyword">for</span> <span class="number">1.</span>txt (<span class="number">50</span> bytes).</span><br><span class="line"><span class="number">226</span> <span class="title class_">Transfer</span> complete.</span><br><span class="line"><span class="number">50</span> bytes received <span class="keyword">in</span> <span class="number">0.000134</span> secs (<span class="number">373.13</span> <span class="title class_">Kbytes</span>/sec)</span><br><span class="line">ftp&gt; !ls</span><br><span class="line"><span class="number">1</span>  <span class="number">1.</span>txt  anaconda-ks.<span class="property">cfg</span></span><br><span class="line">ftp&gt;</span><br></pre></td></tr></table></figure><p>测试在Vsftp服务器创建目录</p><blockquote><p>ftp&gt; mkdir toto<br>550 Permission denied.<br>ftp</p></blockquote><p>通过以上操作可以得出：在默认情况下，匿名用户一般只有从服务器服务器下载文件的权限，不能上传文件或进行其它操作</p><p>那如何让他变得有权限呢，接下来我们来配置vsftpd使得有上传文件或进行其它操作</p><p>更改vsftpd.conf文件，开启匿名用户上传，创建目录权限</p><p><strong>将如下两个参数取消注释</strong></p><blockquote><p>29 #anon_upload_enable=YES  //允许匿名文件上传文件</p><p>34 #anon_mkdir_write_enable=YES  //允许匿名用户建立目录</p></blockquote><p>取消注释后保存并退出 重启vsftpd服务让它生效</p><blockquote><p>systemctl restart vsftpd</p></blockquote><p>创建匿名用户上传目录</p><p>需要在/var/ftp目录下创建一个目录，修改目录的权限，让匿名用户具有写权限</p><blockquote><p>[root\@ayaka pub]# mkdir /var/ftp/hub<br>[root\@ayaka pub]# chmod o+w /var/ftp/hub</p></blockquote><p>上传目录</p><p>使用put命令把本地文件上传到FTP服务器上，具体过程如下。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@linux2 ~]# ftp <span class="number">192.168</span><span class="number">.123</span><span class="number">.101</span></span><br><span class="line"><span class="title class_">Connected</span> to <span class="number">192.168</span><span class="number">.123</span><span class="number">.101</span> (<span class="number">192.168</span><span class="number">.123</span><span class="number">.101</span>).</span><br><span class="line"><span class="number">220</span> (vsFTPd <span class="number">3.0</span><span class="number">.2</span>)</span><br><span class="line"><span class="title class_">Name</span> (<span class="number">192.168</span><span class="number">.123</span><span class="number">.101</span>:root): ftp</span><br><span class="line"><span class="number">331</span> <span class="title class_">Please</span> specify the password.</span><br><span class="line"><span class="title class_">Password</span>:</span><br><span class="line"><span class="number">230</span> <span class="title class_">Login</span> successful.</span><br><span class="line"><span class="title class_">Remote</span> system type is <span class="variable constant_">UNIX</span>.</span><br><span class="line"><span class="title class_">Using</span> binary mode to transfer files.</span><br><span class="line">ftp&gt; cd hub        <span class="comment">//进入目录hub </span></span><br><span class="line"><span class="number">250</span> <span class="title class_">Directory</span> successfully changed.</span><br><span class="line">ftp&gt; !ls      <span class="comment">//执行本机Shell命令，显示当前内容 </span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.</span>txt  anaconda-ks.<span class="property">cfg</span>  file1.<span class="property">txt</span></span><br><span class="line">ftp&gt; put <span class="number">1</span>       <span class="comment">//上传文件1</span></span><br><span class="line"><span class="attr">local</span>: <span class="number">1</span> <span class="attr">remote</span>: <span class="number">1</span></span><br><span class="line"><span class="number">227</span> <span class="title class_">Entering</span> <span class="title class_">Passive</span> <span class="title class_">Mode</span> (<span class="number">192</span>,<span class="number">168</span>,<span class="number">123</span>,<span class="number">101</span>,<span class="number">176</span>,<span class="number">227</span>).</span><br><span class="line"><span class="number">150</span> <span class="title class_">Ok</span> to send data.</span><br><span class="line"><span class="number">226</span> <span class="title class_">Transfer</span> complete.</span><br><span class="line"><span class="number">1664</span> bytes sent <span class="keyword">in</span> <span class="number">0.000814</span> secs (<span class="number">2044.23</span> <span class="title class_">Kbytes</span>/sec)</span><br><span class="line">ftp&gt; ls -l          <span class="comment">//查看hub目录中的文件列表</span></span><br><span class="line"><span class="number">227</span> <span class="title class_">Entering</span> <span class="title class_">Passive</span> <span class="title class_">Mode</span> (<span class="number">192</span>,<span class="number">168</span>,<span class="number">123</span>,<span class="number">101</span>,<span class="number">85</span>,<span class="number">50</span>).</span><br><span class="line"><span class="number">150</span> <span class="title class_">Here</span> comes the directory listing.</span><br><span class="line">-rw-------    <span class="number">1</span> <span class="number">14</span>       <span class="number">50</span>           <span class="number">1664</span> <span class="title class_">May</span> <span class="number">09</span> <span class="number">11</span>:<span class="number">26</span> <span class="number">1</span></span><br><span class="line"><span class="number">226</span> <span class="title class_">Directory</span> send <span class="variable constant_">OK</span>.</span><br><span class="line">ftp&gt; mkdir tomato      <span class="comment">//创建目录</span></span><br><span class="line"><span class="number">257</span> <span class="string">&quot;/hub/tomato&quot;</span> created        <span class="comment">//创建目录成功</span></span><br><span class="line">ftp&gt; ls</span><br><span class="line"><span class="number">227</span> <span class="title class_">Entering</span> <span class="title class_">Passive</span> <span class="title class_">Mode</span> (<span class="number">192</span>,<span class="number">168</span>,<span class="number">123</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">18</span>).</span><br><span class="line"><span class="number">150</span> <span class="title class_">Here</span> comes the directory listing.</span><br><span class="line">-rw-------    <span class="number">1</span> <span class="number">14</span>       <span class="number">50</span>           <span class="number">1664</span> <span class="title class_">May</span> <span class="number">09</span> <span class="number">11</span>:<span class="number">26</span> <span class="number">1</span></span><br><span class="line">drwx------    <span class="number">2</span> <span class="number">14</span>       <span class="number">50</span>              <span class="number">6</span> <span class="title class_">May</span> <span class="number">09</span> <span class="number">11</span>:<span class="number">35</span> tomato</span><br><span class="line"><span class="number">226</span> <span class="title class_">Directory</span> send <span class="variable constant_">OK</span>.</span><br><span class="line">ftp&gt; </span><br></pre></td></tr></table></figure><h3 id="2-本地用户访问Vsftp服务器"><a href="#2-本地用户访问Vsftp服务器" class="headerlink" title="2.本地用户访问Vsftp服务器"></a>2.本地用户访问Vsftp服务器</h3><p>本地用户是在FTP服务器上拥有用户账户的用户，相当于FTP服务器中的真实实际用户，其通过输入自己的账号和口令来进行授权登录，当用户成功登录服务器后，其登录目录为用户的主目录，用户的权限对该主目录的操作权限，可以下载也可以上传文件。</p><p>下面我们将用实例来介绍本地用户登录服务器下载，上传文件的过程。</p><p>本地用户访问Vsftp服务器，本例Vsftp服务器的ip地址为192.168.123.101 客户端主机名为Client</p><p>Vsftp服务器建立用户ftpuser，并在用户的家目录建立文件toto和yoyo 命令如下</p><blockquote><p>[root\@ayaka pub]# useradd ftpuser</p><p>[root\@ayaka pub]# echo “123” | passwd —stdin ftpuser   //设置ftpuser的密码为123</p><p>[root\@ayaka pub]# su - ftpuser                //登录用户ftpuser</p><p>[ftpuser\@ayaka ~]$ touch toto.txt</p><p>[ftpuser\@ayaka ~]$ touch yoyo.txt</p></blockquote><p>使用本地用户登录Vsftpd服务器后，其登录目录为用户的主目录/home/ftpuser，具体过程如下</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span>root@linux2 ~<span class="punctuation">]</span># ftp <span class="number">192.168</span><span class="number">.123</span><span class="number">.102</span></span><br><span class="line">Connected to <span class="number">192.168</span><span class="number">.123</span><span class="number">.102</span> (<span class="number">192.168</span><span class="number">.123</span><span class="number">.102</span>).</span><br><span class="line"><span class="number">220</span> (vsFTPd <span class="number">3.0</span><span class="number">.2</span>)</span><br><span class="line">Name (<span class="number">192.168</span><span class="number">.123</span><span class="number">.102</span><span class="punctuation">:</span>root)<span class="punctuation">:</span> ftpuser</span><br><span class="line"><span class="number">331</span> Please specify the password.</span><br><span class="line">Password<span class="punctuation">:</span></span><br><span class="line"><span class="number">530</span> Login incorrect.</span><br><span class="line">Login failed.</span><br><span class="line">ftp&gt; ^Z</span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span>+  已停止               ftp <span class="number">192.168</span><span class="number">.123</span><span class="number">.102</span></span><br><span class="line"><span class="punctuation">[</span>root@linux2 ~<span class="punctuation">]</span>#</span><br><span class="line"><span class="punctuation">[</span>root@linux2 ~<span class="punctuation">]</span># ftp <span class="number">192.168</span><span class="number">.123</span><span class="number">.101</span></span><br><span class="line">Connected to <span class="number">192.168</span><span class="number">.123</span><span class="number">.101</span> (<span class="number">192.168</span><span class="number">.123</span><span class="number">.101</span>).</span><br><span class="line"><span class="number">220</span> (vsFTPd <span class="number">3.0</span><span class="number">.2</span>)</span><br><span class="line">Name (<span class="number">192.168</span><span class="number">.123</span><span class="number">.101</span><span class="punctuation">:</span>root)<span class="punctuation">:</span> ftpuser</span><br><span class="line"><span class="number">331</span> Please specify the password.</span><br><span class="line">Password<span class="punctuation">:</span></span><br><span class="line"><span class="number">230</span> Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls</span><br><span class="line"><span class="number">227</span> Entering Passive Mode (<span class="number">192</span><span class="punctuation">,</span><span class="number">168</span><span class="punctuation">,</span><span class="number">123</span><span class="punctuation">,</span><span class="number">101</span><span class="punctuation">,</span><span class="number">56</span><span class="punctuation">,</span><span class="number">176</span>).</span><br><span class="line"><span class="number">150</span> Here comes the directory listing.</span><br><span class="line">-rw-rw-r--    <span class="number">1</span> <span class="number">1000</span>     <span class="number">1000</span>            <span class="number">0</span> May <span class="number">09</span> <span class="number">11</span><span class="punctuation">:</span><span class="number">44</span> toto.txt</span><br><span class="line">-rw-rw-r--    <span class="number">1</span> <span class="number">1000</span>     <span class="number">1000</span>            <span class="number">0</span> May <span class="number">09</span> <span class="number">11</span><span class="punctuation">:</span><span class="number">44</span> yoyo.txt</span><br><span class="line"><span class="number">226</span> Directory send OK.</span><br><span class="line">ftp&gt; pwd</span><br><span class="line"><span class="number">257</span> <span class="string">&quot;/home/ftpuser&quot;</span></span><br><span class="line">ftp&gt;</span><br></pre></td></tr></table></figure><p>创建目录</p><p>用户ftpuser创建目录tomato，具体操作如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ftp&gt; mkdir tomato</span><br><span class="line"><span class="number">257</span> <span class="string">&quot;/home/ftpuser/tomato&quot;</span> created</span><br><span class="line">ftp&gt; ls</span><br><span class="line"><span class="number">227</span> <span class="title class_">Entering</span> <span class="title class_">Passive</span> <span class="title class_">Mode</span> (<span class="number">192</span>,<span class="number">168</span>,<span class="number">123</span>,<span class="number">101</span>,<span class="number">244</span>,<span class="number">9</span>).</span><br><span class="line"><span class="number">150</span> <span class="title class_">Here</span> comes the directory listing.</span><br><span class="line">drwxr-xr-x    <span class="number">2</span> <span class="number">1000</span>     <span class="number">1000</span>            <span class="number">6</span> <span class="title class_">May</span> <span class="number">09</span> <span class="number">11</span>:<span class="number">52</span> tomato</span><br><span class="line">-rw-rw-r--    <span class="number">1</span> <span class="number">1000</span>     <span class="number">1000</span>            <span class="number">0</span> <span class="title class_">May</span> <span class="number">09</span> <span class="number">11</span>:<span class="number">44</span> toto.<span class="property">txt</span></span><br><span class="line">-rw-rw-r--    <span class="number">1</span> <span class="number">1000</span>     <span class="number">1000</span>            <span class="number">0</span> <span class="title class_">May</span> <span class="number">09</span> <span class="number">11</span>:<span class="number">44</span> yoyo.<span class="property">txt</span></span><br><span class="line"><span class="number">226</span> <span class="title class_">Directory</span> send <span class="variable constant_">OK</span>.</span><br><span class="line">ftp&gt;</span><br></pre></td></tr></table></figure><p>上传本地文件</p><p>用户ftpuser上传本地文件到服务器指定目录，具体操作如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ftp&gt; !ls -l</span><br><span class="line">总用量 <span class="number">16</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">1664</span> <span class="number">10</span>月 <span class="number">23</span> <span class="number">2020</span> <span class="number">1</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root   <span class="number">50</span> <span class="number">5</span>月   <span class="number">9</span> <span class="number">18</span>:<span class="number">56</span> <span class="number">1.</span>txt</span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">1295</span> <span class="number">5</span>月   <span class="number">7</span> <span class="number">19</span>:<span class="number">16</span> anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root    <span class="number">7</span> <span class="number">5</span>月   <span class="number">9</span> <span class="number">19</span>:<span class="number">20</span> file1.txt</span><br><span class="line">ftp&gt; !pwd</span><br><span class="line">/root</span><br><span class="line">ftp&gt; put anaconda-ks.cfg        //上传本地文件</span><br><span class="line">local: anaconda-ks.cfg remote: anaconda-ks.cfg</span><br><span class="line"><span class="number">227</span> Entering Passive Mode (<span class="number">192</span>,<span class="number">168</span>,<span class="number">123</span>,<span class="number">101</span>,<span class="number">101</span>,<span class="number">125</span>).</span><br><span class="line"><span class="number">150</span> Ok to send data.</span><br><span class="line"><span class="number">226</span> Transfer complete.</span><br><span class="line"><span class="number">1295</span> <span class="built_in">bytes</span> sent <span class="keyword">in</span> <span class="number">0.00108</span> secs (<span class="number">1194.65</span> Kbytes/sec)</span><br><span class="line">ftp&gt; ls -l        //浏览远程目录，验证上传文件是否为本地文件</span><br><span class="line"><span class="number">227</span> Entering Passive Mode (<span class="number">192</span>,<span class="number">168</span>,<span class="number">123</span>,<span class="number">101</span>,<span class="number">149</span>,<span class="number">213</span>).</span><br><span class="line"><span class="number">150</span> Here comes the directory listing.</span><br><span class="line">-rw-r--r--    <span class="number">1</span> <span class="number">1000</span>     <span class="number">1000</span>         <span class="number">1295</span> May 09 <span class="number">11</span>:<span class="number">55</span> anaconda-ks.cfg</span><br><span class="line">drwxr-xr-x    <span class="number">2</span> <span class="number">1000</span>     <span class="number">1000</span>            <span class="number">6</span> May 09 <span class="number">11</span>:<span class="number">52</span> tomato</span><br><span class="line">-rw-rw-r--    <span class="number">1</span> <span class="number">1000</span>     <span class="number">1000</span>            <span class="number">0</span> May 09 <span class="number">11</span>:<span class="number">44</span> toto.txt</span><br><span class="line">-rw-rw-r--    <span class="number">1</span> <span class="number">1000</span>     <span class="number">1000</span>            <span class="number">0</span> May 09 <span class="number">11</span>:<span class="number">44</span> yoyo.txt</span><br><span class="line"><span class="number">226</span> Directory send OK.</span><br><span class="line">ftp&gt;</span><br></pre></td></tr></table></figure><p>下载服务器文件到本地</p><p>用ftpuser下载文件toto到本地当前目录下，下载文件yoyo到本地目录/tmp下，并且重命名为toto.bak 具体操作如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ftp&gt; get toto</span><br><span class="line"><span class="attr">local</span>: toto <span class="attr">remote</span>: toto</span><br><span class="line"><span class="number">227</span> <span class="title class_">Entering</span> <span class="title class_">Passive</span> <span class="title class_">Mode</span> (<span class="number">192</span>,<span class="number">168</span>,<span class="number">123</span>,<span class="number">101</span>,<span class="number">206</span>,<span class="number">168</span>).</span><br><span class="line"><span class="number">550</span> <span class="title class_">Failed</span> to open file.</span><br><span class="line">ftp&gt; ls</span><br><span class="line"><span class="number">227</span> <span class="title class_">Entering</span> <span class="title class_">Passive</span> <span class="title class_">Mode</span> (<span class="number">192</span>,<span class="number">168</span>,<span class="number">123</span>,<span class="number">101</span>,<span class="number">98</span>,<span class="number">221</span>).</span><br><span class="line"><span class="number">150</span> <span class="title class_">Here</span> comes the directory listing.</span><br><span class="line">-rw-r--r--    <span class="number">1</span> <span class="number">1000</span>     <span class="number">1000</span>         <span class="number">1295</span> <span class="title class_">May</span> <span class="number">09</span> <span class="number">11</span>:<span class="number">55</span> anaconda-ks.<span class="property">cfg</span></span><br><span class="line">drwxr-xr-x    <span class="number">2</span> <span class="number">1000</span>     <span class="number">1000</span>            <span class="number">6</span> <span class="title class_">May</span> <span class="number">09</span> <span class="number">11</span>:<span class="number">52</span> tomato</span><br><span class="line">-rw-rw-r--    <span class="number">1</span> <span class="number">1000</span>     <span class="number">1000</span>            <span class="number">0</span> <span class="title class_">May</span> <span class="number">09</span> <span class="number">11</span>:<span class="number">44</span> toto.<span class="property">txt</span></span><br><span class="line">-rw-rw-r--    <span class="number">1</span> <span class="number">1000</span>     <span class="number">1000</span>            <span class="number">0</span> <span class="title class_">May</span> <span class="number">09</span> <span class="number">11</span>:<span class="number">44</span> yoyo.<span class="property">txt</span></span><br><span class="line"><span class="number">226</span> <span class="title class_">Directory</span> send <span class="variable constant_">OK</span>.</span><br><span class="line">ftp&gt; get toto.<span class="property">txt</span>           <span class="comment">//下载文件到本地目录 </span></span><br><span class="line"><span class="attr">local</span>: toto.<span class="property">txt</span> <span class="attr">remote</span>: toto.<span class="property">txt</span></span><br><span class="line"><span class="number">227</span> <span class="title class_">Entering</span> <span class="title class_">Passive</span> <span class="title class_">Mode</span> (<span class="number">192</span>,<span class="number">168</span>,<span class="number">123</span>,<span class="number">101</span>,<span class="number">46</span>,<span class="number">209</span>).</span><br><span class="line"><span class="number">150</span> <span class="title class_">Opening</span> <span class="variable constant_">BINARY</span> mode data connection <span class="keyword">for</span> toto.<span class="property">txt</span> (<span class="number">0</span> bytes).</span><br><span class="line"><span class="number">226</span> <span class="title class_">Transfer</span> complete.</span><br><span class="line">ftp&gt; !ls -l          <span class="comment">//浏览本地目录，验证下载文件操作是否成功</span></span><br><span class="line">总用量 <span class="number">16</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">1664</span> <span class="number">10</span>月 <span class="number">23</span> <span class="number">2020</span> <span class="number">1</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root   <span class="number">50</span> <span class="number">5</span>月   <span class="number">9</span> <span class="number">18</span>:<span class="number">56</span> <span class="number">1.</span>txt</span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">1295</span> <span class="number">5</span>月   <span class="number">7</span> <span class="number">19</span>:<span class="number">16</span> anaconda-ks.<span class="property">cfg</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root    <span class="number">7</span> <span class="number">5</span>月   <span class="number">9</span> <span class="number">19</span>:<span class="number">20</span> file1.<span class="property">txt</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root    <span class="number">0</span> <span class="number">5</span>月   <span class="number">9</span> <span class="number">19</span>:<span class="number">59</span> toto.<span class="property">txt</span></span><br><span class="line"><span class="comment">// 下载文件yoyo.txt 到 本地目录/tmp下 并重命名为yoyo.bak</span></span><br><span class="line">tp&gt; get yoyo.<span class="property">txt</span> /tmp/yoyo.<span class="property">bak</span></span><br><span class="line"><span class="attr">local</span>: <span class="regexp">/tmp/y</span>oyo.<span class="property">bak</span> <span class="attr">remote</span>: yoyo.<span class="property">txt</span></span><br><span class="line"><span class="number">227</span> <span class="title class_">Entering</span> <span class="title class_">Passive</span> <span class="title class_">Mode</span> (<span class="number">192</span>,<span class="number">168</span>,<span class="number">123</span>,<span class="number">101</span>,<span class="number">46</span>,<span class="number">136</span>).</span><br><span class="line"><span class="number">150</span> <span class="title class_">Opening</span> <span class="variable constant_">BINARY</span> mode data connection <span class="keyword">for</span> yoyo.<span class="property">txt</span> (<span class="number">0</span> bytes).</span><br><span class="line"><span class="number">226</span> <span class="title class_">Transfer</span> complete.</span><br><span class="line">ftp&gt; lcd /tmp   进入本地目录/tmp </span><br><span class="line"><span class="title class_">Local</span> directory now /tmp</span><br><span class="line">ftp&gt; !ls   <span class="comment">//浏览验证本地目录是否有yoyo.bak </span></span><br><span class="line">ks-script-e7_otA                                                         yoyo.<span class="property">bak</span></span><br><span class="line">systemd-private-7da9c4fa89d64f18a66b1cf3053c3ff6-chronyd.<span class="property">service</span>-<span class="title class_">JoFutU</span>  yum.<span class="property">log</span></span><br><span class="line">vmware-root_797-<span class="number">4257069498</span></span><br><span class="line">ftp&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> FTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络建设与运维 </tag>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible自动化运维服务器的部署</title>
      <link href="/2024/04/16/Ansible%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
      <url>/2024/04/16/Ansible%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="Ansible自动化运维"><a href="#Ansible自动化运维" class="headerlink" title="Ansible自动化运维"></a>Ansible自动化运维</h1><h2 id="人工运维时代"><a href="#人工运维时代" class="headerlink" title="人工运维时代"></a>人工运维时代</h2><p>运维人员早期需要维护数量众多的机器，因此需要执行反复，重复的劳动力。很多机器需要部署相同的服务或是执行相同的命令，还得反复的登录不同的机器。</p><h2 id="自动化运维时代"><a href="#自动化运维时代" class="headerlink" title="自动化运维时代"></a>自动化运维时代</h2><p>早期运维人员会结合ssh免密登录和shell脚本来完成自动化的部署操作。</p><p>系统管理员早期面临的问题主要是，配置管理系统，远程执行命令，批量安装服务，启停服务等。</p><p>后来也就诞生了众多开源的软件，自动化运维软件。</p><ul><li>fabric</li><li>puppet</li><li>saltstack</li><li>chef</li><li>Ansible  </li></ul><h2 id="自动化运维趋势"><a href="#自动化运维趋势" class="headerlink" title="自动化运维趋势"></a>自动化运维趋势</h2><p>人肉运维 &gt; 人力运维 &gt; 自动化运维 &gt; 数据化运维 &gt; 可视化运维 &gt; AI智能运维</p><h2 id="自动化运维的好处"><a href="#自动化运维的好处" class="headerlink" title="自动化运维的好处"></a>自动化运维的好处</h2><ul><li>提高工作效率吧 减少重复性的劳动新操作</li><li>大大的减少了人为出错的可能性</li><li>ansible支持数据化管理，数据化追源，找到问题的源点</li></ul><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20231107201445823.png" alt="image-20231107201445823" style="zoom:25%;"></p><h1 id="ansible介绍"><a href="#ansible介绍" class="headerlink" title="ansible介绍"></a>ansible介绍</h1><p>ansible是一个同时管理多个远程主机的软件，必须是任意可以同股票ssh登录的机器</p><ul><li>远程虚拟机</li><li>物理机</li><li>也可以直接管理本地机器</li></ul><p>ansible通过ssh协议实现了，管理节点（老板），被管理节点（员工）的通信。</p><p>只要是通过ssh协议登录的主机，就可以完成ansible自动化部署操作</p><ul><li>批量文件分发</li><li>批量数据复制</li><li>批量数据修改、删除</li><li>批量自动化安装软件服务</li><li>批量服务启动停止</li><li>脚本话，自动化批量服务器部署</li></ul><h2 id="ansible的特点"><a href="#ansible的特点" class="headerlink" title="ansible的特点"></a>ansible的特点</h2><p>ansible的编排引擎可以出色的完成各种任务配置管理，ansible在流程控制，资源部署等方便很强大，并且ansible无需安装客户端软件，管理简洁，使用yaml配置文件语法，功能强大，便于维护。</p><p>ansible基于python语言开发的，主要由python的两个ssh处理模块，paramiko，以及PyYAML模块</p><ul><li>安装部署简单</li><li>管理主机边界，支持多台主机并行管理</li><li>无需安装被管理节点的客户端 （no agent），且无需占用客户端的其它端口，仅仅使用ssh服务即可</li><li>不仅仅支持python，还支持其它语言的二次开发</li><li>不用root用户也可以执行，降低系统权限</li></ul><h2 id="Ansible实践部署"><a href="#Ansible实践部署" class="headerlink" title="Ansible实践部署"></a>Ansible实践部署</h2><h3 id="准备好虚拟机"><a href="#准备好虚拟机" class="headerlink" title="准备好虚拟机"></a>准备好虚拟机</h3><p>三个虚拟机 一个为ansible server 两个为客户端</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rocky1  10.10.10.101Rocky1.skills.com.管理机器（安装了ansible的服务端）</span><br><span class="line">Rocky2  10.10.10.102Rocky2.skills.com.被管理机器（配置好ssh服务，以及关闭防火墙）</span><br><span class="line">Rocky3  10.10.10.103Rocky3.skills.com.被管理机器</span><br></pre></td></tr></table></figure><h2 id="准备ansible管理机器"><a href="#准备ansible管理机器" class="headerlink" title="准备ansible管理机器"></a>准备ansible管理机器</h2><p>（1）安装ansible管理工具</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Rocky1 ~]# yum install -y ansible* libselinux</span><br></pre></td></tr></table></figure><p>（2）查看ansible的版本</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">ansible --version</span><br></pre></td></tr></table></figure><h3 id="准备ansible被管理机器-（客户端）"><a href="#准备ansible被管理机器-（客户端）" class="headerlink" title="准备ansible被管理机器 （客户端）"></a>准备ansible被管理机器 （客户端）</h3><p>（1）安装一下软件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Rocky2 ~]# yum install -y ansible* libselinux*</span><br><span class="line">[root@Rocky3 ~]#  yum install -y ansible* libselinux*</span><br></pre></td></tr></table></figure><h2 id="Ansible管理方式"><a href="#Ansible管理方式" class="headerlink" title="Ansible管理方式"></a>Ansible管理方式</h2><p>ansible批量管理主机的方式主要有两种</p><ul><li>传统的输入密钥验证</li><li>密钥管理</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">配置好ansible的配置文件，添加被管理主机的ip地址，或者主机名</span><br><span class="line"><span class="number">1.</span> 备份现有的配置文件</span><br><span class="line"><span class="meta"># cp /etc/ansible/hosts&#123;,.ori&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># ls /etc/ansible/</span></span><br><span class="line">ansible.cfg  hosts  hosts.ori  roles</span><br><span class="line"><span class="number">2.</span> 添加被管理主机的IP地址</span><br><span class="line">[root@Rocky1 ~]<span class="meta"># vim /etc/ansible/hosts <span class="comment">//在末行添加以下内容</span></span></span><br><span class="line">[client]</span><br><span class="line"><span class="number">10.10</span><span class="number">.10</span><span class="number">.102</span></span><br><span class="line"><span class="number">10.10</span><span class="number">.10</span><span class="number">.103</span></span><br></pre></td></tr></table></figure><h3 id="SSH密码认证方式管理及其"><a href="#SSH密码认证方式管理及其" class="headerlink" title="SSH密码认证方式管理及其"></a>SSH密码认证方式管理及其</h3><p>ansible是直接利用linux本地的ssh服务，以及一些远程的ssh操作们一般情况下客户端的ssh服务都是默认开启的，无需额外配置</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>在Rocky1上执行如下命令  </span><br><span class="line">-m 指定功能模块  </span><br><span class="line">-a 需要执行的指定参数  </span><br><span class="line">-k 询问连接密码</span><br><span class="line">-u 指定远程主机以哪个用户去运行</span><br><span class="line">在Rocky1机器上，告诉其它被管理的机器，你要执行什么命令，以及用什么用户去执行</span><br><span class="line">ansible 主机列表 -m command -a <span class="string">&#x27;hostname&#x27;</span> -k -u root</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>如下操作一般会出现问题，需要手动SSH对主机进行一次连接，即可使用ansible命令操作</span><br><span class="line"></span><br><span class="line">[<span class="meta">root@Rocky1 ~</span>]<span class="meta"># ssh 10.10.10.102</span></span><br><span class="line"><span class="function">Are you sure you want to <span class="keyword">continue</span> <span class="title">connecting</span> (<span class="params">yes/no/[fingerprint]</span>)? yes</span></span><br><span class="line"><span class="function">root@10.10.10.102&#x27;s password: </span></span><br><span class="line"><span class="function">Last login: Mon Jan  8 11:42:42 2024 <span class="keyword">from</span> 192.168.100.101</span></span><br><span class="line"><span class="function">[root@Rocky2 ~]# </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">[root@Rocky1 ~]# ssh 10.10.10.103</span></span><br><span class="line"><span class="function">root@10.10.10.103&#x27;s password: </span></span><br><span class="line"><span class="function">[root@Rocky3 ~]#</span></span><br><span class="line"><span class="function">3.这个时候我们再执行刚刚那个命令</span></span><br><span class="line"><span class="function"># ansible client -m command -a &#x27;hostname&#x27; -k -u root <span class="comment">//让两个被管理的机器，执行我们想要的结果</span></span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20231108115816845.png" alt="image-20231108115816845"></p><ul><li>所以我们需要添加客户端机器的密钥 </li></ul><h2 id="配置免密登录"><a href="#配置免密登录" class="headerlink" title="配置免密登录"></a>配置免密登录</h2><p>每次执行ansible的命令的时候，都需要输入ssh的认证密码，也就是root密码，如果不同的主机密码不一致，那你还得输入多次才行，因此我们可以配置如下的快捷登录方式</p><h3 id="1-ansible自带的密码认证参数"><a href="#1-ansible自带的密码认证参数" class="headerlink" title="1.ansible自带的密码认证参数"></a>1.ansible自带的密码认证参数</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">可以再 /etc/ansible/hosts文件中，定义好密码即可实现快速的认证，远程管理主机</span><br><span class="line"></span><br><span class="line">参数</span><br><span class="line">ansible_host  主机地址</span><br><span class="line">ansible-port  端口，默认端口是<span class="number">22</span></span><br><span class="line">ansible_user  认证的用户</span><br><span class="line">ansible_ssh_pass 用户认证的密码</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>将/etc/ansible/hosts文件下 添加以下内容 来快速实现快速的认证</span><br><span class="line"><span class="meta"># vim /etc/ansible/hosts</span></span><br><span class="line">[<span class="meta">client</span>]</span><br><span class="line"><span class="number">192.168</span><span class="number">.123</span><span class="number">.102</span> ansible_user=root ansible_ssh_pass=<span class="number">1</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.123</span><span class="number">.103</span> ansible_user=root ansible_ssh_pass=<span class="number">1</span></span><br><span class="line"><span class="meta"># 保存并退出 </span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>使用以下命令执行命令看看是否可以不需要密码</span><br><span class="line">[<span class="meta">root@Rocky1 ~</span>]<span class="meta"># ansible client -m command -a &#x27;hostname&#x27;   //将-k -u root 取消 </span></span><br><span class="line"><span class="number">192.168</span><span class="number">.123</span><span class="number">.103</span> | CHANGED | rc=<span class="number">0</span> &gt;&gt;</span><br><span class="line">Rocky3.skills.com</span><br><span class="line"><span class="number">192.168</span><span class="number">.123</span><span class="number">.102</span> | CHANGED | rc=<span class="number">0</span> &gt;&gt;</span><br><span class="line">Rocky2</span><br></pre></td></tr></table></figure><h3 id="2-ssh密钥方式批量管理主机"><a href="#2-ssh密钥方式批量管理主机" class="headerlink" title="2.ssh密钥方式批量管理主机"></a>2.ssh密钥方式批量管理主机</h3><p>这个方式比起hosts文件的参数来的更加安全放心</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 在Rocky1机器上创建密钥对</span><br><span class="line">[root@Rocky1 ~]<span class="comment"># ssh-keygen   //此时密钥对就会自动创建到/root/.ssh/id_rsa下面 </span></span><br><span class="line"></span><br><span class="line">2.此时检查公私钥文件</span><br><span class="line">[root@Rocky1 ~]<span class="comment"># cd ~/.ssh/</span></span><br><span class="line">[root@Rocky1 .ssh]<span class="comment"># ls</span></span><br><span class="line">id_rsa  id_rsa.pub  known_hosts  known_hosts.old</span><br></pre></td></tr></table></figure><p>编写公钥分发脚本</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="meta"># [root@Rocky1 .ssh]# mkdir /myssh</span></span><br><span class="line"><span class="meta"># [root@Rocky1 .ssh]# cd /myssh/</span></span><br><span class="line"><span class="meta"># [root@Rocky1 myssh]# touch ssh_key_send.sh</span></span><br><span class="line"><span class="meta"># [root@Rocky1 myssh]# vim ssh_key_send.sh </span></span><br><span class="line">---------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">rm -f ~/.ssh/id_rsa*</span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa -N <span class="string">&quot;&quot;</span> &gt; /dev/<span class="literal">null</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">SSH_Pass=<span class="number">1</span></span><br><span class="line">Key_Path=~/.ssh/id_rsa.pub</span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> <span class="number">102</span> <span class="number">103</span></span><br><span class="line"><span class="keyword">do</span>    </span><br><span class="line">    sshpass -p $SSH_Pass ssh-copy-id -i $Key_Path -o StrictHostKeyChecking=no <span class="number">192.168</span><span class="number">.123</span>.$ip</span><br><span class="line">done</span><br><span class="line">---------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="meta"># [root@Rocky1 myssh]# sh ssh_key_send.sh  // 此时Rocky1这台机器上就可以免密的执行ansible的命令</span></span><br><span class="line"><span class="meta"># [root@Rocky1 myssh]# ansible client -m command -a &#x27;uname -a&#x27; </span></span><br><span class="line"><span class="number">192.168</span><span class="number">.123</span><span class="number">.103</span> | CHANGED | rc=<span class="number">0</span> &gt;&gt;</span><br><span class="line">Linux Rocky3.skills.com <span class="number">5.14</span><span class="number">.0</span><span class="number">-162.6</span><span class="number">.1</span>.el9_1<span class="number">.0</span><span class="number">.1</span>.x86_64 <span class="meta">#1 SMP PREEMPT_DYNAMIC Mon Nov 28 18:44:09 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.123</span><span class="number">.102</span> | CHANGED | rc=<span class="number">0</span> &gt;&gt;</span><br><span class="line">Linux Rocky2 <span class="number">5.14</span><span class="number">.0</span><span class="number">-162.6</span><span class="number">.1</span>.el9_1<span class="number">.0</span><span class="number">.1</span>.x86_64 <span class="meta">#1 SMP PREEMPT_DYNAMIC Mon Nov 28 18:44:09 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><pre><code>                            **在生产环境中，ansible的连接方式可以二选一。推荐使用ssh密钥管理来实现ansible的执行**</code></pre><h2 id="ansible模式与命令"><a href="#ansible模式与命令" class="headerlink" title="ansible模式与命令"></a>ansible模式与命令</h2><p><strong>ansible实现批量化主机管理的模式，主要有两种</strong></p><ul><li>利用ansible的纯命令行实现的批量化管理，ad-hoc模式———比较简单的shell命令管理</li><li>利用ansible的playbook剧本来实现批量管理，playbook ————比较复杂的shell脚本管理</li></ul><h3 id="1-ad-hoc模式"><a href="#1-ad-hoc模式" class="headerlink" title="1. ad-hoc模式"></a>1. ad-hoc模式</h3><p>ansible的ad-hoc模式是ansible的命令行形式，也就是处理一些临时的，简单的任务，可以直接使用ansible的命令行来操作</p><p>比如</p><ul><li>临时批量查看被管理机器的内存清空，cpu负载情况，网络情况</li><li>临时的分发配置文件等等</li></ul><h3 id="2-Playbook模式"><a href="#2-Playbook模式" class="headerlink" title="2. Playbook模式"></a>2. Playbook模式</h3><p>ansible的playbook模式是针对比较具体，且比较大的任务，那么你就得实现写好剧本</p><ul><li>一键部署rsync备份服务器</li><li>一键部署lnmp环境</li></ul><h3 id="3-ansible的ad-hoc命令行解析"><a href="#3-ansible的ad-hoc命令行解析" class="headerlink" title="3. ansible的ad-hoc命令行解析"></a>3. ansible的ad-hoc命令行解析</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rocky1  ansible服务端</span><br><span class="line">Rocky2  被管理的机器</span><br><span class="line">Rocky3  被管理的机器</span><br></pre></td></tr></table></figure><ol><li>让被管理机器返回主机名</li></ol><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@Rocky1 ~</span>]<span class="meta"># ansible client -m command -a &#x27;hostname&#x27; </span></span><br><span class="line"><span class="number">192.168</span><span class="number">.123</span><span class="number">.102</span> | CHANGED | rc=<span class="number">0</span> &gt;&gt;</span><br><span class="line">Rocky2</span><br><span class="line"><span class="number">192.168</span><span class="number">.123</span><span class="number">.103</span> | CHANGED | rc=<span class="number">0</span> &gt;&gt;</span><br><span class="line">Rocky3</span><br></pre></td></tr></table></figure><h3 id="ad-hoc命令解析"><a href="#ad-hoc命令解析" class="headerlink" title="ad-hoc命令解析"></a>ad-hoc命令解析</h3><ul><li>Ansible —- 自带提供的命令操作</li><li>Chaoge———/etc/ansible/hosts文件中定义的主机组，还可以谢主机的ip地址 以及通配符 *</li><li>-m command ansible的指定模块的参数，以及指定了command的模块</li><li>-a 指定command模块什么参数，hostname,uname -r</li></ul><h3 id="ansible-doc命令"><a href="#ansible-doc命令" class="headerlink" title="ansible-doc命令"></a>ansible-doc命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">列出所有的ansible支持的模块</span><br><span class="line">ansible-doc -l | grep ^command</span><br><span class="line">查看莫格模块的具体用法参数</span><br><span class="line">ansible-doc -s command</span><br></pre></td></tr></table></figure><h2 id="Ansible的模块精讲"><a href="#Ansible的模块精讲" class="headerlink" title="Ansible的模块精讲"></a>Ansible的模块精讲</h2><h3 id="command模块"><a href="#command模块" class="headerlink" title="command模块"></a>command模块</h3><p><strong>作用 在远程节点上执行一个命令</strong></p><p>ansible-doc -s command 查看该模块支持的参数</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">chdir  在执行命令之前，先通过cd进入该参数指定的目录</span><br><span class="line">creates  在创建一个文件之前，判断该文件是否存在，如果存在了，则跳过前面的东西，如果不存在则执行前面的动作</span><br></pre></td></tr></table></figure><p> command模块是ansible的默认基本模块，也可以省略不写，但是要注意如下的坑</p><ul><li>使用command模块，不得使用sehll变量<code>$name</code>，也不得出现特殊符号<code>&gt; &lt; | ; &amp;</code> 这些符号command模块都不认识，如果你想使用前面指定的模块，特殊符号，请使用shell模块。</li></ul><p>command</p><h1 id="ansible常用模块"><a href="#ansible常用模块" class="headerlink" title="ansible常用模块"></a>ansible常用模块</h1><h2 id="command模块-1"><a href="#command模块-1" class="headerlink" title="command模块"></a>command模块</h2><p><strong>功能： 在远程主机上执行命令</strong>，此为默认模块，可忽略-m选项</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">- name: Execute commands <span class="keyword">on</span> targets</span><br><span class="line">  command:</span><br><span class="line">      argv:                  <span class="meta"># 以列表形式传递命令，而不是字符串。使用`argv&#x27;可以避免将某些需要特殊处理的值（例如“用户名”）错误地解释为字符串。只能提&gt;</span></span><br><span class="line">                             <span class="meta"># 供字符串形式或列表形式的其中一种，不可同时提供两者。必须提供其中之一。</span></span><br><span class="line">      chdir:                 <span class="meta"># 在运行命令之前切换到指定目录。</span></span><br><span class="line">      cmd:                   <span class="meta"># 要运行的命令。</span></span><br><span class="line">      creates:               <span class="meta"># 文件名或（自2.0版本以来）通配符模式。如果已存在匹配的文件，则不会运行此步骤。在检查`removes&#x27;之前进行检查。</span></span><br><span class="line">      free_form:             <span class="meta"># 命令模块接受自由形式字符串作为要运行的命令。实际上没有名为 &#x27;free form&#x27; 的参数。</span></span><br><span class="line">      removes:               <span class="meta"># 文件名或（自2.0版本以来）通配符模式。如果存在匹配的文件，则会运行此步骤。在检查`creates&#x27;之后进行检查。</span></span><br><span class="line">      stdin:                 <span class="meta"># 直接将命令的标准输入设置为指定的值。</span></span><br><span class="line">      stdin_add_newline:     <span class="meta"># 如果设置为 `yes&#x27;，则在标准输入数据末尾添加换行符。</span></span><br><span class="line">      strip_empty_ends:      <span class="meta"># 从结果的stdout/stderr末尾删除空行。</span></span><br><span class="line">      warn:                  <span class="meta"># （已弃用）启用或禁用任务警告。此功能已被弃用，并将在2.14版本中移除。从2.1版本开始，默认情况下禁用此选项。</span></span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="meta"># ansible client -m command -a &quot;systemctl stop httpd&quot;  //关闭clinet组的httpd服务</span></span><br><span class="line"><span class="meta"># ansible client -m command -a &quot;hostname&quot;  //查看client组的用户名</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># [root@Rocky1 ~]# ansible client  -m command -a &#x27;chdir=/etc creates=/root/1.txt cat httpd/conf/httpd.conf&#x27; </span></span><br><span class="line"></span><br><span class="line"><span class="meta"># chdir=/etc  //执行这个命令前 先进入/etc目录下</span></span><br><span class="line"><span class="meta"># creates=/root/1.txt  //如果客户端的主机上有/root/1.txt这个文件 那么后面的命令则不执行了</span></span><br><span class="line"><span class="meta"># cat https/conf/httpd.conf  //查看客户端的httpd/conf/httpd.conf这个配置文件</span></span><br></pre></td></tr></table></figure><h2 id="Shell模块"><a href="#Shell模块" class="headerlink" title="Shell模块"></a>Shell模块</h2><p>功能：<strong>和Command模块差不多</strong> 但是支持更多的命令参数 不易报错 所以参数命令跟Command差不多 不再介绍</p><p>范例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示所有管理端的主机名  </span></span><br><span class="line">· ansible client  -m shell -a <span class="string">&#x27;echo $HOSTNAME&#x27;</span></span><br><span class="line">192.168.123.102 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">Rocky2</span><br><span class="line"><span class="comment"># 将管理端机器的/tmp目录下的所有文件删除   </span></span><br><span class="line">·  ansible client  -m shell -a <span class="string">&#x27;rm -rf /tmp/*&#x27;</span></span><br><span class="line">192.168.123.102 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="comment"># 修改root用户密码  </span></span><br><span class="line">·  ansible client -m shell -a <span class="string">&#x27;echo &quot;pass-123&quot;|passwd --stdin root&#x27;</span></span><br><span class="line">192.168.123.102 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">更改用户 root 的密码 。</span><br><span class="line">passwd：所有的身份验证令牌已经成功更新。</span><br></pre></td></tr></table></figure><h2 id="Script模块"><a href="#Script模块" class="headerlink" title="Script模块"></a>Script模块</h2><p><strong>功能：在远程主机上运行ansible脚本</strong> </p><p>Script对比Shell和Command的好处</p><ol><li>Shell上执行命令方便 但是如果你写了脚本的话 你单纯使用Shell命令它不能执行</li><li>Script上写了脚本后 你可以将这个脚本传送给所有控制端的所有机器 并执行</li></ol><p>范例：</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>) [root@Rocky1 ~]<span class="meta"># cat &gt; test.sh</span></span><br><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">echo <span class="string">&quot;my hostname is &#x27;Rocky&#x27;&quot;</span></span><br><span class="line">^C</span><br><span class="line">(<span class="number">2</span>) 执行测试这个脚本能不能正常工作</span><br><span class="line">[<span class="meta">root@Rocky1 ~</span>]<span class="meta"># /root/test.sh </span></span><br><span class="line">my hostname <span class="keyword">is</span> <span class="string">&#x27;Rocky&#x27;</span></span><br><span class="line">(<span class="number">3</span>) 在控制端使用脚本</span><br><span class="line">[<span class="meta">root@Rocky1 ~</span>]<span class="meta"># ansible client -m script -a &#x27;/root/test.sh&#x27;</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.123</span><span class="number">.102</span> | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,   <span class="comment">// changed:true 表示操作已成功</span></span><br><span class="line">    <span class="string">&quot;rc&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;stderr&quot;</span>: <span class="string">&quot;Shared connection to 192.168.123.102 closed.\r\n&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stderr_lines&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;Shared connection to 192.168.123.102 closed.&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;stdout&quot;</span>: <span class="string">&quot;my hostname is &#x27;Rocky&#x27;\r\n&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stdout_lines&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;my hostname is &#x27;Rocky&#x27;&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="copy模块"><a href="#copy模块" class="headerlink" title="copy模块"></a>copy模块</h2><p><strong>功能： 将ansible的文件复制到远程的主机</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dest  指定复制文件的目录位置，使用绝对路径。如果是源目录，则目标也要是目录，如果目标文件已存在，会覆盖原有内同</span><br><span class="line">src    指定源文件的路径，可以使用相对路径和绝对路径，支持直接指定路径，如果是源是目录，则目标也要是目录</span><br><span class="line">mode  指出复制时，目标文件的权限，可选</span><br><span class="line">owner  指出复制时，目标文件的属主，可选</span><br><span class="line">group  指出拇指时目标文件的属组，可选</span><br><span class="line">content  指出复制到目标主机上的内容，不能和src一起使用</span><br></pre></td></tr></table></figure><p>  范例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[root@Rocky1 ~]<span class="meta"># ansible client -m copy -a <span class="string">&quot;content=&#x27;test line1\n test line2&#x27; dest=/tmp/test.txt&quot;</span> </span></span><br><span class="line">（<span class="number">1</span>）content=<span class="string">&#x27;test lin1\ntest line2&#x27;</span> <span class="comment">//指定写入的内容 直接写出要添加的内容 生成文件</span></span><br><span class="line">（<span class="number">2</span>）dest=/tmp/test.txt <span class="comment">//指定复制到文件的位置</span></span><br><span class="line"># [root@Rocky1 ~]<span class="meta"># ansible client -m copy -a <span class="string">&quot;content=&#x27;test line1\ntest line2&#x27; dest=/tmp/test.txt&quot;</span></span></span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line">    <span class="number">192.168</span><span class="number">.123</span><span class="number">.102</span> | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;discovered_interpreter_python&quot;</span>: <span class="string">&quot;/usr/bin/python3&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;checksum&quot;</span>: <span class="string">&quot;43791ccbbcf72774b2bbbe6fe8d7ab488359b922&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/tmp/test.txt&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;md5sum&quot;</span>: <span class="string">&quot;f0e596e1a1a3ef7d278f2dda4d4e6ec8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0644&quot;</span>,</span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;secontext&quot;</span>: <span class="string">&quot;unconfined_u:object_r:admin_home_t:s0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;size&quot;</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/root/.ansible/tmp/ansible-tmp-1699611955.979775-3537-224485407617732/source&quot;</span>,</span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;file&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line">[root@Rocky1 ~]<span class="meta"># ansible client -a <span class="string">&#x27;cat /tmp/test.txt&#x27;</span>   <span class="comment">//查看文件内容是否复制到了指定目录</span></span></span><br><span class="line"><span class="number">192.168</span><span class="number">.123</span><span class="number">.102</span> | CHANGED | rc=<span class="number">0</span> &gt;&gt; </span><br><span class="line">test line1</span><br><span class="line">test line2</span><br></pre></td></tr></table></figure><p>   范例：将ansible服务器的/etc/sysconfig文件拷贝到控制端主机的/data/目录下 并且权限为600 属主为ayaka</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># [root@Rocky1 ~]# ansible client -m copy -a &#x27;src=/etc/sysconfig dest=/data/ mode=600 owner=ayaka&#x27;</span></span><br><span class="line">----------------------------------------</span><br><span class="line">192.168.123.102 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/data/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/etc/sysconfig&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------</span><br><span class="line"><span class="comment"># [root@Rocky1 ~]# ansible client -m shell -a &#x27;ls -ld /data/*&#x27;</span></span><br><span class="line">192.168.123.102 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">drwxr-xr-x. 3 ayaka root 4096 11月 10 05:33 /data/sysconfig</span><br></pre></td></tr></table></figure><h2 id="Fetch模块"><a href="#Fetch模块" class="headerlink" title="Fetch模块"></a>Fetch模块</h2><p>功能：从远程主机提取文件至ansible的主控端，copy相反，<strong>目前不支持目录</strong> </p><p>范例：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">yamlCopy Code- name:</span> <span class="string">Fetch</span> <span class="string">a</span> <span class="string">file</span> <span class="string">from</span> <span class="string">remote</span> <span class="string">host</span></span><br><span class="line">  <span class="attr">fetch:</span></span><br><span class="line">    <span class="attr">src:</span> <span class="string">/path/to/src/file.txt</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">/path/to/dest/file.txt</span></span><br></pre></td></tr></table></figure><p>在此示例中，我们使用<code>fetch</code>模块从远程主机获取位于<code>/path/to/src/file.txt</code>的文件，并将其保存到本地的<code>/path/to/dest/file.txt</code>。</p><h2 id="File模块"><a href="#File模块" class="headerlink" title="File模块"></a>File模块</h2><p>功能：设置文件属性</p><p> 范例；</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 创建空文件</span></span><br><span class="line">[<span class="meta">root@Rocky1 ~</span>]<span class="meta"># ansible client -m file -a &#x27;path=/root/o.txt state=touch&#x27;   //state=touch touch的意思就是创建文件的意思</span></span><br><span class="line"><span class="meta">#删除文件 </span></span><br><span class="line">[<span class="meta">root@Rocky1 ~</span>]<span class="meta"># ansible client -m file -a &#x27;path=/root/o.txt state=absent&#x27;  //state=absent absent就是删除</span></span><br><span class="line"><span class="meta">#设置文件的属性</span></span><br><span class="line">[<span class="meta">root@Rocky1 ~</span>]<span class="meta"># ansible client -m file -a &#x27;path=/root/o.txt owner=ayaka mode=777&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#创建目录</span></span><br><span class="line">[<span class="meta">root@Rocky1 ~</span>]<span class="meta"># ansible client -m file -a &#x27;path=/data/mysql state=directory&#x27;</span></span><br><span class="line">！ 重点参数 state=directory <span class="comment">//directory的意思就是创建目录</span></span><br></pre></td></tr></table></figure><h2 id="unarchive模块"><a href="#unarchive模块" class="headerlink" title="unarchive模块"></a>unarchive模块</h2><p>功能：解包解压缩</p><p>实现有两种方法：</p><p>1、将ansible主机上的压缩包传到远程主机后解压缩所至特定目录，设置copy=yes</p><p>2、将远程主机上的莫格压缩包解压缩到指定路径下、设置copy=no</p><p>远程解压缩：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 文件打包</span><br><span class="line">tar zcvf toto.tar.gz /etc/*</span><br><span class="line"></span><br><span class="line"># 远程解压缩</span><br><span class="line">[root@Rocky1 ~]# ansible client -m unarchive -a &#x27;src=/root/toto.tar.gz dest=/data/ owner=ayaka&#x27;</span><br><span class="line"></span><br><span class="line"># 检查远程是否解压缩了文件</span><br><span class="line">[root@Rocky1 ~]# ansible client -m shell -a &#x27;ls -ld  /data/*&#x27;</span><br><span class="line">192.168.123.102 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">drwxr-xr-x. 135 ayaka root    8192 11月 10 06:08 /data/etc   //可以看到是以及解压缩了的</span><br></pre></td></tr></table></figure><p>本地解压缩：（如果要在本地解包 一定要指定源文件的位置是其压缩包的位置 并且最后面一定要加上copy=no 表示本地压缩包）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Rocky1 ~]# ansible client -m unarchive -a &#x27;src=/data/toto.tar.xz dest=/opt/ mode=777 copy=no&#x27;</span><br></pre></td></tr></table></figure><h2 id="hostname模块"><a href="#hostname模块" class="headerlink" title="hostname模块"></a>hostname模块</h2><p>功能：管理主机名</p><p>范例：</p><ul><li>ansible -m hostname -a ‘需要修改的主机名名称’</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Rocky1 log]# ansible client -m hostname -a &#x27;name=Rocky2.skills.com&#x27;</span><br></pre></td></tr></table></figure><h2 id="Cron模块"><a href="#Cron模块" class="headerlink" title="Cron模块"></a>Cron模块</h2><p>功能：计划任务</p><p>支持时间：minute，hour，day，month，weekday</p><p>范例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份数据库脚本</span></span><br><span class="line">mysqldump -A -F --single_trancaction --master-data=2 -q -uroot | gzip &gt; /data/mysql_`<span class="built_in">date</span>+%F_%T`.sql.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建任务</span></span><br><span class="line">[root@Rocky1 <span class="built_in">log</span>]<span class="comment"># ansible 192.168.123.102 -m cron -a &#x27;hour=2 minute=30 weekday=1-5 name=&quot;backup mysql&quot; job=/root/mysql_backup.sh&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 观察计划任务</span></span><br><span class="line">[root@Rocky1 <span class="built_in">log</span>]<span class="comment"># ansible client -m shell -a &#x27;crontab -l&#x27;</span></span><br><span class="line"></span><br><span class="line">192.168.123.102 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="comment">#Ansible: backup mysql</span></span><br><span class="line">30 2 * * 1-5 /root/mysql_backup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用计划任务</span></span><br><span class="line">[root@Rocky1 <span class="built_in">log</span>]<span class="comment"># ansible 192.168.123.102 -m cron -a &#x27;hour=2 minute=30 weekday=1-5 name=&quot;backup mysql&quot; job=/root/mysql_backup.sh disabled=yes&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 启用计划任务</span></span><br><span class="line">[root@Rocky1 <span class="built_in">log</span>]<span class="comment"># ansible 192.168.123.102 -m cron -a &#x27;hour=2 minute=30 weekday=1-5 name=&quot;backup mysql&quot; job=/root/mysql_backup.sh disabled=no&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 删除计划任务</span></span><br><span class="line">[root@Rocky1 <span class="built_in">log</span>]<span class="comment"># ansible 192.168.123.102 -m cron -a &#x27; name=&quot;backup mysql&quot; state=absent&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Yum模块"><a href="#Yum模块" class="headerlink" title="Yum模块"></a>Yum模块</h2><p>功能：管理软件包，支持RHEL，Centos，fedora，不支持Ubuntu</p><p>常用参数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">name：     指定要操作的软件包的名称，可以是单个软件包的名称，也可以是多个软件包的列表</span><br><span class="line"></span><br><span class="line">state：     指定软件包的状态 常见的取值有present（安装软件包） absent（删除软件包）latest（更新软件包）</span><br><span class="line">    </span><br><span class="line">update_cache：可以是yes或no 控制是否在执行任务前更新yum缓存</span><br></pre></td></tr></table></figure><p>范例：安装与删除samba软件包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装samba软件包</span></span><br><span class="line">[root@Rocky1 <span class="built_in">log</span>]<span class="comment"># ansible client -m yum -a &#x27;name=samba state=present&#x27; </span></span><br><span class="line"><span class="comment"># 卸载samba软件包</span></span><br><span class="line">[root@Rocky1 <span class="built_in">log</span>]<span class="comment"># ansible client -m yum -a &#x27;name=samba state=absent&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="service服务"><a href="#service服务" class="headerlink" title="service服务"></a>service服务</h2><p>功能：管理服务的状态</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">常见参数：</span><br><span class="line"></span><br><span class="line">state=?    ？即为以下这些参数 </span><br><span class="line"></span><br><span class="line">- started 开启</span><br><span class="line"></span><br><span class="line">- stopped 关闭</span><br><span class="line"></span><br><span class="line">- enabled 自启动</span><br><span class="line"></span><br><span class="line">- reloaded/restarted 重启</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动httpd的服务</span></span><br><span class="line">[root@Rocky1 <span class="built_in">log</span>]<span class="comment"># ansible client -m service -a &#x27;name=httpd state=started&#x27;</span></span><br><span class="line"><span class="comment"># 停止httpd的服务</span></span><br><span class="line">[root@Rocky1 <span class="built_in">log</span>]<span class="comment"># ansible client -m service -a &#x27;name=httpd state=stopped&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Users模块"><a href="#Users模块" class="headerlink" title="Users模块"></a>Users模块</h2><p>功能：管理用户</p><p>常用命令参数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- name      指定要操作的用户名</span><br><span class="line">- comment        用于设置用户的注释信息</span><br><span class="line">- group          将用户添加的指定的用户组</span><br><span class="line">- <span class="built_in">groups</span>         指定用户的所属的用户组列表</span><br><span class="line">- password       指定用户的密码</span><br><span class="line">- shell          指定用户登录的shell</span><br><span class="line">- home           指定用户的家目录</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">[root@Rocky1 <span class="built_in">log</span>]<span class="comment"># ansible client -m user -a &#x27;name=user1 comment=&quot;test user&quot; uid=2048 home=/app/user1 group=root&#x27;</span></span><br><span class="line"><span class="comment"># 删除用户及家目录登数据</span></span><br><span class="line">[root@Rocky1 <span class="built_in">log</span>]<span class="comment"># ansible client -m user -a &#x27;name=user1 state=absent remove=yes&#x27; </span></span><br></pre></td></tr></table></figure><h2 id="Group模块"><a href="#Group模块" class="headerlink" title="Group模块"></a>Group模块</h2><p>功能：管理用户的用户组</p><p>范例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加用户组nginx 并指定gid88</span></span><br><span class="line">[root@Rocky1 <span class="built_in">log</span>]<span class="comment"># ansible client -m group -a &#x27;name=nginx gid=88 system=yes&#x27;</span></span><br><span class="line"><span class="comment"># 删除用户组nginx</span></span><br><span class="line">[root@Rocky1 <span class="built_in">log</span>]<span class="comment"># ansible client -m group -a &#x27;name=nginx state=absent&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Lineinfile模块"><a href="#Lineinfile模块" class="headerlink" title="Lineinfile模块"></a>Lineinfile模块</h2><p><em>ansible在使用sed进行替换时，经常会遇到需要转义的问题，而且ansible在遇到特殊符号进行提更换时，存在问题，无法进行替换。其实ansible自身提供了两个模块：lineinfile和replace模块</em></p><p><strong>功能：相当于sed 可以修改文件内容</strong></p><p>常用参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. state: 指定行应当存在还是不存在。常见取值包括“present（存在）”和absent（不存在）</span><br><span class="line">2. path： 指定目标文件的路径</span><br><span class="line">3. regexp： 用于匹配需要操作的行的正则表达式模式</span><br><span class="line">4. line： 指定要插入或替换的文本内容</span><br></pre></td></tr></table></figure><p>范例：</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将/etc/httpd/conf/httpd.conf中的listen=80换成listen8080</span></span><br><span class="line">ansible client -m lineinfile -a <span class="string">&#x27;path=/etc/httpd/conf/httpd.conf regexp=&#x27;</span>^listen=<span class="string">&#x27; line=&#x27;</span>listen=8080<span class="string">&#x27;&#x27;</span> </span><br><span class="line"><span class="comment"># 将/etc/httpd/conf/httpd.conf中的#注释删除</span></span><br><span class="line">[root@Rocky1 <span class="built_in">log</span>]<span class="comment"># ansible client -m lineinfile -a &#x27;dest=/etc/httpd/conf/httpd.conf state=absent regexp=&quot;#&quot;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="修改默认模块"><a href="#修改默认模块" class="headerlink" title="修改默认模块"></a>修改默认模块</h2><p>范例：将shell模块代替command，设为默认模块</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Rocky1 ~]# vim /etc/ansible/ansible.cfg </span><br><span class="line"># 修改下面一行</span><br><span class="line">module_name = shell</span><br></pre></td></tr></table></figure><h1 id="playbook"><a href="#playbook" class="headerlink" title="playbook"></a>playbook</h1><h2 id="playbook介绍"><a href="#playbook介绍" class="headerlink" title="playbook介绍"></a>playbook介绍</h2><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20231110150314139.png" alt="image-20231110150314139"></p><p>playbook剧本是由一个或多个”play”组成的列表</p><p>play的主要功能在于将预定的一组主机，装扮成实现通过ansible的task定义好的角色，task实际是调用ansible的一个module，将多个playbook中，即可以让它们列和起来，按事先编排的机制执行预定义的动作</p><p>Playbook文件采用YAML语言编写。</p><h2 id="YAML语言"><a href="#YAML语言" class="headerlink" title="YAML语言"></a>YAML语言</h2><h3 id="YAML语言介绍"><a href="#YAML语言介绍" class="headerlink" title="YAML语言介绍"></a>YAML语言介绍</h3><p>YAML是一个可读性高的用来表达资料序列的格式，它参考了很多其它语言，包括：XML、C语言、Python、Perl以及电子邮件格式RFC2822登。不过在开打的这种语言时，YAML的意思其实是”Yet Anothemarkup Language” 仍是一种标记语言。</p><h3 id="YAML语言的特性"><a href="#YAML语言的特性" class="headerlink" title="YAML语言的特性"></a>YAML语言的特性</h3><ul><li>YAML的可读性好</li><li>YAML和脚本语言的交互性好</li><li>YAML使用实现语言的数据类型</li><li>YAML有一个一致的信息模型</li><li>YAML易于实现</li><li>YAML可以基于流来处理</li></ul><h3 id="YAML语言简介"><a href="#YAML语言简介" class="headerlink" title="YAML语言简介"></a>YAML语言简介</h3><ul><li>在单一文件第一行，用连续三个字号”—-“开始，还有选择性的连续三个点号（…）用来表示文件的结尾</li><li>次行开始正常写Playbook的内容，一般建议写明该Playbook的功能</li><li>使用#号注释代码</li><li>缩进必须是一直的，同样的缩进代表同样的级别，程序判别的级别是通过缩进结合换行来实现的YAML文件内容是区分大小写的，key/value的值俊需大小写敏感</li><li>多个k/v可同行也可以换行写，同行使用，分隔。</li><li>v可是个字符串，也可以是另一个列表。</li><li>一个完整的代码块功能需要最少元素需包括name和task</li><li>一个name只能包括一个task</li><li>YAML文件的扩展名通常为yml和yaml</li></ul><h4 id="List列表"><a href="#List列表" class="headerlink" title="List列表"></a>List列表</h4><p>列表由多个元素组成，且所有元素前均使用“-”打头</p><p>范例：</p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20231110154206094.png" alt="image-20231110154206094"></p><h4 id="Directory字典"><a href="#Directory字典" class="headerlink" title="Directory字典"></a>Directory字典</h4><p>字典通常由多个key和value组成</p><p>范例：</p><p><img src="C:/Users/21879/AppData/Roaming/Typora/typora-user-images/image-20231110202455557.png" alt="image-20231110202455557"></p><h3 id="三种常见的数据形式"><a href="#三种常见的数据形式" class="headerlink" title="三种常见的数据形式"></a>三种常见的数据形式</h3><p>XML：Extensible Markup Languuage，可扩展标记语言，可用于数据交换和配置</p><p>JSON：JavaScript Object Notation，JavaScript对象标记法，主要用来数据交换或配置，不支持注释</p><p>YAML：YAML Ain’t Markup Language YAML不是一种标记语言，主要用来配置，大小写敏感，不支持tab</p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20231110202706638.png" alt="image-20231110202706638">  </p><h2 id="Playbook核心元素"><a href="#Playbook核心元素" class="headerlink" title="Playbook核心元素"></a>Playbook核心元素</h2><ul><li>Hosts 执行的远程主机列表</li><li>Tasks  任务集</li><li>Variables  内置变量或自定义变量在playbook中调用</li><li>Templates模板，可替换模板文件中的变量并实现一些简单的逻辑文件</li><li>Handlers和notify结合使用，由特定条件出发的操作，满足条件方才执行，覅则不执行</li></ul><h3 id="hosts组件"><a href="#hosts组件" class="headerlink" title="hosts组件"></a>hosts组件</h3><p>Hosts：playbook中的每一个play的目的都是为了让特定主机以某个指定的用户身份执行任务。hosts用于指定要执行指定任务的主机，须事先定义在主机清单中。</p><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ansible/hosts</span><br><span class="line">[client]</span><br><span class="line">192.168.123.101 </span><br><span class="line">192.168.123.102</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hosts: client</span><br></pre></td></tr></table></figure><h3 id="remote-user组件"><a href="#remote-user组件" class="headerlink" title="remote_user组件"></a>remote_user组件</h3><p>remote_user：可用于Host和task中。也可以通过指定其通过sudo的方式在远程主机上执行任务，其可用于play全局或某任务；此外，甚至可以在sudo时使用sudo_user指定sudo时切换的用户</p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/image-20231110204047276.png" alt="image-20231110204047276"></p><h3 id="task列表和action组件"><a href="#task列表和action组件" class="headerlink" title="task列表和action组件"></a>task列表和action组件</h3><p>play的主体部分时task list，task list中有一个或多个task，各个task按次序逐个在hosts中指定的所有主机上执行，即在所有主机上完成第一个task后，在开始第二个task。</p><p>task的目的时使用指定的参数执行模块，而在模块参数中可以使用变量。模块执行是幂等的，这意味着多次执行时安全的，因为其结果均一致</p><p>每个task都应该由其name，用于playbook的执行结果输出，建议其内容能清晰地描述任务执行步骤。如果未提供name，则action的结果输出都一致。</p><p>task两种格式：</p><p>（1）action：module argument</p><p>（2）module：arguments</p><p>注意：shell和command模块后面跟命令 而非key=value</p><p>范例：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="number">192.168</span><span class="number">.123</span><span class="number">.102</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">start</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">service:</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br></pre></td></tr></table></figure><h3 id="ShellScripts-VS-Playbook案例"><a href="#ShellScripts-VS-Playbook案例" class="headerlink" title="ShellScripts VS Playbook案例"></a>ShellScripts VS Playbook案例</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Shell脚本实现</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#安装apache</span></span><br><span class="line"><span class="string">yum</span> <span class="string">install</span> <span class="string">--quiet</span> <span class="string">-y</span> <span class="string">httpd</span></span><br><span class="line"><span class="comment">#复制配置文件</span></span><br><span class="line"><span class="string">cp</span> <span class="string">/tmp/httpd.conf</span> <span class="string">/etc/httpd/conf/httpd.conf</span></span><br><span class="line"><span class="string">cp</span> <span class="string">/tmp/vhosts.conf</span> <span class="string">/etc/httpd/conf.d/</span></span><br><span class="line"><span class="comment">#启动Apache服务</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">enable</span> <span class="string">--now</span> <span class="string">httpd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Playbook实现</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">client</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;安装httpd服务&quot;</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;复制httpd文件&quot;</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/tmp/httpd/httpd.conf</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/httpd/conf/httpd.conf</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;复制httpd文件&quot;</span></span><br><span class="line">      <span class="attr">copy:</span> </span><br><span class="line">        <span class="attr">src:</span> <span class="string">/tmp/vhosts.conf</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/httpd/conf.d</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;启动Apache服务&quot;</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br></pre></td></tr></table></figure><h3 id="playbook命令"><a href="#playbook命令" class="headerlink" title="playbook命令"></a>playbook命令</h3><p>格式：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook &lt;filename.yaml&gt; ... [options]</span><br></pre></td></tr></table></figure><p>常见选项：</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">-c --check      <span class="meta">#只检测可能会发生的改变，但不真正执行操作</span></span><br><span class="line">--list-hosts    <span class="meta">#列出运行任务的主机</span></span><br><span class="line">--lists-tags    <span class="meta">#列出tag</span></span><br><span class="line">--lists-tasks    <span class="meta">#列出tasks</span></span><br><span class="line">--limit 主机列表   <span class="meta">#只针对主机列表中的主机执行</span></span><br><span class="line">-v -vv -vvv      <span class="meta">#显示过程</span></span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Rocky1 ~]<span class="comment"># ansible-playbook instalhttpd.yaml --check  //只检测</span></span><br><span class="line"></span><br><span class="line">[root@Rocky1 ~]<span class="comment"># ansible-playbook instalhttpd.yaml --limit 192.168.123.101   //只针对其中一台主机执行</span></span><br></pre></td></tr></table></figure><h2 id="playbook初步"><a href="#playbook初步" class="headerlink" title="playbook初步"></a>playbook初步</h2><h3 id="利用playbook创建mysql用户"><a href="#利用playbook创建mysql用户" class="headerlink" title="利用playbook创建mysql用户"></a>利用playbook创建mysql用户</h3><p>范例：mysql_user,yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">client</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;创建用户组mysql&quot;</span></span><br><span class="line">      <span class="attr">group:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="attr">system:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">gid:</span> <span class="number">306</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;创建用户mysql&quot;</span></span><br><span class="line">      <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">/sbin/nologin</span></span><br><span class="line">        <span class="attr">system:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="attr">uid:</span> <span class="number">306</span></span><br><span class="line">        <span class="attr">home:</span> <span class="string">/data/mysql</span></span><br><span class="line">        <span class="attr">create_home:</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure><h3 id="利用playbook安装和启用Nginx服务"><a href="#利用playbook安装和启用Nginx服务" class="headerlink" title="利用playbook安装和启用Nginx服务"></a>利用playbook安装和启用Nginx服务</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">client</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;安装Nginx服务&quot;</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;停止Apache服务&quot;</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">       <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">       <span class="attr">state:</span> <span class="string">stopped</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;开启Nginx服务&quot;</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br></pre></td></tr></table></figure><h3 id="利用playbook安装和启用Apache服务并设置网页内容"><a href="#利用playbook安装和启用Apache服务并设置网页内容" class="headerlink" title="利用playbook安装和启用Apache服务并设置网页内容"></a>利用playbook安装和启用Apache服务并设置网页内容</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="number">192.168</span><span class="number">.123</span><span class="number">.101</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;复制index文件到web1上&quot;</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/root/index1.html</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/var/www/html/index.html</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="number">192.168</span><span class="number">.123</span><span class="number">.102</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;复制index文件到web2上&quot;</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/root/index2.html</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/var/www/html/index.html</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">client</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;停止Nginx服务&quot;</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=nginx</span> <span class="string">state=stopped</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;重启httpd服务&quot;</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=httpd</span> <span class="string">state=restarted</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Rocky1 ~]<span class="comment"># curl 192.168.123.101</span></span><br><span class="line">WebA</span><br><span class="line">[root@Rocky1 ~]<span class="comment"># curl 192.168.123.102</span></span><br><span class="line">WebB</span><br></pre></td></tr></table></figure><h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h2 id="安装部署nginx服务"><a href="#安装部署nginx服务" class="headerlink" title="安装部署nginx服务"></a>安装部署nginx服务</h2><ol><li>编辑yaml文件</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">client</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">index.html</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/root/index.html</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/usr/share/nginx/html/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br></pre></td></tr></table></figure><ol><li>准备主页内容文件</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;Hello Nginx&quot; &gt; index.html</span><br></pre></td></tr></table></figure><ol><li>运行yaml</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@host-10-10-110-101 ~]# ansible-playbook nginx.yaml </span><br><span class="line"></span><br><span class="line">PLAY [client] **********************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *************************************************************************************************</span><br><span class="line">ok: [linux3.skills.com]</span><br><span class="line">ok: [linux2.skills.com]</span><br><span class="line">ok: [linux4.skills.com]</span><br><span class="line">ok: [linux5.skills.com]</span><br><span class="line"></span><br><span class="line">TASK [install nginx] ***************************************************************************************************</span><br><span class="line">changed: [linux2.skills.com]</span><br><span class="line">changed: [linux3.skills.com]</span><br><span class="line">changed: [linux4.skills.com]</span><br><span class="line">changed: [linux5.skills.com]</span><br><span class="line"></span><br><span class="line">TASK [copy index.html] *************************************************************************************************</span><br><span class="line">changed: [linux2.skills.com]</span><br><span class="line">changed: [linux5.skills.com]</span><br><span class="line">changed: [linux4.skills.com]</span><br><span class="line">changed: [linux3.skills.com]</span><br><span class="line"></span><br><span class="line">TASK [start nginx] *****************************************************************************************************</span><br><span class="line">changed: [linux2.skills.com]</span><br><span class="line">changed: [linux4.skills.com]</span><br><span class="line">changed: [linux3.skills.com]</span><br><span class="line">changed: [linux5.skills.com]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *************************************************************************************************************</span><br><span class="line">linux2.skills.com          : ok=4    changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">linux3.skills.com          : ok=4    changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">linux4.skills.com          : ok=4    changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">linux5.skills.com          : ok=4    changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>访问网站</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@host-10-10-110-101 ~]# ansible client -m shell -a &quot;curl localhost&quot;</span><br><span class="line">linux5.skills.com | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">Hello Nginx  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100    12  100    12    0     0   6000      0 --:--:-- --:--:-- --:--:--  6000</span><br><span class="line">linux2.skills.com | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">Hello Nginx  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100    12  100    12    0     0  12000      0 --:--:-- --:--:-- --:--:-- 12000</span><br><span class="line">linux4.skills.com | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">Hello Nginx  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100    12  100    12    0     0   6000      0 --:--:-- --:--:-- --:--:-- 12000</span><br><span class="line">linux3.skills.com | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">Hello Nginx  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100    12  100    12    0     0   6000      0 --:--:-- --:--:-- --:--:--  6000</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ansible </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络建设与运维 </tag>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>Categories</title>
      <link href="/Categories/index-1.html"/>
      <url>/Categories/index-1.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/Categories/index.html"/>
      <url>/Categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>gallery</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="wanxiaB.jpeg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Top榜</div>  <p>我心目中最好看的照片</p>  <a href="/Gallery/wanxiaB"></a>  </figcaption>  </figure>     <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="yuanshen1.jpg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">原神</div>  <p>Genshin</p>  <a href="/Gallery/genshin"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="ganjiang.jpeg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">赣江公园</div>  <p>过期的老照片还是会有感觉</p>  <a href="/Gallery/ganjiang"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="riluoA.jpeg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">日落</div>  <p>什么时候还能独自骑着车看日落呢</p>  <a href="/Gallery/sunshinA"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="wanxiaA.png" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">晚霞</div>  <p>我拍的晚霞包好看的</p>  <a href="/Gallery/wanxiaA"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="xuetianA.jpg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">雪天</div>  <p>冬将军也来了</p>  <a href="/Gallery/xuetian"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="lushanA.jpeg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">庐山一日游</div>  <p>庐山拍的一些照片</p>  <a href="/Gallery/lushan"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="baiyunA.jpeg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">白云</div>  <p>一些白云的集锦</p>  <a href="/Gallery/baiyunA"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="suipai.jpeg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">随拍</div>  <p>随便拍的</p>  <a href="/Gallery/suipai"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="brotherA.jpg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">我们</div>  <p>我和我的好兄弟们</p>  <a href="/Gallery/brother"></a>  </figcaption>  </figure>  </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><h2 id="大家好-我是WaitAyaka-下面是我的基础信息"><a href="#大家好-我是WaitAyaka-下面是我的基础信息" class="headerlink" title="大家好 我是WaitAyaka 下面是我的基础信息"></a>大家好 我是WaitAyaka 下面是我的基础信息</h2><ul><li>年龄：17</li><li>身高：?</li><li>性别：男</li><li>爱好：爱好有很多</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Archives</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/Tags/index.html"/>
      <url>/Tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>comment</title>
      <link href="/comment/index.html"/>
      <url>/comment/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/*哔哩哔哩视频适配*/.aspect-ratio {    position: relative;    width: 90%;    height: auto;    padding-bottom: 75%;    margin: 3% auto;    text-align: center;  }  .aspect-ratio iframe {    position: absolute;    width: 100%;    height: 86%;    left: 0;    top: 0;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/day.js"/>
      <url>/js/day.js</url>
      
        <content type="html"><![CDATA[var d = new Date();m = d.getMonth() + 1;dd = d.getDate();y = d.getFullYear();// 公祭日if (m == 9 && dd == 18) {    document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("今天是九一八事变" + (y - 1931).toString() + "周年纪念日\n🪔勿忘国耻，振兴中华🪔");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 7 && dd == 7) {    document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("今天是卢沟桥事变" + (y - 1937).toString() + "周年纪念日\n🪔勿忘国耻，振兴中华🪔");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 12 && dd == 13) {    document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("今天是南京大屠杀" + (y - 1937).toString() + "周年纪念日\n🪔勿忘国耻，振兴中华🪔");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 8 && dd == 14) {    document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("今天是世界慰安妇纪念日\n🪔勿忘国耻，振兴中华🪔");        sessionStorage.setItem("isPopupWindow", "1");    }}// 节假日if (m == 10 && dd <= 3) {//国庆节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("祝祖国" + (y - 1949).toString() + "岁生日快乐！");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 8 && dd == 15) {//搞来玩的，小日子投降    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("小日子已经投降" + (y - 1945).toString() + "年了😃");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 1 && dd == 1) {//元旦节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire(y.toString() + "年元旦快乐！🎉");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 3 && dd == 8) {//妇女节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("各位女神们，妇女节快乐！👩");        sessionStorage.setItem("isPopupWindow", "1");    }}l = ["非常抱歉，因为不可控原因，博客将于明天停止运营！", "好消息，日本没了！", "美国垮了，原因竟然是川普！", "微软垮了！", "你的电脑已经过载，建议立即关机！", "你知道吗？站长很喜欢你哦！", "一分钟有61秒哦", "你喜欢的人跟别人跑了！"]if (m == 4 && dd == 1) {//愚人节，随机谎话    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire(l[Math.floor(Math.random() * l.length)]);        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 5 && dd == 1) {//劳动节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("劳动节快乐\n为各行各业辛勤工作的人们致敬！");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 5 && dd == 4) {//青年节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("青年节快乐\n青春不是回忆逝去,而是把握现在！");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 5 && dd == 20) {//520    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("今年是520情人节\n快和你喜欢的人一起过吧！💑");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 7 && dd == 1) {//建党节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("祝中国共产党" + (y - 1921).toString() + "岁生日快乐！");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 9 && dd == 10) {//教师节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("各位老师们教师节快乐！👩‍🏫");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 12 && dd == 25) {//圣诞节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("圣诞节快乐！🎄");        sessionStorage.setItem("isPopupWindow", "1");    }}//传统节日部分if ((y == 2023 && m == 4 && dd == 5) || (y == 2024 && m == 4 && dd == 4) || (y == 2025 && m == 4 && dd == 4)) {//清明节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("清明时节雨纷纷,一束鲜花祭故人💐");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((y == 2023 && m == 12 && dd == 22) || (y == 2024 && m == 12 && dd == 21) || (y == 2025 && m == 12 && dd == 21)) {//冬至    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("冬至快乐\n快吃上一碗热热的汤圆和饺子吧🧆");        sessionStorage.setItem("isPopupWindow", "1");    }}var lunar = calendarFormatter.solar2lunar();//农历采用汉字计算，防止出现闰月导致问题if ((lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初六") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初五") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初四") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初三") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初二") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初一") || (lunar["IMonthCn"] == "腊月" && lunar["IDayCn"] == "三十") || (lunar["IMonthCn"] == "腊月" && lunar["IDayCn"] == "廿九")) {    //春节，本来只有大年三十到初六，但是有时候除夕是大年二十九，所以也加上了    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire(y.toString() + "年新年快乐\n🎊祝你心想事成，诸事顺利🎊");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "十五")) {    //元宵节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("元宵节快乐\n送你一个大大的灯笼🧅");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((lunar["IMonthCn"] == "五月" && lunar["IDayCn"] == "初五")) {    //端午节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("端午节快乐\n请你吃一条粽子🍙");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((lunar["IMonthCn"] == "七月" && lunar["IDayCn"] == "初七")) {    //七夕节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("七夕节快乐\n黄昏后,柳梢头,牛郎织女来碰头");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((lunar["IMonthCn"] == "八月" && lunar["IDayCn"] == "十五")) {    //中秋节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("中秋节快乐\n请你吃一块月饼🍪");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((lunar["IMonthCn"] == "九月" && lunar["IDayCn"] == "初九")) {    //重阳节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("重阳节快乐\n独在异乡为异客，每逢佳节倍思亲");        sessionStorage.setItem("isPopupWindow", "1");    }}// 切换主题提醒// if (y == 2022 && m == 12 && (dd >= 18 && dd <= 20)) {//     if (sessionStorage.getItem("isPopupWindow") != "1") {//         Swal.fire("网站换成冬日限定主题啦⛄");//         sessionStorage.setItem("isPopupWindow", "1");//     }// }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Gallery/baiyunA/index.html"/>
      <url>/Gallery/baiyunA/index.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="1713351841768.jpeg" alt="1713351841768"></p><p><img src="1713351839449.jpeg" alt="1713351839449"></p><p><img src="1713351841121.jpeg" alt="1713351841121"></p><p><img src="1713351837469.jpeg" alt="1713351837469"></p><p><img src="1713351838719.jpeg" alt="1713351838719"></p><p><img src="1713351837238.jpeg" alt="1713351837238"></p><p><img src="1713351842823.jpeg" alt="1713351842823"></p><p><img src="1713351848222.jpeg" alt="1713351848222"></p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Gallery/ganjiang/index.html"/>
      <url>/Gallery/ganjiang/index.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/1713351841837.jpeg" alt="1713351841837"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/1713352117971.jpeg" alt="1713352117971"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/1713352118287.jpeg" alt="1713352118287"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/1713352118582.jpeg" alt="1713352118582"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/1713352118983.jpeg" alt="1713352118983"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/1713352119292.jpeg" alt="1713352119292"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/1713352119393.jpeg" alt="1713352119393"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/1713352119737.jpeg" alt="1713352119737"></p><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/1713352119849.jpeg" alt="1713352119849"></p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Gallery/genshin/index.html"/>
      <url>/Gallery/genshin/index.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="1256318.jpg" alt="1256318"></p><p><img src="1275964.jpg" alt="1275964"><br><img src="1297318.jpg" alt="1297318"><br><img src="1341977.jpg" alt="1341977"></p><p><img src="1327796.jpeg" alt="img"></p><p><img src="1298767.jpeg" alt="img"></p><p><img src="1166471.jpeg" alt="img"><img src="1138253.jpg" alt="img"></p><p><a href="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/1713352114983.jpeg">https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/1713352114983.jpeg</a></p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Gallery/suipai/index.html"/>
      <url>/Gallery/suipai/index.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="1713351847925.jpeg" alt="1713351847925"></p><p><img src="1713351847527.jpeg" alt="1713351847527"></p><p><img src="1713351846608.jpeg" alt="1713351846608"></p><p><img src="1713351846223.jpeg" alt="1713351846223"></p><p><img src="1713351848581.jpeg" alt="1713351848581"></p><p><img src="1713351848697.jpeg" alt="1713351848697"></p><p><img src="1713351848222.jpeg" alt="1713351848222"></p><p><img src="1713352111411.jpeg" alt="1713352111411"></p><p><img src="1713352111304.jpeg" alt="1713352111304"></p><p><img src="1713351849228.jpeg" alt="1713351849228"></p><p><img src="1713352112802.jpeg" alt="1713352112802"></p><p><img src="1713352112877.jpeg" alt="1713352112877"></p><p><img src="1713352112532-1713356849143.jpeg" alt="1713352112532"></p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Gallery/lushan/index.html"/>
      <url>/Gallery/lushan/index.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="1713351843744.jpeg" alt="1713351843744"></p><p><img src="1713351843894.jpeg" alt="1713351843894"></p><ul><li>庐山恋</li></ul><p><img src="1713351844073.jpeg" alt="1713351844073"></p><p><img src="1713351844192.jpeg" alt="1713351844192"></p><ul><li>我在庐山很想你</li></ul><p><img src="1713351844430-1713355112648.jpeg" alt="1713351844430"></p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Gallery/wanxiaA/index.html"/>
      <url>/Gallery/wanxiaA/index.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="1713351839120.jpeg" alt="1713351839120"></p><p><img src="1713352113465.jpeg" alt="1713352113465"></p><p><img src="1713352114983.jpeg" alt="1713352114983"></p><p><img src="1713352113417.jpeg" alt="1713352113417"></p><p><img src="1713351845765.jpeg" alt="1713351845765"></p><p><img src="1713351841395.jpeg" alt="1713351841395"></p><p><img src="1713351841042.jpeg" alt="1713351841042"></p><p><img src="1713351840782.jpeg" alt="1713351840782"></p><p><img src="1713351838719.jpeg" alt="1713351838719"></p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Gallery/sunshinA/index.html"/>
      <url>/Gallery/sunshinA/index.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="1713352114983.jpeg" alt="1713352114983"></p><p><img src="1713352114756.jpeg" alt="1713352114756"></p><p><img src="1713352114470.jpeg" alt="1713352114470"></p><p><img src="1713352113996.jpeg" alt="1713352113996"></p><p><img src="1713352117508.jpeg" alt="1713352117508"></p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Gallery/wanxiaB/index.html"/>
      <url>/Gallery/wanxiaB/index.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="https://gitee.com/WaitAyaka/wait-ayaka-pictures/raw/master/1713352115827-1713355418355.jpeg" alt="1713352115827"></p><p><img src="1713351840620.jpeg" alt="1713351840620"></p><p><img src="1713351842823.jpeg" alt="1713351842823"></p><p><img src="1713351843354.jpeg" alt="1713351843354"></p><p><img src="1713352111602.jpeg" alt="1713352111602"></p><p><img src="Image_1713351583820.jpg" alt="Image_1713351583820"></p><p><img src="Image_1713351590252.jpg" alt="Image_1713351590252"></p><p><img src="1713352115971.jpeg" alt="1713352115971"></p><p><img src="1713351839495.jpeg" alt="1713351839495"></p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Gallery/xuetian/index.html"/>
      <url>/Gallery/xuetian/index.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="1713351837942.jpeg" alt="1713351837942"></p><p><img src="1713351838357.jpeg" alt="1713351838357"></p><p><img src="1713351838990-1713355560186.jpeg" alt="1713351838990"></p>          </div>]]></content>
      
    </entry>
    
    
  
</search>
